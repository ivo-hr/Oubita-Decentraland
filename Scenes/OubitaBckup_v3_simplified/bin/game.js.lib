[
  {
    "path": "node_modules\\@dcl\\amd\\dist\\amd.js",
    "content": "\"use strict\";\n// A naive attempt at getting the global `this`. Don’t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "1fcc2d76805964317daad52b00a258748d14ac85cfd45892dfdb47e8951b1ef1"
  },
  {
    "path": "node_modules\\decentraland-ecs\\dist\\src\\index.js",
    "content": "(function (exports) {\n  'use strict';\n\n  /**\r\n   * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities\r\n   * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\r\n   * @public\r\n   */\r\n  var Attachable = /** @class */ (function () {\r\n      function Attachable() {\r\n      }\r\n      /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */\r\n      Attachable.AVATAR = {\r\n          getEntityRepresentation: function (engine) { return engine.avatarEntity; }\r\n      };\r\n      /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */\r\n      Attachable.FIRST_PERSON_CAMERA = {\r\n          getEntityRepresentation: function (engine) { return engine.firstPersonCameraEntity; }\r\n      };\r\n      return Attachable;\r\n  }());\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n  /* global Reflect, Promise */\r\n\r\n  var extendStatics = function(d, b) {\r\n      extendStatics = Object.setPrototypeOf ||\r\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n      return extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n      if (typeof b !== \"function\" && b !== null)\r\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n      extendStatics(d, b);\r\n      function __() { this.constructor = d; }\r\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\r\n\r\n  function __decorate(decorators, target, key, desc) {\r\n      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n      return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n  }\r\n\r\n  function __metadata(metadataKey, metadataValue) {\r\n      if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n  }\r\n\r\n  function __awaiter(thisArg, _arguments, P, generator) {\r\n      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n      return new (P || (P = Promise))(function (resolve, reject) {\r\n          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n          function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n      });\r\n  }\r\n\r\n  function __generator(thisArg, body) {\r\n      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n      function verb(n) { return function (v) { return step([n, v]); }; }\r\n      function step(op) {\r\n          if (f) throw new TypeError(\"Generator is already executing.\");\r\n          while (_) try {\r\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n              if (y = 0, t) op = [op[0] & 2, t.value];\r\n              switch (op[0]) {\r\n                  case 0: case 1: t = op; break;\r\n                  case 4: _.label++; return { value: op[1], done: false };\r\n                  case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                  case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                  default:\r\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                      if (t[2]) _.ops.pop();\r\n                      _.trys.pop(); continue;\r\n              }\r\n              op = body.call(thisArg, _);\r\n          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n      }\r\n  }\r\n\r\n  function __values(o) {\r\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n      if (m) return m.call(o);\r\n      if (o && typeof o.length === \"number\") return {\r\n          next: function () {\r\n              if (o && i >= o.length) o = void 0;\r\n              return { value: o && o[i++], done: !o };\r\n          }\r\n      };\r\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n  }\r\n\r\n  function __read(o, n) {\r\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n      if (!m) return o;\r\n      var i = m.call(o), r, ar = [], e;\r\n      try {\r\n          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n      }\r\n      catch (error) { e = { error: error }; }\r\n      finally {\r\n          try {\r\n              if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n          }\r\n          finally { if (e) throw e.error; }\r\n      }\r\n      return ar;\r\n  }\r\n\r\n  function __spreadArray(to, from) {\r\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n          to[j] = from[i];\r\n      return to;\r\n  }\n\n  var lastGeneratedId = 0;\r\n  /**\r\n   * Log function. Only works in debug mode, otherwise it does nothing.\r\n   * @param args - any loggable parameter\r\n   * @public\r\n   */\r\n  function log() {\r\n      var args = [];\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n          args[_i] = arguments[_i];\r\n      }\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.log.apply(dcl, __spreadArray([], __read(args)));\r\n      }\r\n      else {\r\n          console.log.apply(console, __spreadArray(['DEBUG:'], __read(args)));\r\n      }\r\n  }\r\n  /**\r\n   * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\r\n   * @param error - string or Error object.\r\n   * @param data - any debug information.\r\n   * @public\r\n   */\r\n  function error(error, data) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.error(error, data);\r\n      }\r\n      else {\r\n          console.error('ERROR:', error, data);\r\n      }\r\n  }\r\n  /**\r\n   * Generates a new prefixed id\r\n   * @public\r\n   */\r\n  function newId(type) {\r\n      lastGeneratedId++;\r\n      if (type.length === 0)\r\n          throw new Error('newId(type: string): type cannot be empty');\r\n      return type + lastGeneratedId.toString(36);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  function uuid() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n          var r = (Math.random() * 16) | 0;\r\n          var v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n          return v.toString(16);\r\n      });\r\n  }\r\n  /**\r\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\r\n   * @param size - the number of element to construct and put in the array\r\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\r\n   * @returns a new array filled with new objects\r\n   * @internal\r\n   */\r\n  function buildArray$1(size, itemBuilder) {\r\n      var a = [];\r\n      for (var i = 0; i < size; ++i) {\r\n          a.push(itemBuilder());\r\n      }\r\n      return a;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function openExternalURL(url) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.openExternalUrl(url);\r\n      }\r\n      else {\r\n          error('ERROR: openExternalURL dcl is undefined');\r\n      }\r\n  }\r\n  /**\r\n   * Popup NFT info dialog\r\n   * @param scr - 'ethereum://contractAddress/tokenID'\r\n   * @param comment - optional. add a comment.\r\n   * @public\r\n   */\r\n  function openNFTDialog(scr, comment) {\r\n      if (comment === void 0) { comment = null; }\r\n      if (typeof dcl !== 'undefined') {\r\n          var regex = /ethereum:\\/\\/(.+)\\/(.+)/;\r\n          var matches = scr.match(regex);\r\n          if (!matches || matches.length < 3) {\r\n              return;\r\n          }\r\n          dcl.openNFTDialog(matches[1], matches[2], comment);\r\n      }\r\n      else {\r\n          error('ERROR: openNFTDialog dcl is undefined');\r\n      }\r\n  }\n\n  var eventNameSymbol = '__event_name__';\r\n  var takenEventNames = [];\r\n  function getEventNameFromConstructor(ctor) {\r\n      if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\r\n          throw new Error('The EventConstructor is not registered');\r\n      }\r\n      return ctor[eventNameSymbol];\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var EventManager = /** @class */ (function () {\r\n      function EventManager() {\r\n          this.listeners = {};\r\n      }\r\n      EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              listeners = this.listeners[eventName] = [];\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  throw new Error('The provided listener is already registered');\r\n              }\r\n          }\r\n          listeners.push({\r\n              listener: listener,\r\n              fn: listenerFunction\r\n          });\r\n          return this;\r\n      };\r\n      EventManager.prototype.removeListener = function (listener, eventClass) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              return false;\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  listeners.splice(i, 1);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      EventManager.prototype.fireEvent = function (event) {\r\n          var eventName = getEventNameFromConstructor(event.constructor);\r\n          var listeners = this.listeners[eventName];\r\n          if (listeners) {\r\n              for (var i = 0; i < listeners.length; i++) {\r\n                  try {\r\n                      var l = listeners[i];\r\n                      l.fn.call(l.listener, event);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an instance of Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      return EventManager;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function EventConstructor() {\r\n      var eventName = newId('EV');\r\n      if (takenEventNames.indexOf(eventName) !== -1) {\r\n          throw new Error(\"The event name \" + eventName + \" is already taken\");\r\n      }\r\n      takenEventNames.push(eventName);\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      return function (target) {\r\n          target[eventNameSymbol] = eventName;\r\n          return target;\r\n      };\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentRemoved = /** @class */ (function () {\r\n      function ComponentRemoved(entity, componentName, component) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      ComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentRemoved);\r\n      return ComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ComponentAdded = /** @class */ (function () {\r\n      function ComponentAdded(entity, componentName, classId) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      ComponentAdded = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentAdded);\r\n      return ComponentAdded;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ParentChanged = /** @class */ (function () {\r\n      function ParentChanged(entity, parent) {\r\n          this.entity = entity;\r\n          this.parent = parent;\r\n          // stub\r\n      }\r\n      ParentChanged = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, Object])\r\n      ], ParentChanged);\r\n      return ParentChanged;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.UIValueType = void 0;\r\n  (function (UIValueType) {\r\n      UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\r\n      UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\r\n  })(exports.UIValueType || (exports.UIValueType = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIValue = /** @class */ (function () {\r\n      function UIValue(value) {\r\n          this.type = exports.UIValueType.PIXELS;\r\n          if (typeof value === 'string') {\r\n              var valueAsString = value;\r\n              if (valueAsString.indexOf('px') > -1) {\r\n                  this.type = exports.UIValueType.PIXELS;\r\n              }\r\n              else if (valueAsString.indexOf('%') > -1) {\r\n                  this.type = exports.UIValueType.PERCENT;\r\n              }\r\n              this.value = parseFloat(valueAsString);\r\n          }\r\n          else {\r\n              this.value = value;\r\n          }\r\n      }\r\n      UIValue.prototype.toString = function () {\r\n          var result = this.value.toString();\r\n          if (this.type === exports.UIValueType.PERCENT) {\r\n              result += '%';\r\n          }\r\n          else {\r\n              result += 'px';\r\n          }\r\n          return result;\r\n      };\r\n      return UIValue;\r\n  }());\n\n  var componentSymbol = '__name__symbol_';\r\n  var componentClassIdSymbol = '__classId__symbol_';\r\n  var componentIdSymbol = '__component__id_';\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentCreated = /** @class */ (function () {\r\n      function DisposableComponentCreated(componentId, componentName, classId) {\r\n          this.componentId = componentId;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      DisposableComponentCreated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, String, Number])\r\n      ], DisposableComponentCreated);\r\n      return DisposableComponentCreated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentRemoved = /** @class */ (function () {\r\n      function DisposableComponentRemoved(componentId) {\r\n          this.componentId = componentId;\r\n          // stub\r\n      }\r\n      DisposableComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], DisposableComponentRemoved);\r\n      return DisposableComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentUpdated = /** @class */ (function () {\r\n      function DisposableComponentUpdated(componentId, component) {\r\n          this.componentId = componentId;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      DisposableComponentUpdated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], DisposableComponentUpdated);\r\n      return DisposableComponentUpdated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function Component(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \" + target.originalClassName + \" with: \" + componentName);\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function DisposableComponent(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \" + target.originalClassName + \" with: \" + componentName);\r\n          }\r\n          if (typeof classId !== 'number' || isNaN(classId)) {\r\n              throw new Error(\"classId: \" + classId + \" is an invalid integer\");\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              if (!DisposableComponent.engine) {\r\n                  throw new Error('You need to set a DisposableComponent.engine before creating disposable components');\r\n              }\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              var id = newId('C');\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              Object.defineProperty(ret, componentIdSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: id\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              if (DisposableComponent.engine) {\r\n                  DisposableComponent.engine.registerComponent(ret);\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.isDisposableComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /** @internal */\r\n  (function (DisposableComponent) {\r\n      /** @internal */\r\n      // eslint-disable-next-line prefer-const\r\n      DisposableComponent.engine = null;\r\n  })(DisposableComponent || (DisposableComponent = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentName(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentSymbol]) {\r\n          return component[componentSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentClassId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentClassIdSymbol]) {\r\n          return component[componentClassIdSymbol];\r\n      }\r\n      if (!component[componentSymbol]) {\r\n          throw new TypeError(component + ' is not a registered component.');\r\n      }\r\n      return null;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentIdSymbol]) {\r\n          return component[componentIdSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered disposable component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var ObservableComponent = /** @class */ (function () {\r\n      function ObservableComponent() {\r\n          // @internal\r\n          this.dirty = false;\r\n          // @internal\r\n          this.data = {};\r\n          this.subscriptions = [];\r\n      }\r\n      ObservableComponent.component = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          this.data[propertyKey] = getComponentId(value);\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.field = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      this.data[propertyKey] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.uiValue = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey].toString();\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      var finalValue = new UIValue(value);\r\n                      this.data[propertyKey] = finalValue;\r\n                      if (finalValue !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, finalValue, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.readonly = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      if (propertyKey in this.data === false) {\r\n                          throw new Error(\"The field \" + propertyKey + \" is uninitialized\");\r\n                      }\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      if (propertyKey in this.data) {\r\n                          throw new Error(\"The field \" + propertyKey + \" is readonly\");\r\n                      }\r\n                      this.data[propertyKey] = value;\r\n                      this.dirty = true;\r\n                  },\r\n                  enumerable: true,\r\n                  configurable: false\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.prototype.onChange = function (fn) {\r\n          this.subscriptions.push(fn);\r\n          return this;\r\n      };\r\n      ObservableComponent.prototype.toJSON = function () {\r\n          return this.data;\r\n      };\r\n      return ObservableComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function isDisposableComponent(component) {\r\n      return componentIdSymbol in component;\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentGroup = /** @class */ (function () {\r\n      function ComponentGroup() {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          this.entities = [];\r\n          this.active = false;\r\n          this._requiresNames = [];\r\n          // validate requires list\r\n          if (!requires) {\r\n              throw new Error('ComponentGroup: Could not load the requires list');\r\n          }\r\n          if (!(requires instanceof Array)) {\r\n              throw new Error('ComponentGroup: requires list is not an Array');\r\n          }\r\n          Object.defineProperty(this, 'requires', {\r\n              get: function () {\r\n                  return requires.slice();\r\n              }\r\n          });\r\n          Object.defineProperty(this, 'requiresNames', {\r\n              get: function () {\r\n                  return this._requiresNames.slice();\r\n              }\r\n          });\r\n          var _loop_1 = function (ix) {\r\n              var component = requires[ix];\r\n              var name = null;\r\n              if (!component) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \" + ix + \" is invalid\");\r\n              }\r\n              try {\r\n                  name = getComponentName(component);\r\n              }\r\n              catch (e) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \" + ix + \" is not registered as a @Component. Remember to provide the class of the component, not the name\");\r\n              }\r\n              if (this_1._requiresNames.some(function ($) { return $ === name; })) {\r\n                  throw new Error(\"ComponentGroup: the required component list has a repeated name \" + name);\r\n              }\r\n              this_1._requiresNames.push(name);\r\n          };\r\n          var this_1 = this;\r\n          for (var ix = 0; ix < requires.length; ix++) {\r\n              _loop_1(ix);\r\n          }\r\n      }\r\n      ComponentGroup.prototype.hasEntity = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return false;\r\n          return this.entities.indexOf(entity) !== -1;\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.addEntity = function (entity) {\r\n          if (!entity.isAddedToEngine()) {\r\n              throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');\r\n          }\r\n          if (this.entities.indexOf(entity) === -1) {\r\n              this.entities.push(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.removeEntity = function (entity) {\r\n          var id = this.entities.indexOf(entity);\r\n          if (id !== -1) {\r\n              this.entities.splice(id, 1);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.componentRemoved = function (entity, component) {\r\n          if (this._requiresNames.indexOf(component) !== -1) {\r\n              this.removeEntity(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.meetsRequirements = function (entity) {\r\n          for (var i = 0; i < this._requiresNames.length; i++) {\r\n              var componentName = this._requiresNames[i];\r\n              if (!(componentName in entity.components)) {\r\n                  return false;\r\n              }\r\n          }\r\n          return true;\r\n      };\r\n      return ComponentGroup;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Entity = /** @class */ (function () {\r\n      function Entity(name) {\r\n          this.name = name;\r\n          this.children = {};\r\n          this.eventManager = null;\r\n          this.alive = false;\r\n          this.uuid = newId('E');\r\n          this.components = {};\r\n          // @internal\r\n          this.engine = null;\r\n          // @internal\r\n          this._parent = null;\r\n          // stub\r\n      }\r\n      /**\r\n       * Adds or replaces a component in the entity.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponentOrReplace = function (component) {\r\n          if (typeof component === 'function') {\r\n              throw new Error('You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          if (typeof component !== 'object') {\r\n              throw new Error(\"You passed a \" + typeof component + \", an instance of component is expected\");\r\n          }\r\n          var componentName = getComponentName(component);\r\n          if (this.components[componentName]) {\r\n              if (this.components[componentName] === component) {\r\n                  return component;\r\n              }\r\n              this.removeComponent(this.components[componentName], false);\r\n          }\r\n          return this.addComponent(component);\r\n      };\r\n      Entity.prototype.hasComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'object' &&\r\n              typeOfComponent !== 'function') {\r\n              throw new Error('Entity#has(component): component is not a class, name or instance');\r\n          }\r\n          if (component === null)\r\n              return false;\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return false;\r\n          }\r\n          if (typeOfComponent === 'object') {\r\n              return storedComponent === component;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              return storedComponent instanceof component;\r\n          }\r\n          return true;\r\n      };\r\n      Entity.prototype.getComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#get(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              throw new Error(\"Can not get component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  throw new Error(\"Can not get component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\" (by instance)\");\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      Entity.prototype.getComponentOrNull = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#getOrNull(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return null;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  return null;\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      /**\r\n       * Gets a component, if it doesn't exist, it creates the component and returns it.\r\n       * @param component - component class\r\n       */\r\n      Entity.prototype.getComponentOrCreate = function (component) {\r\n          if (typeof component !== 'function') {\r\n              throw new Error('Entity#getOrCreate(component): component is not a class');\r\n          }\r\n          var ret = this.getComponentOrNull(component);\r\n          if (!ret) {\r\n              ret = new component();\r\n              // Safe-guard to only add registered components to entities\r\n              getComponentName(ret);\r\n              this.addComponentOrReplace(ret);\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Adds a component. If the component already exist, it throws an Error.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponent = function (component) {\r\n          if (typeof component !== 'object') {\r\n              throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          var componentName = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          if (this.components[componentName]) {\r\n              throw new Error(\"A component of type \\\"\" + componentName + \"\\\" is already present in entity \\\"\" + this.identifier + \"\\\"\");\r\n          }\r\n          this.components[componentName] = component;\r\n          if (this.eventManager) {\r\n              this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));\r\n          }\r\n          var storedComponent = component;\r\n          if (typeof storedComponent.addedToEntity === 'function') {\r\n              storedComponent.addedToEntity(this);\r\n          }\r\n          return component;\r\n      };\r\n      Entity.prototype.removeComponent = function (\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      component, triggerRemovedEvent) {\r\n          if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'function' &&\r\n              typeOfComponent !== 'object') {\r\n              throw new Error('Entity#remove(component): component is not a class, class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              log(\"Entity Warning: Trying to remove inexisting component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n              return;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  delete this.components[componentName];\r\n                  if (storedComponent) {\r\n                      if (triggerRemovedEvent && this.eventManager) {\r\n                          this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n                      }\r\n                      if (typeof storedComponent.removedFromEntity === 'function') {\r\n                          storedComponent.removedFromEntity(this);\r\n                      }\r\n                  }\r\n                  return;\r\n              }\r\n              else {\r\n                  log(\"Entity Warning: Trying to remove wrong (by constructor) component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n                  return;\r\n              }\r\n          }\r\n          delete this.components[componentName];\r\n          if (storedComponent) {\r\n              if (triggerRemovedEvent && this.eventManager) {\r\n                  this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n              }\r\n              if (typeof storedComponent.removedFromEntity === 'function') {\r\n                  storedComponent.removedFromEntity(this);\r\n              }\r\n          }\r\n          return;\r\n      };\r\n      /**\r\n       * Returns true if the entity is already added to the engine.\r\n       * Returns false if no engine was defined.\r\n       */\r\n      Entity.prototype.isAddedToEngine = function () {\r\n          if (this.engine &&\r\n              (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Sets the parent entity\r\n       */\r\n      Entity.prototype.setParent = function (_parent) {\r\n          var newParent;\r\n          // Check if parent is of type Attachable\r\n          if (_parent && 'getEntityRepresentation' in _parent) {\r\n              if (!this.engine) {\r\n                  throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");\r\n              }\r\n              newParent = _parent.getEntityRepresentation(this.engine);\r\n          }\r\n          else {\r\n              newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\r\n          }\r\n          var currentParent = this.getParent();\r\n          if (newParent === this) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\" + this.identifier + \"\\\": An entity can't set itself as a its own parent\");\r\n          }\r\n          if (newParent === currentParent) {\r\n              return this;\r\n          }\r\n          var circularAncestor = this.getCircularAncestor(newParent);\r\n          if (circularAncestor) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\" + this.identifier + \"\\\": Circular parent references are not allowed (See entity \\\"\" + circularAncestor + \"\\\")\");\r\n          }\r\n          if (currentParent) {\r\n              delete currentParent.children[this.uuid];\r\n          }\r\n          // Make sure that the parent and child are both on the engine, or off the engine, together\r\n          if (newParent !== null && newParent.uuid !== '0') {\r\n              if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\r\n                  this.engine.removeEntity(this);\r\n              }\r\n              if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\r\n                  newParent.engine.addEntity(this);\r\n              }\r\n          }\r\n          this._parent = newParent || null;\r\n          this.registerAsChild();\r\n          if (this.eventManager && this.engine) {\r\n              this.eventManager.fireEvent(new ParentChanged(this, newParent));\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the parent entity\r\n       */\r\n      Entity.prototype.getParent = function () {\r\n          return this._parent;\r\n      };\r\n      Object.defineProperty(Entity.prototype, \"identifier\", {\r\n          get: function () {\r\n              return this.name || this.uuid;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Entity.prototype.getCircularAncestor = function (ent) {\r\n          var root = this.engine ? this.engine.rootEntity : null;\r\n          var e = ent;\r\n          while (e && e !== root) {\r\n              var parent = e.getParent();\r\n              if (parent === this) {\r\n                  return e.uuid;\r\n              }\r\n              e = parent;\r\n          }\r\n          return null;\r\n      };\r\n      Entity.prototype.registerAsChild = function () {\r\n          var parent = this.getParent();\r\n          if (this.uuid && parent) {\r\n              parent.children[this.uuid] = this;\r\n          }\r\n      };\r\n      return Entity;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Engine = /** @class */ (function () {\r\n      function Engine(rootEntity) {\r\n          this.eventManager = new EventManager();\r\n          // @internal\r\n          this.systems = [];\r\n          // @internal\r\n          this.entityLists = {};\r\n          // @internal\r\n          this.addedSystems = [];\r\n          this._entities = {};\r\n          this._disposableComponents = {};\r\n          this._componentGroups = {};\r\n          // systems that doesn't require any component or handle their own logic\r\n          this.simpleSystems = [];\r\n          this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);\r\n          this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);\r\n          this.rootEntity = rootEntity;\r\n          this.firstPersonCameraEntity = new Entity();\r\n          this.firstPersonCameraEntity.uuid =\r\n              'FirstPersonCameraEntityReference';\r\n          this.addEntity(this.firstPersonCameraEntity);\r\n          this.avatarEntity = new Entity();\r\n          this.avatarEntity.uuid = 'AvatarEntityReference';\r\n          this.addEntity(this.avatarEntity);\r\n      }\r\n      Object.defineProperty(Engine.prototype, \"entities\", {\r\n          get: function () {\r\n              return this._entities;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Engine.prototype, \"disposableComponents\", {\r\n          get: function () {\r\n              return this._disposableComponents;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Engine.prototype.addEntity = function (entity) {\r\n          var parent = entity.getParent();\r\n          if (entity.isAddedToEngine()) {\r\n              return entity;\r\n          }\r\n          entity.eventManager = this.eventManager;\r\n          entity.engine = this;\r\n          this._entities[entity.uuid] = entity;\r\n          this.checkRequirementsAndAdd(entity);\r\n          if (!parent) {\r\n              entity.setParent(this.rootEntity);\r\n          }\r\n          else {\r\n              if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\r\n                  log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' +\r\n                      parent.uuid);\r\n              }\r\n          }\r\n          entity.alive = true;\r\n          for (var i in entity.children) {\r\n              var child = entity.children[i];\r\n              if (child) {\r\n                  if (!child.isAddedToEngine()) {\r\n                      this.addEntity(child);\r\n                  }\r\n              }\r\n          }\r\n          return entity;\r\n      };\r\n      Engine.prototype.removeEntity = function (entity) {\r\n          var id = entity.uuid;\r\n          if (entity.isAddedToEngine()) {\r\n              for (var componentName in entity.components) {\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      for (var groupIndex in componentGroups) {\r\n                          componentGroups[groupIndex].removeEntity(entity);\r\n                      }\r\n                  }\r\n                  delete this.entityLists[componentName][id];\r\n              }\r\n              for (var i = 0; i < this.simpleSystems.length; i++) {\r\n                  var system = this.simpleSystems[i];\r\n                  if (system.onRemoveEntity) {\r\n                      system.onRemoveEntity(entity);\r\n                  }\r\n              }\r\n              for (var i in entity.children) {\r\n                  var child = entity.children[i];\r\n                  if (child) {\r\n                      this.removeEntity(child);\r\n                  }\r\n              }\r\n              entity.alive = false;\r\n              entity.eventManager = null;\r\n              delete this._entities[id];\r\n              return true;\r\n          }\r\n          else {\r\n              log('Engine: Trying to remove non existent entity from engine.');\r\n              if (!entity.isAddedToEngine()) {\r\n                  log(\"Engine: Entity \\\"\" + entity.uuid + \"\\\" has not been added to any engine yet.\");\r\n              }\r\n              else {\r\n                  log('Engine: Entity id: ' + id);\r\n              }\r\n              log(\"Engine: Entity's components:\");\r\n              for (var componentName in entity.components) {\r\n                  log(componentName);\r\n              }\r\n              return false;\r\n          }\r\n      };\r\n      Engine.prototype.addSystem = function (system, priority) {\r\n          if (priority === void 0) { priority = 0; }\r\n          if (this.addedSystems.indexOf(system) !== -1) {\r\n              log('Engine: Trying to add a system that is already added. Aborting');\r\n              return system;\r\n          }\r\n          if (this.systems.length > 0) {\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var entry = this.systems[i];\r\n                  var isLast = i === this.systems.length - 1;\r\n                  if (entry.priority > priority) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n                  else if (isLast) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i + 1, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.addedSystems.push(system);\r\n              this.systems.splice(1, 0, { system: system, priority: priority });\r\n          }\r\n          this.registerSystem(system);\r\n          return system;\r\n      };\r\n      Engine.prototype.removeSystem = function (system) {\r\n          var idx = this.addedSystems.indexOf(system);\r\n          if (idx !== -1) {\r\n              system.active = false;\r\n              if (system.deactivate) {\r\n                  system.deactivate();\r\n              }\r\n              this.addedSystems.splice(idx, 1);\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var sys = this.systems[i].system;\r\n                  if (sys === system) {\r\n                      this.systems.splice(i, 1);\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.update = function (dt) {\r\n          for (var i in this.systems) {\r\n              var system = this.systems[i].system;\r\n              if (system.active && system.update) {\r\n                  try {\r\n                      system.update(dt);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      Engine.prototype.getEntitiesWithComponent = function (component) {\r\n          var componentName = typeof component === 'string' ? component : getComponentName(component);\r\n          if (componentName in this.entityLists) {\r\n              return this.entityLists[componentName];\r\n          }\r\n          else {\r\n              return (this.entityLists[componentName] = {});\r\n          }\r\n      };\r\n      Engine.prototype.registerComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          var name = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          this._disposableComponents[id] = component;\r\n          if (classId !== null) {\r\n              this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));\r\n              this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));\r\n          }\r\n      };\r\n      Engine.prototype.disposeComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          if (delete this._disposableComponents[id]) {\r\n              this.eventManager.fireEvent(new DisposableComponentRemoved(id));\r\n              if (component.onDispose) {\r\n                  component.onDispose();\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.updateComponent = function (component) {\r\n          this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));\r\n      };\r\n      Engine.prototype.getComponentGroup = function () {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          var componentGroup = undefined;\r\n          // Return an already created component-group if it already exists\r\n          if (requires.length > 0) {\r\n              // 1. get component groups for first require\r\n              var componentGroups = this._componentGroups[getComponentName(requires[0])];\r\n              if (componentGroups) {\r\n                  var components = requires.slice();\r\n                  // 2. search for a component group that has all the same requirements\r\n                  for (var i = 0; i < componentGroups.length; i++) {\r\n                      var traversedComponentGroup = componentGroups[i];\r\n                      if (components.length === traversedComponentGroup.requires.length) {\r\n                          for (var j = 0; j < components.length; j++) {\r\n                              if (traversedComponentGroup.requires.indexOf(components[j]) === -1)\r\n                                  break;\r\n                              if (j === components.length - 1) {\r\n                                  componentGroup = traversedComponentGroup;\r\n                              }\r\n                          }\r\n                          if (componentGroup)\r\n                              break;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          if (componentGroup) {\r\n              // 3. Found an existent component group with the exact same requirements\r\n              return componentGroup;\r\n          }\r\n          // Otherwise create and store it\r\n          componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires))))();\r\n          componentGroup.active = true;\r\n          var requiresNames = componentGroup.requiresNames;\r\n          for (var i = 0; i < requiresNames.length; i++) {\r\n              var componentName = requiresNames[i];\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (!componentGroups) {\r\n                  this._componentGroups[componentName] = componentGroups = [];\r\n              }\r\n              if (componentGroups.indexOf(componentGroup) === -1) {\r\n                  componentGroups.push(componentGroup);\r\n              }\r\n          }\r\n          for (var entityId in this._entities) {\r\n              this.checkRequirements(this._entities[entityId], componentGroup);\r\n          }\r\n          return componentGroup;\r\n      };\r\n      Engine.prototype.removeComponentGroup = function (componentGroup) {\r\n          if (componentGroup.active) {\r\n              componentGroup.active = false;\r\n              var requiresNames = componentGroup.requiresNames;\r\n              for (var i = 0; i < requiresNames.length; i++) {\r\n                  var componentName = requiresNames[i];\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      var idx = componentGroups.indexOf(componentGroup);\r\n                      if (idx !== -1) {\r\n                          componentGroups.splice(idx, 1);\r\n                      }\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.registerSystem = function (system) {\r\n          system.active = true;\r\n          if (system.activate) {\r\n              system.activate(this);\r\n          }\r\n          this.simpleSystems.push(system);\r\n      };\r\n      Engine.prototype.checkRequirementsAndAdd = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          for (var componentName in entity.components) {\r\n              if (!(componentName in this.entityLists)) {\r\n                  this.entityLists[componentName] = {};\r\n              }\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (componentGroups) {\r\n                  for (var systemIndex in componentGroups) {\r\n                      this.checkRequirements(entity, componentGroups[systemIndex]);\r\n                  }\r\n              }\r\n          }\r\n          for (var i = 0; i < this.simpleSystems.length; i++) {\r\n              var system = this.simpleSystems[i];\r\n              if (system.onAddEntity) {\r\n                  system.onAddEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.checkRequirements = function (entity, system) {\r\n          if (system.meetsRequirements(entity)) {\r\n              if (!system.hasEntity(entity)) {\r\n                  system.addEntity(entity);\r\n              }\r\n          }\r\n          else {\r\n              if (system.hasEntity(entity)) {\r\n                  system.removeEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentAddedHandler = function (event) {\r\n          var _a;\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          if (!this.entityLists[componentName]) {\r\n              this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\r\n          }\r\n          else {\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n          }\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentRemovedHandler = function (event) {\r\n          // In case a single component gets removed from an entity, we inform\r\n          // all systems that this entity lost this specific component.\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          delete this.entityLists[componentName][entity.uuid];\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      return Engine;\r\n  }());\n\n  var _defer = Promise.resolve().then.bind(Promise.resolve());\r\n  /**\r\n   * Executes an asynchronous task\r\n   * @param task - the task to execute\r\n   * @public\r\n   */\r\n  function executeTask(task) {\r\n      var result = _defer(task);\r\n      result.isComplete = false;\r\n      result\r\n          .then(function ($) {\r\n          result.isComplete = true;\r\n          result.result = $;\r\n          result.didFail = false;\r\n      })\r\n          .catch(function ($) {\r\n          result.isComplete = true;\r\n          result.error = $;\r\n          result.didFail = true;\r\n          error('executeTask: FAILED ' + $.toString(), $);\r\n      });\r\n      return result;\r\n  }\n\n  /**\r\n   * A class serves as a medium between the observable and its observers\r\n   * @public\r\n   */\r\n  var ObserverEventState = /** @class */ (function () {\r\n      /**\r\n       * Create a new EventState\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       */\r\n      function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.initalize(mask, skipNextObservers, target, currentTarget);\r\n      }\r\n      /**\r\n       * Initialize the current event state\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns the current event state\r\n       */\r\n      ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.mask = mask;\r\n          this.skipNextObservers = skipNextObservers;\r\n          this.target = target;\r\n          this.currentTarget = currentTarget;\r\n          return this;\r\n      };\r\n      return ObserverEventState;\r\n  }());\r\n  /**\r\n   * Represent an Observer registered to a given Observable object.\r\n   * @public\r\n   */\r\n  var Observer = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observer\r\n       * @param callback - defines the callback to call when the observer is notified\r\n       * @param mask - defines the mask of the observer (used to filter notifications)\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       */\r\n      function Observer(\r\n      /**\r\n       * Defines the callback to call when the observer is notified\r\n       */\r\n      callback, \r\n      /**\r\n       * Defines the mask of the observer (used to filter notifications)\r\n       */\r\n      mask, \r\n      /**\r\n       * Defines the current scope used to restore the JS context\r\n       */\r\n      scope) {\r\n          if (scope === void 0) { scope = null; }\r\n          this.callback = callback;\r\n          this.mask = mask;\r\n          this.scope = scope;\r\n          /**\r\n           * Gets or sets a property defining that the observer as to be unregistered after the next notification\r\n           */\r\n          this.unregisterOnNextCall = false;\r\n          /** For internal usage */\r\n          this._willBeUnregistered = false;\r\n      }\r\n      return Observer;\r\n  }());\r\n  /**\r\n   * Represent a list of observers registered to multiple Observables object.\r\n   * @public\r\n   */\r\n  var MultiObserver = /** @class */ (function () {\r\n      function MultiObserver() {\r\n          this._observers = null;\r\n          this._observables = null;\r\n      }\r\n      /**\r\n       * Raise a callback when one of the observable will notify\r\n       * @param observables - defines a list of observables to watch\r\n       * @param callback - defines the callback to call on notification\r\n       * @param mask - defines the mask used to filter notifications\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       * @returns the new MultiObserver\r\n       */\r\n      MultiObserver.Watch = function (observables, callback, mask, scope) {\r\n          var e_1, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (scope === void 0) { scope = null; }\r\n          var result = new MultiObserver();\r\n          result._observers = new Array();\r\n          result._observables = observables;\r\n          try {\r\n              for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\r\n                  var observable = observables_1_1.value;\r\n                  var observer = observable.add(callback, mask, false, scope);\r\n                  if (observer) {\r\n                      result._observers.push(observer);\r\n                  }\r\n              }\r\n          }\r\n          catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n          finally {\r\n              try {\r\n                  if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\r\n              }\r\n              finally { if (e_1) throw e_1.error; }\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Release associated resources\r\n       */\r\n      MultiObserver.prototype.dispose = function () {\r\n          if (this._observers && this._observables) {\r\n              for (var index = 0; index < this._observers.length; index++) {\r\n                  this._observables[index].remove(this._observers[index]);\r\n              }\r\n          }\r\n          this._observers = null;\r\n          this._observables = null;\r\n      };\r\n      return MultiObserver;\r\n  }());\r\n  /**\r\n   * The Observable class is a simple implementation of the Observable pattern.\r\n   *\r\n   * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\r\n   * This enable a more fine grained execution without having to rely on multiple different Observable objects.\r\n   * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\r\n   * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\r\n   *\r\n   * @public\r\n   */\r\n  var Observable = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observable\r\n       * @param onObserverAdded - defines a callback to call when a new observer is added\r\n       */\r\n      function Observable(onObserverAdded) {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n          this._eventState = new ObserverEventState(0);\r\n          if (onObserverAdded) {\r\n              this._onObserverAdded = onObserverAdded;\r\n          }\r\n      }\r\n      /**\r\n       * Create a new Observer with the specified callback\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @param mask - the mask used to filter observers\r\n       * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\r\n       * @param scope - optional scope for the callback to be called from\r\n       * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\r\n          if (mask === void 0) { mask = -1; }\r\n          if (insertFirst === void 0) { insertFirst = false; }\r\n          if (scope === void 0) { scope = null; }\r\n          if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\r\n          if (!callback) {\r\n              return null;\r\n          }\r\n          var observer = new Observer(callback, mask, scope);\r\n          observer.unregisterOnNextCall = unregisterOnFirstCall;\r\n          if (insertFirst) {\r\n              this._observers.unshift(observer);\r\n          }\r\n          else {\r\n              this._observers.push(observer);\r\n          }\r\n          if (this._onObserverAdded) {\r\n              this._onObserverAdded(observer);\r\n          }\r\n          return observer;\r\n      };\r\n      /**\r\n       * Create a new Observer with the specified callback and unregisters after the next notification\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.addOnce = function (callback) {\r\n          return this.add(callback, undefined, undefined, undefined, true);\r\n      };\r\n      /**\r\n       * Remove an Observer from the Observable object\r\n       * @param observer - the instance of the Observer to remove\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._deferUnregister(observer);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Remove a callback from the Observable object\r\n       * @param callback - the callback to remove\r\n       * @param scope - optional scope. If used only the callbacks with this scope will be removed\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.removeCallback = function (callback, scope) {\r\n          for (var index = 0; index < this._observers.length; index++) {\r\n              if (this._observers[index].callback === callback &&\r\n                  (!scope || scope === this._observers[index].scope)) {\r\n                  this._deferUnregister(this._observers[index]);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Notify all Observers by calling their respective callback with the given data\r\n       * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\r\n       * @param eventData - defines the data to send to all observers\r\n       * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\r\n       */\r\n      Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\r\n          var e_2, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (!this._observers.length) {\r\n              return true;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          state.lastReturnValue = eventData;\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs._willBeUnregistered) {\r\n                      continue;\r\n                  }\r\n                  if (obs.mask & mask) {\r\n                      if (obs.scope) {\r\n                          state.lastReturnValue = obs.callback.apply(obs.scope, [\r\n                              eventData,\r\n                              state\r\n                          ]);\r\n                      }\r\n                      else {\r\n                          state.lastReturnValue = obs.callback(eventData, state);\r\n                      }\r\n                      if (obs.unregisterOnNextCall) {\r\n                          this._deferUnregister(obs);\r\n                      }\r\n                  }\r\n                  if (state.skipNextObservers) {\r\n                      return false;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_2) throw e_2.error; }\r\n          }\r\n          return true;\r\n      };\r\n      /**\r\n       * Calling this will execute each callback, expecting it to be a promise or return a value.\r\n       * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\r\n       * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\r\n       * and it is crucial that all callbacks will be executed.\r\n       * The order of the callbacks is kept, callbacks are not executed parallel.\r\n       *\r\n       * @param eventData - The data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       * @param target - defines the callback target (see EventState)\r\n       * @param currentTarget - defines he current object in the bubbling phase\r\n       * @returns will return a Promise than resolves when all callbacks executed successfully.\r\n       */\r\n      Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\r\n          var _this = this;\r\n          if (mask === void 0) { mask = -1; }\r\n          // create an empty promise\r\n          var p = Promise.resolve(eventData);\r\n          // no observers? return this promise.\r\n          if (!this._observers.length) {\r\n              return p;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          // execute one callback after another (not using Promise.all, the order is important)\r\n          this._observers.forEach(function (obs) {\r\n              if (state.skipNextObservers) {\r\n                  return;\r\n              }\r\n              if (obs._willBeUnregistered) {\r\n                  return;\r\n              }\r\n              if (obs.mask & mask) {\r\n                  if (obs.scope) {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback.apply(obs.scope, [eventData, state]);\r\n                      });\r\n                  }\r\n                  else {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback(eventData, state);\r\n                      });\r\n                  }\r\n                  if (obs.unregisterOnNextCall) {\r\n                      _this._deferUnregister(obs);\r\n                  }\r\n              }\r\n          });\r\n          // return the eventData\r\n          return p.then(function () {\r\n              return eventData;\r\n          });\r\n      };\r\n      /**\r\n       * Notify a specific observer\r\n       * @param observer - defines the observer to notify\r\n       * @param eventData - defines the data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       */\r\n      Observable.prototype.notifyObserver = function (observer, eventData, mask) {\r\n          if (mask === void 0) { mask = -1; }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.skipNextObservers = false;\r\n          observer.callback(eventData, state);\r\n      };\r\n      /**\r\n       * Gets a boolean indicating if the observable has at least one observer\r\n       * @returns true is the Observable has at least one Observer registered\r\n       */\r\n      Observable.prototype.hasObservers = function () {\r\n          return this._observers.length > 0;\r\n      };\r\n      /**\r\n       * Clear the list of observers\r\n       */\r\n      Observable.prototype.clear = function () {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n      };\r\n      /**\r\n       * Clone the current observable\r\n       * @returns a new observable\r\n       */\r\n      Observable.prototype.clone = function () {\r\n          var result = new Observable();\r\n          result._observers = this._observers.slice(0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Does this observable handles observer registered with a given mask\r\n       * @param mask - defines the mask to be tested\r\n       * @returns whether or not one observer registered with the given mask is handeled\r\n       */\r\n      Observable.prototype.hasSpecificMask = function (mask) {\r\n          var e_3, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs.mask & mask || obs.mask === mask) {\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_3) throw e_3.error; }\r\n          }\r\n          return false;\r\n      };\r\n      Observable.prototype._deferUnregister = function (observer) {\r\n          var _this = this;\r\n          observer.unregisterOnNextCall = false;\r\n          observer._willBeUnregistered = true;\r\n          void executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n              return [2 /*return*/, this._remove(observer)];\r\n          }); }); });\r\n      };\r\n      // This should only be called when not iterating over _observers to avoid callback skipping.\r\n      // Removes an observer from the _observer Array.\r\n      Observable.prototype._remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._observers.splice(index, 1);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      return Observable;\r\n  }());\n\n  var modulePromise;\r\n  /**\r\n   * teleport player to a destination\r\n   * @param destination - \"coordX,coordY\", \"magic\", \"crowd\"\r\n   * @public\r\n   */\r\n  function teleportTo(destination) {\r\n      // error(`teleportTo(destination) was deprecated. Please use:\r\n      // import {requestTeleport} from '@decentraland/UserActionModule'\r\n      // executeTask(async () => {\r\n      //   await requestTeleport(destination)\r\n      // })`)\r\n      callModuleRpc('requestTeleport', [destination]);\r\n  }\r\n  function ensureModule() {\r\n      if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {\r\n          modulePromise = dcl.loadModule('@decentraland/UserActionModule', {});\r\n      }\r\n      return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined';\r\n  }\r\n  function callModuleRpc(methodName, args) {\r\n      if (ensureModule()) {\r\n          modulePromise.then(function ($) {\r\n              void dcl.callRpc($.rpcHandle, methodName, args);\r\n          });\r\n      }\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEvent = /** @class */ (function () {\r\n      function UUIDEvent(uuid, payload) {\r\n          this.uuid = uuid;\r\n          this.payload = payload;\r\n      }\r\n      UUIDEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], UUIDEvent);\r\n      return UUIDEvent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var RaycastResponse = /** @class */ (function () {\r\n      function RaycastResponse(payload) {\r\n          this.payload = payload;\r\n      }\r\n      RaycastResponse = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], RaycastResponse);\r\n      return RaycastResponse;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEvent = /** @class */ (function () {\r\n      function PointerEvent(payload) {\r\n          this.payload = payload;\r\n      }\r\n      PointerEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], PointerEvent);\r\n      return PointerEvent;\r\n  }());\r\n  var internalDcl;\r\n  /**\r\n   * @internal\r\n   * This function generates a callback that is passed to the Observable\r\n   * constructor to subscribe to the events of the DecentralandInterface\r\n   */\r\n  function createSubscriber(eventName) {\r\n      return function () {\r\n          if (internalDcl) {\r\n              internalDcl.subscribe(eventName);\r\n          }\r\n      };\r\n  }\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onCameraModeChangedObservable = new Observable(createSubscriber('cameraModeChanged'));\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onIdleStateChangedObservable = new Observable(createSubscriber('idleStateChanged'));\r\n  /**\r\n   * These events are triggered after your character enters the scene.\r\n   * @public\r\n   */\r\n  var onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\r\n  /** @public @deprecated Use onEnterSceneObservable instead. */\r\n  var onEnterScene = onEnterSceneObservable;\r\n  /**\r\n   * These events are triggered after your character leaves the scene.\r\n   * @public\r\n   */\r\n  var onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\r\n  /** @public @deprecated Use onLeaveSceneObservable instead. */\r\n  var onLeaveScene = onLeaveSceneObservable;\r\n  /**\r\n   * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\r\n   * @public\r\n   */\r\n  var onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPointerLockedStateChange = new Observable(createSubscriber('onPointerLock'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onVideoEvent = new Observable(createSubscriber('videoEvent'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onProfileChanged = new Observable(createSubscriber('profileChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));\r\n  /**\r\n   * @internal\r\n   * This function adds _one_ listener to the onEvent event of dcl interface.\r\n   * Leveraging a switch to route events to the Observable handlers.\r\n   */\r\n  function _initEventObservables(dcl) {\r\n      // store internal reference to dcl, it is going to be used to subscribe to the events\r\n      internalDcl = dcl;\r\n      if (internalDcl) {\r\n          internalDcl.onEvent(function (event) {\r\n              switch (event.type) {\r\n                  case 'onEnterScene': {\r\n                      onEnterSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onLeaveScene': {\r\n                      onLeaveSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'cameraModeChanged': {\r\n                      onCameraModeChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'idleStateChanged': {\r\n                      onIdleStateChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'sceneStart': {\r\n                      onSceneReadyObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerExpression': {\r\n                      onPlayerExpressionObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'videoEvent': {\r\n                      var videoData = event.data;\r\n                      var component = DisposableComponent.engine.disposableComponents[videoData.componentId];\r\n                      if (component) {\r\n                          component.update(videoData);\r\n                      }\r\n                      onVideoEvent.notifyObservers(videoData);\r\n                      return;\r\n                  }\r\n                  case 'profileChanged': {\r\n                      onProfileChanged.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onPointerLock': {\r\n                      onPointerLockedStateChange.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerConnected': {\r\n                      onPlayerConnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerDisconnected': {\r\n                      onPlayerDisconnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onRealmChanged': {\r\n                      onRealmChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerClicked': {\r\n                      onPlayerClickedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n              }\r\n          });\r\n      }\r\n  }\n\n  // This number is defined in the protocol ECS.SetEntityParent.3\r\n  var ROOT_ENTITY_ID = '0';\r\n  var DecentralandSynchronizationSystem = /** @class */ (function () {\r\n      function DecentralandSynchronizationSystem(dcl) {\r\n          this.dcl = dcl;\r\n          this.cachedComponents = {};\r\n      }\r\n      DecentralandSynchronizationSystem.prototype.activate = function (engine) {\r\n          var _this = this;\r\n          this.engine = engine;\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated);\r\n          engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated);\r\n          engine.eventManager.addListener(ParentChanged, this, this.parentChanged);\r\n          var rootId = engine.rootEntity.uuid;\r\n          this.dcl.addEntity(rootId);\r\n          // TODO(agus): send disposableComponents if exist\r\n          this.dcl.onUpdate(function (dt) {\r\n              engine.update(dt);\r\n              _this.presentEntities();\r\n          });\r\n          this.dcl.onEvent(function (event) {\r\n              var data = event.data;\r\n              switch (event.type) {\r\n                  case 'uuidEvent':\r\n                      engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload));\r\n                      break;\r\n                  case 'raycastResponse':\r\n                      if (data.queryType === 'HitFirst') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      else if (data.queryType === 'HitAll') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      break;\r\n                  case 'actionButtonEvent':\r\n                      engine.eventManager.fireEvent(new PointerEvent(data.payload));\r\n                      break;\r\n              }\r\n          });\r\n      };\r\n      /**\r\n       * system.onAddEntity is called by the engine when a entity is added to the\r\n       * engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\r\n          if (entity && entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              var parent = entity.getParent();\r\n              this.dcl.addEntity(entityId);\r\n              if (parent) {\r\n                  // If the entity has a parent, we send the the enparenting signal\r\n                  // otherwise the engine will know the entity is set as a child of\r\n                  // engine.rootEntity by default\r\n                  this.dcl.setParent(entityId, parent.uuid);\r\n              }\r\n              // This creates a cache dictionary to avoid send redundant information to\r\n              // the engine in order to avoid unnecessary work in the main thread.\r\n              this.cachedComponents[entityId] = {};\r\n              // this iterator sends the current components of te engine at the moment\r\n              // of addition\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null) {\r\n                      if (isDisposableComponent(component)) {\r\n                          // Send the attach component signal\r\n                          this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component));\r\n                      }\r\n                      else {\r\n                          var componentJson = JSON.stringify(component);\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\r\n                          // Update the cached copy of the sent component\r\n                          this.cachedComponents[entityId][componentName] = componentJson;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * system.onRemoveEntity is called by the engine when a entity gets removed\r\n       * from the engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\r\n          if (entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              // Send the removeEntity signal\r\n              this.dcl.removeEntity(entityId);\r\n              // Remove the caches from local memory\r\n              delete this.cachedComponents[entityId];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called at the end of every update cycle.\r\n       * It finds and sends updates in components of the engine entities.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.presentEntities = function () {\r\n          for (var i in this.engine.entities) {\r\n              var entity = this.engine.entities[i];\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null && !isDisposableComponent(component)) {\r\n                      var jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component);\r\n                      if (jsonRepresentation) {\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation);\r\n                          this.clearDirty(entity.uuid, componentName, component, jsonRepresentation);\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          for (var id in this.engine.disposableComponents) {\r\n              var component = this.engine.disposableComponents[id];\r\n              if (component instanceof ObservableComponent && component.dirty) {\r\n                  this.dcl.componentUpdated(id, JSON.stringify(component));\r\n                  component.dirty = false;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a component is added to an entity. The event\r\n       * (param 1) contains the necessary information to notify the engine about the\r\n       * component that was added and the entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (isDisposableComponent(component)) {\r\n                  this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component));\r\n              }\r\n              else if (event.classId !== null) {\r\n                  var componentJson = JSON.stringify(component);\r\n                  // Send the updated component\r\n                  this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\r\n                  // Update the cached copy of the sent component\r\n                  this.cachedComponents[event.entity.uuid][event.componentName] =\r\n                      componentJson;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called when a component is removed from an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\r\n              // Remove the cached component so we can send it again when re-adding\r\n              delete this.cachedComponents[event.entity.uuid][event.componentName];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is created.\r\n       * It instantiates the component in the engine, the event that updates the\r\n       * created component is fired immediatly after.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\r\n          this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is updated, once per\r\n       * update cycle and once after creation.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\r\n          this.dcl.componentDisposed(event.componentId);\r\n      };\r\n      /**\r\n       * This method is called right after a diposableComponent gets disposed. That\r\n       * process is manual.\r\n       *\r\n       * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\r\n       * it remains attached to some entities?\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\r\n          this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\r\n      };\r\n      /**\r\n       * This method is called when a parent changes in an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\r\n          this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.getJsonIfDirty = function (entityId, componentName, component) {\r\n          var jsonRepresentation = JSON.stringify(component);\r\n          return (jsonRepresentation !== this.cachedComponents[entityId][componentName] &&\r\n              jsonRepresentation);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.clearDirty = function (entityId, componentName, component, jsonRepresentation) {\r\n          this.cachedComponents[entityId][componentName] = jsonRepresentation;\r\n      };\r\n      return DecentralandSynchronizationSystem;\r\n  }());\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  var dist = {};\n\n  var types = {};\n\n  (function (exports) {\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  exports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n  (function (Orientation) {\n      /**\n       * Clockwise\n       */\n      Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n      /** Counter clockwise */\n      Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n  })(exports.Orientation || (exports.Orientation = {}));\n  (function (Space) {\n      /** Local (object) space */\n      Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n      /** World space */\n      Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n      /** Bone space */\n      Space[Space[\"BONE\"] = 2] = \"BONE\";\n  })(exports.Space || (exports.Space = {}));\n  /**\n   * Constant used to convert a value to gamma space\n   * @public\n   */\n  exports.ToGammaSpace = 1 / 2.2;\n  /**\n   * Constant used to convert a value to linear space\n   * @public\n   */\n  exports.ToLinearSpace = 2.2;\n  /**\n   * Constant used to define the minimal number value in Babylon.js\n   * @public\n   */\n  exports.Epsilon = 0.000001;\n  /**\n   * Constant used to convert from Euler degrees to radians\n   * @public\n   */\n  exports.DEG2RAD = Math.PI / 180;\n  /**\n   * Constant used to convert from radians to Euler degrees\n   * @public\n   */\n  exports.RAD2DEG = 360 / (Math.PI * 2);\n\n  }(types));\n\n  var preallocatedVariables = {};\n\n  var utils = {};\n\n  Object.defineProperty(utils, \"__esModule\", { value: true });\n  utils.buildArray = void 0;\n  /**\n   * @internal\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\n   * @param size - the number of element to construct and put in the array\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n   * @returns a new array filled with new objects\n   * @internal\n   */\n  function buildArray(size, itemBuilder) {\n      const a = [];\n      for (let i = 0; i < size; ++i) {\n          a.push(itemBuilder());\n      }\n      return a;\n  }\n  utils.buildArray = buildArray;\n\n  var Vector3$1 = {};\n\n  var Quaternion$1 = {};\n\n  var Matrix$1 = {};\n\n  var Vector4$1 = {};\n\n  var Scalar$1 = {};\n\n  Object.defineProperty(Scalar$1, \"__esModule\", { value: true });\n  Scalar$1.Scalar = void 0;\n  /**\n   * Scalar computation library\n   * @public\n   */\n  class Scalar {\n      /**\n       * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       * @param a - number\n       * @param b - number\n       * @param epsilon - (default = 1.401298E-45)\n       * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       */\n      static WithinEpsilon(a, b, epsilon = 1.401298e-45) {\n          const num = a - b;\n          return -epsilon <= num && num <= epsilon;\n      }\n      /**\n       * Returns a string : the upper case translation of the number i to hexadecimal.\n       * @param i - number\n       * @returns the upper case translation of the number i to hexadecimal.\n       */\n      static ToHex(i) {\n          const str = i.toString(16);\n          if (i <= 15) {\n              return ('0' + str).toUpperCase();\n          }\n          return str.toUpperCase();\n      }\n      /**\n       * Returns -1 if value is negative and +1 is value is positive.\n       * @param _value - the value\n       * @returns the value itself if it's equal to zero.\n       */\n      static Sign(value) {\n          const _value = +value; // convert to a number\n          if (_value === 0 || isNaN(_value)) {\n              return _value;\n          }\n          return _value > 0 ? 1 : -1;\n      }\n      /**\n       * Returns the value itself if it's between min and max.\n       * Returns min if the value is lower than min.\n       * Returns max if the value is greater than max.\n       * @param value - the value to clmap\n       * @param min - the min value to clamp to (default: 0)\n       * @param max - the max value to clamp to (default: 1)\n       * @returns the clamped value\n       */\n      static Clamp(value, min = 0, max = 1) {\n          return Math.min(max, Math.max(min, value));\n      }\n      /**\n       * the log2 of value.\n       * @param value - the value to compute log2 of\n       * @returns the log2 of value.\n       */\n      static Log2(value) {\n          return Math.log(value) * Math.LOG2E;\n      }\n      /**\n       * Loops the value, so that it is never larger than length and never smaller than 0.\n       *\n       * This is similar to the modulo operator but it works with floating point numbers.\n       * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n       * With t = 5 and length = 2.5, the result would be 0.0.\n       * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n       * @param value - the value\n       * @param length - the length\n       * @returns the looped value\n       */\n      static Repeat(value, length) {\n          return value - Math.floor(value / length) * length;\n      }\n      /**\n       * Normalize the value between 0.0 and 1.0 using min and max values\n       * @param value - value to normalize\n       * @param min - max to normalize between\n       * @param max - min to normalize between\n       * @returns the normalized value\n       */\n      static Normalize(value, min, max) {\n          return (value - min) / (max - min);\n      }\n      /**\n       * Denormalize the value from 0.0 and 1.0 using min and max values\n       * @param normalized - value to denormalize\n       * @param min - max to denormalize between\n       * @param max - min to denormalize between\n       * @returns the denormalized value\n       */\n      static Denormalize(normalized, min, max) {\n          return normalized * (max - min) + min;\n      }\n      /**\n       * Calculates the shortest difference between two given angles given in degrees.\n       * @param current - current angle in degrees\n       * @param target - target angle in degrees\n       * @returns the delta\n       */\n      static DeltaAngle(current, target) {\n          let num = Scalar.Repeat(target - current, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return num;\n      }\n      /**\n       * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n       * @param tx - value\n       * @param length - length\n       * @returns The returned value will move back and forth between 0 and length\n       */\n      static PingPong(tx, length) {\n          const t = Scalar.Repeat(tx, length * 2.0);\n          return length - Math.abs(t - length);\n      }\n      /**\n       * Interpolates between min and max with smoothing at the limits.\n       *\n       * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n       * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n       * @param from - from\n       * @param to - to\n       * @param tx - value\n       * @returns the smooth stepped value\n       */\n      static SmoothStep(from, to, tx) {\n          let t = Scalar.Clamp(tx);\n          t = -2.0 * t * t * t + 3.0 * t * t;\n          return to * t + from * (1.0 - t);\n      }\n      /**\n       * Moves a value current towards target.\n       *\n       * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n       * Negative values of maxDelta pushes the value away from target.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting value\n       */\n      static MoveTowards(current, target, maxDelta) {\n          let result = 0;\n          if (Math.abs(target - current) <= maxDelta) {\n              result = target;\n          }\n          else {\n              result = current + Scalar.Sign(target - current) * maxDelta;\n          }\n          return result;\n      }\n      /**\n       * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       *\n       * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n       *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting angle\n       */\n      static MoveTowardsAngle(current, target, maxDelta) {\n          const num = Scalar.DeltaAngle(current, target);\n          let result = 0;\n          if (-maxDelta < num && num < maxDelta) {\n              result = target;\n          }\n          else {\n              result = Scalar.MoveTowards(current, current + num, maxDelta);\n          }\n          return result;\n      }\n      /**\n       * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static Lerp(start, end, amount) {\n          return start + (end - start) * amount;\n      }\n      /**\n       * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static LerpAngle(start, end, amount) {\n          let num = Scalar.Repeat(end - start, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return start + num * Scalar.Clamp(amount);\n      }\n      /**\n       * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n       * @param a - start value\n       * @param b - target value\n       * @param value - value between a and b\n       * @returns the inverseLerp value\n       */\n      static InverseLerp(a, b, value) {\n          let result = 0;\n          if (a !== b) {\n              result = Scalar.Clamp((value - a) / (b - a));\n          }\n          else {\n              result = 0.0;\n          }\n          return result;\n      }\n      /**\n       * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n       * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n       * @param value1 - spline value\n       * @param tangent1 - spline value\n       * @param value2 - spline value\n       * @param tangent2 - spline value\n       * @param amount - input value\n       * @returns hermite result\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n      }\n      /**\n       * Returns a random float number between and min and max values\n       * @param min - min value of random\n       * @param max - max value of random\n       * @returns random value\n       */\n      static RandomRange(min, max) {\n          if (min === max) {\n              return min;\n          }\n          return Math.random() * (max - min) + min;\n      }\n      /**\n       * This function returns percentage of a number in a given range.\n       *\n       * RangeToPercent(40,20,60) will return 0.5 (50%)\n       * RangeToPercent(34,0,100) will return 0.34 (34%)\n       * @param num - to convert to percentage\n       * @param min - min range\n       * @param max - max range\n       * @returns the percentage\n       */\n      static RangeToPercent(num, min, max) {\n          return (num - min) / (max - min);\n      }\n      /**\n       * This function returns number that corresponds to the percentage in a given range.\n       *\n       * PercentToRange(0.34,0,100) will return 34.\n       * @param percent - to convert to number\n       * @param min - min range\n       * @param max - max range\n       * @returns the number\n       */\n      static PercentToRange(percent, min, max) {\n          return (max - min) * percent + min;\n      }\n      /**\n       * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n       * @param angle - The angle to normalize in radian.\n       * @returns The converted angle.\n       */\n      static NormalizeRadians(angle) {\n          // More precise but slower version kept for reference.\n          // tslint:disable:no-commented-out-code\n          /*\n            // angle = angle % Tools.TwoPi;\n            // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n      \n            //if (angle > Math.PI) {\n            //\tangle -= Tools.TwoPi;\n            //}\n             */\n          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n      }\n  }\n  Scalar$1.Scalar = Scalar;\n  /**\n   * Two pi constants convenient for computation.\n   */\n  Scalar.TwoPi = Math.PI * 2;\n\n  Object.defineProperty(Vector4$1, \"__esModule\", { value: true });\n  Vector4$1.Vector4 = void 0;\n  const types_1$8 = types;\n  const Scalar_1$6 = Scalar$1;\n  const Vector3_1$7 = Vector3$1;\n  /**\n   * Vector4 class created for EulerAngle class conversion to Quaternion\n   * @public\n   */\n  class Vector4 {\n      /**\n       * Creates a Vector4 object from the given floats.\n       * @param x - x value of the vector\n       * @param y - y value of the vector\n       * @param z - z value of the vector\n       * @param w - w value of the vector\n       */\n      constructor(\n      /** x value of the vector */\n      x, \n      /** y value of the vector */\n      y, \n      /** z value of the vector */\n      z, \n      /** w value of the vector */\n      w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Returns a new Vector4 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\n      }\n      /**\n       * Returns a new Vector4 set from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @returns the new vector\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n          result.w = array[offset + 3];\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given FloatArray.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          Vector4.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Updates the given vector \"result\" coordinates from the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @param result - the vector to the floats in\n       */\n      static FromFloatsToRef(x, y, z, w, result) {\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = w;\n      }\n      /**\n       * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n       * @returns the new vector\n       */\n      static Zero() {\n          return new Vector4(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n       * @returns the new vector\n       */\n      static One() {\n          return new Vector4(1.0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new normalized Vector4 from the given one.\n       * @param vector - the vector to normalize\n       * @returns the vector\n       */\n      static Normalize(vector) {\n          const result = Vector4.Zero();\n          Vector4.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Updates the given vector \"result\" from the normalization of the given one.\n       * @param vector - the vector to normalize\n       * @param result - the vector to store the result in\n       */\n      static NormalizeToRef(vector, result) {\n          result.copyFrom(vector);\n          result.normalize();\n      }\n      /**\n       * Returns a vector with the minimum values from the left and right vectors\n       * @param left - left vector to minimize\n       * @param right - right vector to minimize\n       * @returns a new vector with the minimum of the left and right vector values\n       */\n      static Minimize(left, right) {\n          const min = new Vector4(left.x, left.y, left.z, left.w);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Returns a vector with the maximum values from the left and right vectors\n       * @param left - left vector to maximize\n       * @param right - right vector to maximize\n       * @returns a new vector with the maximum of the left and right vector values\n       */\n      static Maximize(left, right) {\n          const max = new Vector4(left.x, left.y, left.z, left.w);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors squared\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          const w = value1.w - value2.w;\n          return x * x + y * y + z * z + w * w;\n      }\n      /**\n       * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the center between\n       * @param value2 - value to calulate the center between\n       * @returns the center between the two vectors\n       */\n      static Center(value1, value2) {\n          const center = Vector4.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @returns the new vector\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector4.Zero();\n          Vector4.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the result in\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n          const y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n          const z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = vector.w;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n       * This methods computes transformed normalized direction vectors only.\n       * @param x - value to transform\n       * @param y - value to transform\n       * @param z - value to transform\n       * @param w - value to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the results in\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n          result.w = w;\n      }\n      /**\n       * Returns the string with the Vector4 coordinates.\n       * @returns a string containing all the vector values\n       */\n      toString() {\n          return ('{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}');\n      }\n      /**\n       * Returns the string \"Vector4\".\n       * @returns \"Vector4\"\n       */\n      getClassName() {\n          return 'Vector4';\n      }\n      /**\n       * Returns the Vector4 hash code.\n       * @returns a unique hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Returns a new array populated with 4 elements : the Vector4 coordinates.\n       * @returns the resulting array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array from the given index with the Vector4 coordinates.\n       * @param array - array to populate\n       * @param index - index of the array to start at (default: 0)\n       * @returns the Vector4.\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          array[index + 3] = this.w;\n          return this;\n      }\n      /**\n       * Adds the given vector to the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the updated Vector4.\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          this.z += otherVector.z;\n          this.w += otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @returns the resulting vector\n       */\n      add(otherVector) {\n          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          result.z = this.z + otherVector.z;\n          result.w = this.w + otherVector.w;\n          return this;\n      }\n      /**\n       * Subtract in place the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @returns the updated Vector4.\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          this.w -= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the new vector with the result\n       */\n      subtract(otherVector) {\n          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          result.z = this.z - otherVector.z;\n          result.w = this.w - otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       */\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @returns new vector containing the result\n       */\n      subtractFromFloats(x, y, z, w) {\n          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n      }\n      /**\n       * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @param result - the vector to store the result in\n       * @returns the current Vector4.\n       */\n      subtractFromFloatsToRef(x, y, z, w, result) {\n          result.x = this.x - x;\n          result.y = this.y - y;\n          result.z = this.z - z;\n          result.w = this.w - w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 negated coordinates.\n       * @returns a new vector with the negated values\n       */\n      negate() {\n          return new Vector4(-this.x, -this.y, -this.z, -this.w);\n      }\n      /**\n       * Multiplies the current Vector4 coordinates by scale (float).\n       * @param scale - the number to scale with\n       * @returns the updated Vector4.\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          this.w *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @returns a new vector with the result\n       */\n      scale(scale) {\n          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n      }\n      /**\n       * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @param result - a vector to store the result in\n       * @returns the current Vector4.\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector4 values by a factor and add the result to a given Vector4\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector4 object where to store the result\n       * @returns the unmodified current Vector4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n       * @param otherVector - the vector to compare against\n       * @returns true if they are equal\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z &&\n              this.w === otherVector.w);\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n       * @param otherVector - vector to compare against\n       * @param epsilon - (Default: very small number)\n       * @returns true if they are equal\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$8.Epsilon) {\n          return (otherVector &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\n      }\n      /**\n       * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n       * @param x - x value to compare against\n       * @param y - y value to compare against\n       * @param z - z value to compare against\n       * @param w - w value to compare against\n       * @returns true if equal\n       */\n      equalsToFloats(x, y, z, w) {\n          return this.x === x && this.y === y && this.z === z && this.w === w;\n      }\n      /**\n       * Multiplies in place the current Vector4 by the given one.\n       * @param otherVector - vector to multiple with\n       * @returns the updated Vector4.\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          this.w *= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @returns resulting new vector\n       */\n      multiply(otherVector) {\n          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          result.z = this.z * otherVector.z;\n          result.w = this.w * otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n       * @param x - x value multiply with\n       * @param y - y value multiply with\n       * @param z - z value multiply with\n       * @param w - w value multiply with\n       * @returns resulting new vector\n       */\n      multiplyByFloats(x, y, z, w) {\n          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n      }\n      /**\n       * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @returns resulting new vector\n       */\n      divide(otherVector) {\n          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          result.z = this.z / otherVector.z;\n          result.w = this.w / otherVector.w;\n          return this;\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - vector to devide with\n       * @returns the updated Vector3.\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      minimizeInPlace(other) {\n          if (other.x < this.x) {\n              this.x = other.x;\n          }\n          if (other.y < this.y) {\n              this.y = other.y;\n          }\n          if (other.z < this.z) {\n              this.z = other.z;\n          }\n          if (other.w < this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      maximizeInPlace(other) {\n          if (other.x > this.x) {\n              this.x = other.x;\n          }\n          if (other.y > this.y) {\n              this.y = other.y;\n          }\n          if (other.z > this.z) {\n              this.z = other.z;\n          }\n          if (other.w > this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector4 from current Vector4 floored values\n       * @returns a new Vector4\n       */\n      floor() {\n          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n      }\n      /**\n       * Gets a new Vector4 from current Vector3 floored values\n       * @returns a new Vector4\n       */\n      fract() {\n          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n      }\n      // Properties\n      /**\n       * Returns the Vector4 length (float).\n       * @returns the length\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n      }\n      /**\n       * Returns the Vector4 squared length (float).\n       * @returns the length squared\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      // Methods\n      /**\n       * Normalizes in place the Vector4.\n       * @returns the updated Vector4.\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n       * @returns this converted to a new vector3\n       */\n      toVector3() {\n          return new Vector3_1$7.Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Returns a new Vector4 copied from the current one.\n       * @returns the new cloned vector\n       */\n      clone() {\n          return new Vector4(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Updates the current Vector4 with the given one coordinates.\n       * @param source - the source vector to copy from\n       * @returns the updated Vector4.\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          this.z = source.z;\n          this.w = source.w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to copy from\n       * @param y - float to copy from\n       * @param z - float to copy from\n       * @param w - float to copy from\n       * @returns the updated Vector4.\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @returns the updated Vector4.\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y, z and w coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = this.w = v;\n          return this;\n      }\n  }\n  Vector4$1.Vector4 = Vector4;\n\n  Object.defineProperty(Matrix$1, \"__esModule\", { value: true });\n  Matrix$1.Matrix = void 0;\n  const Vector3_1$6 = Vector3$1;\n  const Quaternion_1$2 = Quaternion$1;\n  const preallocatedVariables_1$3 = preallocatedVariables;\n  const Vector4_1 = Vector4$1;\n  /**\n   * Class used to store matrix data (4x4)\n   * @public\n   */\n  class Matrix {\n      /**\n       * Creates an empty matrix (filled with zeros)\n       */\n      constructor() {\n          this._isIdentity = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2 = true;\n          this._isIdentity3x2Dirty = true;\n          this._m = [\n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n          ];\n          this._updateIdentityStatus(false);\n      }\n      /**\n       * Gets the internal data of the matrix\n       */\n      get m() {\n          return this._m;\n      }\n      /**\n       * Gets an identity matrix that must not be updated\n       */\n      static get IdentityReadOnly() {\n          return Matrix._identityReadOnly;\n      }\n      // Statics\n      /**\n       * Creates a matrix from an array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Matrix set from the starting index of the given array\n       */\n      static FromArray(array, offset = 0) {\n          const result = new Matrix();\n          Matrix.FromArrayToRef(array, offset, result);\n          return result;\n      }\n      /**\n       * Copy the content of an array into a given matrix\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @param result - defines the target matrix\n       */\n      static FromArrayToRef(array, offset, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset];\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores an array into a matrix after having multiplied each component by a given factor\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param scale - defines the scaling factor\n       * @param result - defines the target matrix\n       */\n      static FromFloatArrayToRefScaled(array, offset, scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset] * scale;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores a list of values (16) inside a given matrix\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @param result - defines the target matrix\n       */\n      static FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates new matrix from a list of values (16)\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @returns the new matrix\n       */\n      static FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n          const result = new Matrix();\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n          return result;\n      }\n      /**\n       * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @returns a new matrix\n       */\n      static Compose(scale, rotation, translation) {\n          const result = new Matrix();\n          Matrix.ComposeToRef(scale, rotation, translation, result);\n          return result;\n      }\n      /**\n       * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @param result - defines the target matrix\n       */\n      static ComposeToRef(scale, rotation, translation, result) {\n          Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1$3.MathTmp.Matrix[1]);\n          rotation.toRotationMatrix(preallocatedVariables_1$3.MathTmp.Matrix[0]);\n          preallocatedVariables_1$3.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], result);\n          result.setTranslation(translation);\n      }\n      /**\n       * Creates a new identity matrix\n       * @returns a new identity matrix\n       */\n      static Identity() {\n          const identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n          identity._updateIdentityStatus(true);\n          return identity;\n      }\n      /**\n       * Creates a new identity matrix and stores the result in a given matrix\n       * @param result - defines the target matrix\n       */\n      static IdentityToRef(result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(true);\n      }\n      /**\n       * Creates a new zero matrix\n       * @returns a new zero matrix\n       */\n      static Zero() {\n          const zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n          zero._updateIdentityStatus(false);\n          return zero;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationX(angle) {\n          const result = new Matrix();\n          Matrix.RotationXToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new matrix as the invert of a given matrix\n       * @param source - defines the source matrix\n       * @returns the new matrix\n       */\n      static Invert(source) {\n          const result = new Matrix();\n          source.invertToRef(result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationXToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationY(angle) {\n          const result = new Matrix();\n          Matrix.RotationYToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationYToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationZ(angle) {\n          const result = new Matrix();\n          Matrix.RotationZToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationZToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationAxis(axis, angle) {\n          const result = new Matrix();\n          Matrix.RotationAxisToRef(axis, angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const s = Math.sin(-angle);\n          const c = Math.cos(-angle);\n          const c1 = 1 - c;\n          axis.normalize();\n          const m = result._m;\n          m[0] = axis.x * axis.x * c1 + c;\n          m[1] = axis.x * axis.y * c1 - axis.z * s;\n          m[2] = axis.x * axis.z * c1 + axis.y * s;\n          m[3] = 0.0;\n          m[4] = axis.y * axis.x * c1 + axis.z * s;\n          m[5] = axis.y * axis.y * c1 + c;\n          m[6] = axis.y * axis.z * c1 - axis.x * s;\n          m[7] = 0.0;\n          m[8] = axis.z * axis.x * c1 - axis.y * s;\n          m[9] = axis.z * axis.y * c1 + axis.x * s;\n          m[10] = axis.z * axis.z * c1 + c;\n          m[11] = 0.0;\n          m[12] = 0.0;\n          m[13] = 0.0;\n          m[14] = 0.0;\n          m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a rotation matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @returns the new rotation matrix\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const result = new Matrix();\n          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n          return result;\n      }\n      /**\n       * Creates a rotation matrix and stores it in a given matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @param result - defines the target matrix\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          Quaternion_1$2.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1$3.MathTmp.Quaternion[0]);\n          preallocatedVariables_1$3.MathTmp.Quaternion[0].toRotationMatrix(result);\n      }\n      /**\n       * Creates a scaling matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @returns the new matrix\n       */\n      static Scaling(x, y, z) {\n          const result = new Matrix();\n          Matrix.ScalingToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a scaling matrix and stores it in a given matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @param result - defines the target matrix\n       */\n      static ScalingToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n      }\n      /**\n       * Creates a translation matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @returns the new matrix\n       */\n      static Translation(x, y, z) {\n          const result = new Matrix();\n          Matrix.TranslationToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a translation matrix and stores it in a given matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @param result - defines the target matrix\n       */\n      static TranslationToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n      }\n      /**\n       * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @returns the new matrix\n       */\n      static Lerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.LerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @param result - defines the Matrix object where to store data\n       */\n      static LerpToRef(startValue, endValue, gradient, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] =\n                  startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Builds a new matrix whose values are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @returns the new matrix\n       */\n      static DecomposeLerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Update a matrix to values which are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @param result - defines the target matrix\n       */\n      static DecomposeLerpToRef(startValue, endValue, gradient, result) {\n          const startScale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const startRotation = preallocatedVariables_1$3.MathTmp.Quaternion[0];\n          const startTranslation = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          startValue.decompose(startScale, startRotation, startTranslation);\n          const endScale = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          const endRotation = preallocatedVariables_1$3.MathTmp.Quaternion[1];\n          const endTranslation = preallocatedVariables_1$3.MathTmp.Vector3[3];\n          endValue.decompose(endScale, endRotation, endTranslation);\n          const resultScale = preallocatedVariables_1$3.MathTmp.Vector3[4];\n          Vector3_1$6.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n          const resultRotation = preallocatedVariables_1$3.MathTmp.Quaternion[2];\n          Quaternion_1$2.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n          const resultTranslation = preallocatedVariables_1$3.MathTmp.Vector3[5];\n          Vector3_1$6.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtLH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtLHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtLHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          target.subtractToRef(eye, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtRH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtRHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtRHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          eye.subtractToRef(target, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Store a left-handed orthographic projection to a given matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoLHToRef(width, height, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / width;\n          const b = 2.0 / height;\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / (right - left);\n          const b = 2.0 / (top - bottom);\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          const i0 = (left + right) / (left - right);\n          const i1 = (top + bottom) / (bottom - top);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a right-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed orthographic projection matrix\n       */\n      static OrthoOffCenterRH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n          result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          const n = znear;\n          const f = zfar;\n          const a = (2.0 * n) / width;\n          const b = (2.0 * n) / height;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n          matrix._updateIdentityStatus(false);\n          return matrix;\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveFovLH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Creates a right-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed perspective projection matrix\n       */\n      static PerspectiveFovRH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          /* alternatively this could be expressed as:\n          //    m = PerspectiveFovLHToRef\n          //    m[10] *= -1.0;\n          //    m[11] *= -1.0;\n          */\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = -(f + n) / (f - n);\n          const d = (-2 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Stores a perspective projection for WebVR info a given matrix\n       * @param fov - defines the field of view\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n       */\n      static PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {\n          const rightHandedFactor = rightHanded ? -1 : 1;\n          const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n          const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n          const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n          const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n          const xScale = 2.0 / (leftTan + rightTan);\n          const yScale = 2.0 / (upTan + downTan);\n          const m = result._m;\n          m[0] = xScale;\n          m[1] = m[2] = m[3] = m[4] = 0.0;\n          m[5] = yScale;\n          m[6] = m[7] = 0.0;\n          m[8] = (leftTan - rightTan) * xScale * 0.5;\n          m[9] = -((upTan - downTan) * yScale * 0.5);\n          m[10] = -zfar / (znear - zfar);\n          m[11] = 1.0 * rightHandedFactor;\n          m[12] = m[13] = m[15] = 0.0;\n          m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n          result._markAsUpdated();\n      }\n      /**\n       * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n       */\n      static GetAsMatrix2x2(matrix) {\n          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n      }\n      /**\n       * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n       */\n      static GetAsMatrix3x3(matrix) {\n          return [\n              matrix._m[0],\n              matrix._m[1],\n              matrix._m[2],\n              matrix._m[4],\n              matrix._m[5],\n              matrix._m[6],\n              matrix._m[8],\n              matrix._m[9],\n              matrix._m[10]\n          ];\n      }\n      /**\n       * Compute the transpose of a given matrix\n       * @param matrix - defines the matrix to transpose\n       * @returns the new matrix\n       */\n      static Transpose(matrix) {\n          const result = new Matrix();\n          Matrix.TransposeToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Compute the transpose of a matrix and store it in a target matrix\n       * @param matrix - defines the matrix to transpose\n       * @param result - defines the target matrix\n       */\n      static TransposeToRef(matrix, result) {\n          const rm = result._m;\n          const mm = matrix._m;\n          rm[0] = mm[0];\n          rm[1] = mm[4];\n          rm[2] = mm[8];\n          rm[3] = mm[12];\n          rm[4] = mm[1];\n          rm[5] = mm[5];\n          rm[6] = mm[9];\n          rm[7] = mm[13];\n          rm[8] = mm[2];\n          rm[9] = mm[6];\n          rm[10] = mm[10];\n          rm[11] = mm[14];\n          rm[12] = mm[3];\n          rm[13] = mm[7];\n          rm[14] = mm[11];\n          rm[15] = mm[15];\n          // identity-ness does not change when transposing\n          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @returns a new matrix\n       */\n      static Reflection(plane) {\n          const matrix = new Matrix();\n          Matrix.ReflectionToRef(plane, matrix);\n          return matrix;\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @param result - defines the target matrix\n       */\n      static ReflectionToRef(plane, result) {\n          plane.normalize();\n          const x = plane.normal.x;\n          const y = plane.normal.y;\n          const z = plane.normal.z;\n          const temp = -2 * x;\n          const temp2 = -2 * y;\n          const temp3 = -2 * z;\n          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n      }\n      /**\n       * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n       * @param xaxis - defines the value of the 1st axis\n       * @param yaxis - defines the value of the 2nd axis\n       * @param zaxis - defines the value of the 3rd axis\n       * @param result - defines the target matrix\n       */\n      static FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      }\n      /**\n       * Creates a rotation matrix from a quaternion and stores it in a target matrix\n       * @param quat - defines the quaternion to use\n       * @param result - defines the target matrix\n       */\n      static FromQuaternionToRef(quat, result) {\n          const xx = quat.x * quat.x;\n          const yy = quat.y * quat.y;\n          const zz = quat.z * quat.z;\n          const xy = quat.x * quat.y;\n          const zw = quat.z * quat.w;\n          const zx = quat.z * quat.x;\n          const yw = quat.y * quat.w;\n          const yz = quat.y * quat.z;\n          const xw = quat.x * quat.w;\n          result._m[0] = 1.0 - 2.0 * (yy + zz);\n          result._m[1] = 2.0 * (xy + zw);\n          result._m[2] = 2.0 * (zx - yw);\n          result._m[3] = 0.0;\n          result._m[4] = 2.0 * (xy - zw);\n          result._m[5] = 1.0 - 2.0 * (zz + xx);\n          result._m[6] = 2.0 * (yz + xw);\n          result._m[7] = 0.0;\n          result._m[8] = 2.0 * (zx + yw);\n          result._m[9] = 2.0 * (yz - xw);\n          result._m[10] = 1.0 - 2.0 * (yy + xx);\n          result._m[11] = 0.0;\n          result._m[12] = 0.0;\n          result._m[13] = 0.0;\n          result._m[14] = 0.0;\n          result._m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /** @internal */\n      _markAsUpdated() {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = false;\n          this._isIdentity3x2 = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2Dirty = true;\n      }\n      // Properties\n      /**\n       * Check if the current matrix is identity\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentity() {\n          if (this._isIdentityDirty) {\n              this._isIdentityDirty = false;\n              const m = this._m;\n              this._isIdentity =\n                  m[0] === 1.0 &&\n                      m[1] === 0.0 &&\n                      m[2] === 0.0 &&\n                      m[3] === 0.0 &&\n                      m[4] === 0.0 &&\n                      m[5] === 1.0 &&\n                      m[6] === 0.0 &&\n                      m[7] === 0.0 &&\n                      m[8] === 0.0 &&\n                      m[9] === 0.0 &&\n                      m[10] === 1.0 &&\n                      m[11] === 0.0 &&\n                      m[12] === 0.0 &&\n                      m[13] === 0.0 &&\n                      m[14] === 0.0 &&\n                      m[15] === 1.0;\n          }\n          return this._isIdentity;\n      }\n      /**\n       * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentityAs3x2() {\n          if (this._isIdentity3x2Dirty) {\n              this._isIdentity3x2Dirty = false;\n              if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else if (this._m[1] !== 0.0 ||\n                  this._m[2] !== 0.0 ||\n                  this._m[3] !== 0.0 ||\n                  this._m[4] !== 0.0 ||\n                  this._m[6] !== 0.0 ||\n                  this._m[7] !== 0.0 ||\n                  this._m[8] !== 0.0 ||\n                  this._m[9] !== 0.0 ||\n                  this._m[10] !== 0.0 ||\n                  this._m[11] !== 0.0 ||\n                  this._m[12] !== 0.0 ||\n                  this._m[13] !== 0.0 ||\n                  this._m[14] !== 0.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else {\n                  this._isIdentity3x2 = true;\n              }\n          }\n          return this._isIdentity3x2;\n      }\n      /**\n       * Gets the determinant of the matrix\n       * @returns the matrix determinant\n       */\n      determinant() {\n          if (this._isIdentity === true) {\n              return 1;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          /*\n          // https://en.wikipedia.org/wiki/Laplace_expansion\n          // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n          // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n          // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n          // where\n          //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n          //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n          //\n          // Here we do that for the 1st row.\n          */\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          // tslint:enable:variable-name\n          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n      }\n      // Methods\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array\n       */\n      toArray() {\n          return this._m;\n      }\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array.\n       */\n      asArray() {\n          return this._m;\n      }\n      /**\n       * Inverts the current matrix in place\n       * @returns the current inverted matrix\n       */\n      invert() {\n          this.invertToRef(this);\n          return this;\n      }\n      /**\n       * Sets all the matrix elements to zero\n       * @returns the current matrix\n       */\n      reset() {\n          Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n          this._updateIdentityStatus(false);\n          return this;\n      }\n      /**\n       * Adds the current matrix with a second one\n       * @param other - defines the matrix to add\n       * @returns a new matrix as the addition of the current matrix and the given one\n       */\n      add(other) {\n          const result = new Matrix();\n          this.addToRef(other, result);\n          return result;\n      }\n      /**\n       * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n       * @param other - defines the matrix to add\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      addToRef(other, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] + other._m[index];\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Adds in place the given matrix to the current matrix\n       * @param other - defines the second operand\n       * @returns the current updated matrix\n       */\n      addToSelf(other) {\n          for (let index = 0; index < 16; index++) {\n              this._m[index] += other._m[index];\n          }\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the given matrix to the current inverted Matrix\n       * @param other - defines the target matrix\n       * @returns the unmodified current matrix\n       */\n      invertToRef(other) {\n          if (this._isIdentity === true) {\n              Matrix.IdentityToRef(other);\n              return this;\n          }\n          // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n          const m = this._m;\n          // tslint:disable:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          // tslint:enable:one-variable-per-declaration\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n          if (det === 0) {\n              // not invertible\n              other.copyFrom(this);\n              return this;\n          }\n          const detInv = 1 / det;\n          const det_12_33 = m12 * m33 - m32 * m13;\n          const det_11_33 = m11 * m33 - m31 * m13;\n          const det_11_32 = m11 * m32 - m31 * m12;\n          const det_10_33 = m10 * m33 - m30 * m13;\n          const det_10_32 = m10 * m32 - m30 * m12;\n          const det_10_31 = m10 * m31 - m30 * m11;\n          const det_12_23 = m12 * m23 - m22 * m13;\n          const det_11_23 = m11 * m23 - m21 * m13;\n          const det_11_22 = m11 * m22 - m21 * m12;\n          const det_10_23 = m10 * m23 - m20 * m13;\n          const det_10_22 = m10 * m22 - m20 * m12;\n          const det_10_21 = m10 * m21 - m20 * m11;\n          const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n          const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n          const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n          const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n          const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n          const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n          const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n          const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n          const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n          const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n          const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n          const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n          // tslint:enable:variable-name\n          return this;\n      }\n      /**\n       * add a value at the specified position in the current Matrix\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      addAtIndex(index, value) {\n          this._m[index] += value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * mutiply the specified position in the current Matrix by a value\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      multiplyAtIndex(index, value) {\n          this._m[index] *= value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector (using 3 floats) in the current matrix\n       * @param x - defines the 1st component of the translation\n       * @param y - defines the 2nd component of the translation\n       * @param z - defines the 3rd component of the translation\n       * @returns the current updated matrix\n       */\n      setTranslationFromFloats(x, y, z) {\n          this._m[12] = x;\n          this._m[13] = y;\n          this._m[14] = z;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector in the current matrix\n       * @param vector3 - defines the translation to insert\n       * @returns the current updated matrix\n       */\n      setTranslation(vector3) {\n          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n      }\n      /**\n       * Gets the translation value of the current matrix\n       * @returns a new Vector3 as the extracted translation from the matrix\n       */\n      getTranslation() {\n          return new Vector3_1$6.Vector3(this._m[12], this._m[13], this._m[14]);\n      }\n      /**\n       * Fill a Vector3 with the extracted translation from the matrix\n       * @param result - defines the Vector3 where to store the translation\n       * @returns the current matrix\n       */\n      getTranslationToRef(result) {\n          result.x = this._m[12];\n          result.y = this._m[13];\n          result.z = this._m[14];\n          return this;\n      }\n      /**\n       * Remove rotation and scaling part from the matrix\n       * @returns the updated matrix\n       */\n      removeRotationAndScaling() {\n          const m = this.m;\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n          return this;\n      }\n      /**\n       * Multiply two matrices\n       * @param other - defines the second operand\n       * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n       */\n      multiply(other) {\n          const result = new Matrix();\n          this.multiplyToRef(other, result);\n          return result;\n      }\n      /**\n       * Copy the current matrix from the given one\n       * @param other - defines the source matrix\n       * @returns the current updated matrix\n       */\n      copyFrom(other) {\n          other.copyToArray(this._m);\n          const o = other;\n          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n          return this;\n      }\n      /**\n       * Populates the given array from the starting index with the current matrix values\n       * @param array - defines the target array\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      copyToArray(array, offset = 0) {\n          for (let index = 0; index < 16; index++) {\n              array[offset + index] = this._m[index];\n          }\n          return this;\n      }\n      /**\n       * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the matrix where to store the multiplication\n       * @returns the current matrix\n       */\n      multiplyToRef(other, result) {\n          if (this._isIdentity) {\n              result.copyFrom(other);\n              return this;\n          }\n          if (other._isIdentity) {\n              result.copyFrom(this);\n              return this;\n          }\n          this.multiplyToArray(other, result._m, 0);\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the array where to store the multiplication\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      multiplyToArray(other, result, offset) {\n          const m = this._m;\n          const otherM = other.m;\n          // tslint:disable:one-variable-per-declaration\n          const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n          const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n          const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n          const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n          const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n          const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n          const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n          const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n          // tslint:enable:one-variable-per-declaration\n          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n          return this;\n      }\n      /**\n       * Check equality between this matrix and a second one\n       * @param value - defines the second matrix to compare\n       * @returns true is the current matrix and the given one values are strictly equal\n       */\n      equals(value) {\n          const other = value;\n          if (!other) {\n              return false;\n          }\n          if (this._isIdentity || other._isIdentity) {\n              if (!this._isIdentityDirty && !other._isIdentityDirty) {\n                  return this._isIdentity && other._isIdentity;\n              }\n          }\n          const m = this.m;\n          const om = other.m;\n          return (m[0] === om[0] &&\n              m[1] === om[1] &&\n              m[2] === om[2] &&\n              m[3] === om[3] &&\n              m[4] === om[4] &&\n              m[5] === om[5] &&\n              m[6] === om[6] &&\n              m[7] === om[7] &&\n              m[8] === om[8] &&\n              m[9] === om[9] &&\n              m[10] === om[10] &&\n              m[11] === om[11] &&\n              m[12] === om[12] &&\n              m[13] === om[13] &&\n              m[14] === om[14] &&\n              m[15] === om[15]);\n      }\n      /**\n       * Clone the current matrix\n       * @returns a new matrix from the current matrix\n       */\n      clone() {\n          const matrix = new Matrix();\n          matrix.copyFrom(this);\n          return matrix;\n      }\n      /**\n       * Returns the name of the current matrix class\n       * @returns the string \"Matrix\"\n       */\n      getClassName() {\n          return 'Matrix';\n      }\n      /**\n       * Gets the hash code of the current matrix\n       * @returns the hash code\n       */\n      getHashCode() {\n          let hash = this._m[0] || 0;\n          for (let i = 1; i < 16; i++) {\n              hash = (hash * 397) ^ (this._m[i] || 0);\n          }\n          return hash;\n      }\n      /**\n       * Decomposes the current Matrix into a translation, rotation and scaling components\n       * @param scale - defines the scale vector3 given as a reference to update\n       * @param rotation - defines the rotation quaternion given as a reference to update\n       * @param translation - defines the translation vector3 given as a reference to update\n       * @returns true if operation was successful\n       */\n      decompose(scale, rotation, translation) {\n          if (this._isIdentity) {\n              if (translation) {\n                  translation.setAll(0);\n              }\n              if (scale) {\n                  scale.setAll(1);\n              }\n              if (rotation) {\n                  rotation.copyFromFloats(0, 0, 0, 1);\n              }\n              return true;\n          }\n          const m = this._m;\n          if (translation) {\n              translation.copyFromFloats(m[12], m[13], m[14]);\n          }\n          const usedScale = scale || preallocatedVariables_1$3.MathTmp.Vector3[0];\n          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n          if (this.determinant() <= 0) {\n              usedScale.y *= -1;\n          }\n          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n              if (rotation) {\n                  rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n              }\n              return false;\n          }\n          if (rotation) {\n              // tslint:disable-next-line:one-variable-per-declaration\n              const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n              Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1$3.MathTmp.Matrix[0]);\n              Quaternion_1$2.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], rotation);\n          }\n          return true;\n      }\n      /**\n       * Gets specific row of the matrix\n       * @param index - defines the number of the row to get\n       * @returns the index-th row of the current matrix as a new Vector4\n       */\n      getRow(index) {\n          if (index < 0 || index > 3) {\n              return null;\n          }\n          const i = index * 4;\n          return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n      }\n      /**\n       * Sets the index-th row of the current matrix to the vector4 values\n       * @param index - defines the number of the row to set\n       * @param row - defines the target vector4\n       * @returns the updated current matrix\n       */\n      setRow(index, row) {\n          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n      }\n      /**\n       * Compute the transpose of the matrix\n       * @returns the new transposed matrix\n       */\n      transpose() {\n          return Matrix.Transpose(this);\n      }\n      /**\n       * Compute the transpose of the matrix and store it in a given matrix\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      transposeToRef(result) {\n          Matrix.TransposeToRef(this, result);\n          return this;\n      }\n      /**\n       * Sets the index-th row of the current matrix with the given 4 x float values\n       * @param index - defines the row index\n       * @param x - defines the x component to set\n       * @param y - defines the y component to set\n       * @param z - defines the z component to set\n       * @param w - defines the w component to set\n       * @returns the updated current matrix\n       */\n      setRowFromFloats(index, x, y, z, w) {\n          if (index < 0 || index > 3) {\n              return this;\n          }\n          const i = index * 4;\n          this._m[i + 0] = x;\n          this._m[i + 1] = y;\n          this._m[i + 2] = z;\n          this._m[i + 3] = w;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Compute a new matrix set with the current matrix values multiplied by scale (float)\n       * @param scale - defines the scale factor\n       * @returns a new matrix\n       */\n      scale(scale) {\n          const result = new Matrix();\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current matrix values by a factor to a given result matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the matrix to store the result\n       * @returns the current matrix\n       */\n      scaleToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Scale the current matrix values by a factor and add the result to a given matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the Matrix to store the result\n       * @returns the current matrix\n       */\n      scaleAndAddToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] += this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n       * @param ref - matrix to store the result\n       */\n      toNormalMatrix(ref) {\n          const tmp = preallocatedVariables_1$3.MathTmp.Matrix[0];\n          this.invertToRef(tmp);\n          tmp.transposeToRef(ref);\n          const m = ref._m;\n          Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n      }\n      /**\n       * Gets only rotation part of the current matrix\n       * @returns a new matrix sets to the extracted rotation matrix from the current one\n       */\n      getRotationMatrix() {\n          const result = new Matrix();\n          this.getRotationMatrixToRef(result);\n          return result;\n      }\n      /**\n       * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n       * @param result - defines the target matrix to store data to\n       * @returns the current matrix\n       */\n      getRotationMatrixToRef(result) {\n          const scale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          if (!this.decompose(scale)) {\n              Matrix.IdentityToRef(result);\n              return this;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          return this;\n      }\n      /**\n       * Toggles model matrix from being right handed to left handed in place and vice versa\n       */\n      toggleModelMatrixHandInPlace() {\n          const m = this._m;\n          m[2] *= -1;\n          m[6] *= -1;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[14] *= -1;\n          this._markAsUpdated();\n      }\n      /**\n       * Toggles projection matrix from being right handed to left handed in place and vice versa\n       */\n      toggleProjectionMatrixHandInPlace() {\n          const m = this._m;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[10] *= -1;\n          m[11] *= -1;\n          this._markAsUpdated();\n      }\n      /** @internal */\n      _updateIdentityStatus(isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = isIdentity;\n          this._isIdentity3x2 = isIdentity || isIdentity3x2;\n          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n      }\n  }\n  Matrix$1.Matrix = Matrix;\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n\n  Object.defineProperty(Quaternion$1, \"__esModule\", { value: true });\n  Quaternion$1.Quaternion = void 0;\n  const Matrix_1$2 = Matrix$1;\n  const Vector3_1$5 = Vector3$1;\n  const preallocatedVariables_1$2 = preallocatedVariables;\n  const types_1$7 = types;\n  const Scalar_1$5 = Scalar$1;\n  /**\n   * Class used to store quaternion data\n   * {@link https://en.wikipedia.org/wiki/Quaternion }\n   * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n   * @public\n   */\n  class Quaternion {\n      /**\n       * Creates a new Quaternion from the given floats\n       * @param x - defines the first component (0 by default)\n       * @param y - defines the second component (0 by default)\n       * @param z - defines the third component (0 by default)\n       * @param w - defines the fourth component (1.0 by default)\n       */\n      constructor(\n      /** defines the first component (0 by default) */\n      x = 0.0, \n      /** defines the second component (0 by default) */\n      y = 0.0, \n      /** defines the third component (0 by default) */\n      z = 0.0, \n      /** defines the fourth component (1.0 by default) */\n      w = 1.0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Creates a new quaternion from a rotation matrix\n       * @param matrix - defines the source matrix\n       * @returns a new quaternion created from the given rotation matrix values\n       */\n      static FromRotationMatrix(matrix) {\n          const result = new Quaternion();\n          Quaternion.FromRotationMatrixToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Updates the given quaternion with the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @param result - defines the target quaternion\n       */\n      static FromRotationMatrixToRef(matrix, result) {\n          const data = matrix.m;\n          // tslint:disable:one-variable-per-declaration\n          const m11 = data[0], m12 = data[4], m13 = data[8];\n          const m21 = data[1], m22 = data[5], m23 = data[9];\n          const m31 = data[2], m32 = data[6], m33 = data[10];\n          // tslint:enable:one-variable-per-declaration\n          const trace = m11 + m22 + m33;\n          let s;\n          if (trace > 0) {\n              s = 0.5 / Math.sqrt(trace + 1.0);\n              result.w = 0.25 / s;\n              result.x = (m32 - m23) * s;\n              result.y = (m13 - m31) * s;\n              result.z = (m21 - m12) * s;\n          }\n          else if (m11 > m22 && m11 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n              result.w = (m32 - m23) / s;\n              result.x = 0.25 * s;\n              result.y = (m12 + m21) / s;\n              result.z = (m13 + m31) / s;\n          }\n          else if (m22 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n              result.w = (m13 - m31) / s;\n              result.x = (m12 + m21) / s;\n              result.y = 0.25 * s;\n              result.z = (m23 + m32) / s;\n          }\n          else {\n              s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n              result.w = (m21 - m12) / s;\n              result.x = (m13 + m31) / s;\n              result.y = (m23 + m32) / s;\n              result.z = 0.25 * s;\n          }\n      }\n      /**\n       * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n      }\n      /**\n       * Checks if the two quaternions are close to each other\n       * @param quat0 - defines the first quaternion to check\n       * @param quat1 - defines the second quaternion to check\n       * @returns true if the two quaternions are close to each other\n       */\n      static AreClose(quat0, quat1) {\n          const dot = Quaternion.Dot(quat0, quat1);\n          return dot >= 0;\n      }\n      /**\n       * Creates an empty quaternion\n       * @returns a new quaternion set to (0.0, 0.0, 0.0)\n       */\n      static Zero() {\n          return new Quaternion(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Inverse a given quaternion\n       * @param q - defines the source quaternion\n       * @returns a new quaternion as the inverted current quaternion\n       */\n      static Inverse(q) {\n          return new Quaternion(-q.x, -q.y, -q.z, q.w);\n      }\n      /**\n       * Gets a boolean indicating if the given quaternion is identity\n       * @param quaternion - defines the quaternion to check\n       * @returns true if the quaternion is identity\n       */\n      static IsIdentity(quaternion) {\n          return (quaternion &&\n              quaternion.x === 0 &&\n              quaternion.y === 0 &&\n              quaternion.z === 0 &&\n              quaternion.w === 1);\n      }\n      /**\n       * Creates a quaternion from a rotation around an axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n       */\n      static RotationAxis(axis, angle) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\n      }\n      /**\n       * Creates a rotation around an axis and stores it into the given quaternion\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @param result - defines the target quaternion\n       * @returns the target quaternion\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          const sin = Math.sin(angleRad / 2);\n          axis.normalize();\n          result.w = Math.cos(angleRad / 2);\n          result.x = axis.x * sin;\n          result.y = axis.y * sin;\n          result.z = axis.z * sin;\n          return result;\n      }\n      /**\n       * Creates a new quaternion from data stored into an array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the source array where the data starts\n       * @returns a new quaternion\n       */\n      static FromArray(array, offset = 0) {\n          return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n       */\n      static FromEulerAnglesRef(x, y, z, result) {\n          return Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, result);\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles (y, x, z)\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @returns the new quaternion\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const q = new Quaternion();\n          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n          return q;\n      }\n      /**\n       * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @param result - defines the target quaternion\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n          const halfPitch = pitch * 0.5;\n          const halfYaw = yaw * 0.5;\n          const halfRoll = roll * 0.5;\n          const c1 = Math.cos(halfPitch);\n          const c2 = Math.cos(halfYaw);\n          const c3 = Math.cos(halfRoll);\n          const s1 = Math.sin(halfPitch);\n          const s2 = Math.sin(halfYaw);\n          const s3 = Math.sin(halfRoll);\n          result.x = c2 * s1 * c3 + s2 * c1 * s3;\n          result.y = s2 * c1 * c3 - c2 * s1 * s3;\n          result.z = c2 * c1 * s3 - s2 * s1 * c3;\n          result.w = c2 * c1 * c3 + s2 * s1 * s3;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @returns the new quaternion\n       */\n      static RotationAlphaBetaGamma(alpha, beta, gamma) {\n          const result = new Quaternion();\n          Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n          return result;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @param result - defines the target quaternion\n       */\n      static RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {\n          // Produces a quaternion from Euler angles in the z-x-z orientation\n          const halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n          const halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n          const halfBeta = beta * 0.5;\n          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      }\n      /**\n       * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns the new quaternion\n       */\n      static RotationQuaternionFromAxis(axis1, axis2, axis3) {\n          const quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          return quat;\n      }\n      /**\n       * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the target quaternion\n       */\n      static RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n          const rotMat = preallocatedVariables_1$2.MathTmp.Matrix[0];\n          Matrix_1$2.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n          Quaternion.FromRotationMatrixToRef(rotMat, ref);\n      }\n      /**\n       * Interpolates between two quaternions\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @returns the new interpolated quaternion\n       */\n      static Slerp(left, right, amount) {\n          const result = Quaternion.Identity;\n          Quaternion.SlerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Interpolates between two quaternions and stores it into a target quaternion\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @param result - defines the target quaternion\n       */\n      static SlerpToRef(left, right, amount, result) {\n          let num2;\n          let num3;\n          let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n          let flag = false;\n          if (num4 < 0) {\n              flag = true;\n              num4 = -num4;\n          }\n          if (num4 > 0.999999) {\n              num3 = 1 - amount;\n              num2 = flag ? -amount : amount;\n          }\n          else {\n              const num5 = Math.acos(num4);\n              const num6 = 1.0 / Math.sin(num5);\n              num3 = Math.sin((1.0 - amount) * num5) * num6;\n              num2 = flag\n                  ? -Math.sin(amount * num5) * num6\n                  : Math.sin(amount * num5) * num6;\n          }\n          result.x = num3 * left.x + num2 * right.x;\n          result.y = num3 * left.y + num2 * right.y;\n          result.z = num3 * left.z + num2 * right.z;\n          result.w = num3 * left.w + num2 * right.w;\n      }\n      /**\n       * Interpolate between two quaternions using Hermite interpolation\n       * @param value1 - defines first quaternion\n       * @param tangent1 - defines the incoming tangent\n       * @param value2 - defines second quaternion\n       * @param tangent2 - defines the outgoing tangent\n       * @param amount - defines the target quaternion\n       * @returns the new interpolated quaternion\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          const w = value1.w * part1 +\n              value2.w * part2 +\n              tangent1.w * part3 +\n              tangent2.w * part4;\n          return new Quaternion(x, y, z, w);\n      }\n      /**\n       * Creates an identity quaternion\n       * @returns - the identity quaternion\n       */\n      static get Identity() {\n          return new Quaternion(0.0, 0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns the angle in degrees between two rotations a and b.\n       * @param quat1 - defines the first quaternion\n       * @param quat2 - defines the second quaternion\n       */\n      static Angle(quat1, quat2) {\n          const dot = Quaternion.Dot(quat1, quat2);\n          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1$7.RAD2DEG;\n      }\n      /**\n       * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n       * @param x - the rotation on the x axis in euler degrees\n       * @param y - the rotation on the y axis in euler degrees\n       * @param z - the rotation on the z axis in euler degrees\n       */\n      static Euler(x, y, z) {\n          return Quaternion.RotationYawPitchRoll(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD);\n      }\n      /**\n       * Creates a rotation with the specified forward and upwards directions.\n       * @param forward - the direction to look in\n       * @param up - the vector that defines in which direction up is\n       */\n      static LookRotation(forward, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const forwardNew = Vector3_1$5.Vector3.Normalize(forward);\n          const right = Vector3_1$5.Vector3.Normalize(Vector3_1$5.Vector3.Cross(up, forwardNew));\n          const upNew = Vector3_1$5.Vector3.Cross(forwardNew, right);\n          const m00 = right.x;\n          const m01 = right.y;\n          const m02 = right.z;\n          const m10 = upNew.x;\n          const m11 = upNew.y;\n          const m12 = upNew.z;\n          const m20 = forwardNew.x;\n          const m21 = forwardNew.y;\n          const m22 = forwardNew.z;\n          const num8 = m00 + m11 + m22;\n          const quaternion = new Quaternion();\n          if (num8 > 0) {\n              let num = Math.sqrt(num8 + 1);\n              quaternion.w = num * 0.5;\n              num = 0.5 / num;\n              quaternion.x = (m12 - m21) * num;\n              quaternion.y = (m20 - m02) * num;\n              quaternion.z = (m01 - m10) * num;\n              return quaternion;\n          }\n          if (m00 >= m11 && m00 >= m22) {\n              const num7 = Math.sqrt(1 + m00 - m11 - m22);\n              const num4 = 0.5 / num7;\n              quaternion.x = 0.5 * num7;\n              quaternion.y = (m01 + m10) * num4;\n              quaternion.z = (m02 + m20) * num4;\n              quaternion.w = (m12 - m21) * num4;\n              return quaternion;\n          }\n          if (m11 > m22) {\n              const num6 = Math.sqrt(1 + m11 - m00 - m22);\n              const num3 = 0.5 / num6;\n              quaternion.x = (m10 + m01) * num3;\n              quaternion.y = 0.5 * num6;\n              quaternion.z = (m21 + m12) * num3;\n              quaternion.w = (m20 - m02) * num3;\n              return quaternion;\n          }\n          const num5 = Math.sqrt(1 + m22 - m00 - m11);\n          const num2 = 0.5 / num5;\n          quaternion.x = (m20 + m02) * num2;\n          quaternion.y = (m21 + m12) * num2;\n          quaternion.z = 0.5 * num5;\n          quaternion.w = (m01 - m10) * num2;\n          return quaternion;\n      }\n      /**\n       * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n       * @param from - defines the first quaternion\n       * @param to - defines the second quaternion\n       * @param maxDegreesDelta - the interval step\n       */\n      static RotateTowards(from, to, maxDegreesDelta) {\n          const num = Quaternion.Angle(from, to);\n          if (num === 0) {\n              return to;\n          }\n          const t = Math.min(1, maxDegreesDelta / num);\n          return Quaternion.Slerp(from, to, t);\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first direction Vector\n       * @param to - defines the target direction Vector\n       */\n      static FromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n          const v0 = from.normalize();\n          const v1 = to.normalize();\n          const a = Vector3_1$5.Vector3.Cross(v0, v1);\n          const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3_1$5.Vector3.Dot(v0, v1);\n          if (a.lengthSquared() < 0.0001) {\n              // the vectors are parallel, check w to find direction\n              // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n              // otherwise the vectors in the same direction and no rotation should occur\n              return Math.abs(w) < 0.0001\n                  ? new Quaternion(up.x, up.y, up.z, 0).normalized\n                  : Quaternion.Identity;\n          }\n          else {\n              return new Quaternion(a.x, a.y, a.z, w).normalized;\n          }\n      }\n      /**\n       * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n       */\n      get normalized() {\n          return this.normalize();\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first Vector\n       * @param to - defines the second Vector\n       * @param up - defines the direction\n       */\n      setFromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const result = Quaternion.FromToRotation(from, to, up);\n          this.x = result.x;\n          this.y = result.y;\n          this.z = result.z;\n          this.w = result.w;\n      }\n      set eulerAngles(euler) {\n          this.setEuler(euler.x, euler.y, euler.z);\n      }\n      /**\n       * Gets or sets the euler angle representation of the rotation.\n       * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n       */\n      get eulerAngles() {\n          const out = new Vector3_1$5.Vector3();\n          // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n          const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n          // this will have a magnitude of 0.5 or greater if and only if this is a singularity case\n          const test = this.x * this.w - this.y * this.z;\n          if (test > 0.4995 * unit) {\n              // singularity at north pole\n              out.x = Math.PI / 2;\n              out.y = 2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else if (test < -0.4995 * unit) {\n              // singularity at south pole\n              out.x = -Math.PI / 2;\n              out.y = -2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else {\n              // no singularity - this is the majority of cases\n              out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));\n              out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));\n              out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));\n          }\n          out.x *= types_1$7.RAD2DEG;\n          out.y *= types_1$7.RAD2DEG;\n          out.z *= types_1$7.RAD2DEG;\n          // ensure the degree values are between 0 and 360\n          out.x = Scalar_1$5.Scalar.Repeat(out.x, 360);\n          out.y = Scalar_1$5.Scalar.Repeat(out.y, 360);\n          out.z = Scalar_1$5.Scalar.Repeat(out.z, 360);\n          return out;\n      }\n      /**\n       * Gets a string representation for the current quaternion\n       * @returns a string with the Quaternion coordinates\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get length() {\n          return Math.sqrt(this.lengthSquared);\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      /**\n       * Gets the class name of the quaternion\n       * @returns the string \"Quaternion\"\n       */\n      getClassName() {\n          return 'Quaternion';\n      }\n      /**\n       * Gets a hash code for this quaternion\n       * @returns the quaternion hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      /**\n       * Copy the quaternion to an array\n       * @returns a new array populated with 4 elements from the quaternion coordinates\n       */\n      asArray() {\n          return [this.x, this.y, this.z, this.w];\n      }\n      /**\n       * Check if two quaternions are equals\n       * @param otherQuaternion - defines the second operand\n       * @returns true if the current quaternion and the given one coordinates are strictly equals\n       */\n      equals(otherQuaternion) {\n          return (otherQuaternion &&\n              this.x === otherQuaternion.x &&\n              this.y === otherQuaternion.y &&\n              this.z === otherQuaternion.z &&\n              this.w === otherQuaternion.w);\n      }\n      /**\n       * Clone the current quaternion\n       * @returns a new quaternion copied from the current one\n       */\n      clone() {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Copy a quaternion to the current one\n       * @param other - defines the other quaternion\n       * @returns the updated current quaternion\n       */\n      copyFrom(other) {\n          this.x = other.x;\n          this.y = other.y;\n          this.z = other.z;\n          this.w = other.w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Updates the current quaternion from the given euler angles\n       * @returns the updated current quaternion\n       */\n      setEuler(x, y, z) {\n          Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, this);\n          return this;\n      }\n      /**\n       * @internal\n       * Adds two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the addition result of the given one and the current quaternion\n       */\n      add(other) {\n          return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n      }\n      /**\n       * @internal\n       * Add a quaternion to the current one\n       * @param other - defines the quaternion to add\n       * @returns the current quaternion\n       */\n      addInPlace(other) {\n          this.x += other.x;\n          this.y += other.y;\n          this.z += other.z;\n          this.w += other.w;\n          return this;\n      }\n      /**\n       * Subtract two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the subtraction result of the given one from the current one\n       */\n      subtract(other) {\n          return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n      }\n      /**\n       * Multiplies the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n       */\n      scale(value) {\n          return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n      }\n      /**\n       * Scale the current quaternion values by a factor and stores the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies in place the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns the current modified quaternion\n       */\n      scaleInPlace(value) {\n          this.x *= value;\n          this.y *= value;\n          this.z *= value;\n          this.w *= value;\n          return this;\n      }\n      /**\n       * Scale the current quaternion values by a factor and add the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies two quaternions\n       * @param q1 - defines the second operand\n       * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n       */\n      multiply(q1) {\n          const result = new Quaternion(0, 0, 0, 1.0);\n          this.multiplyToRef(q1, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @param result - defines the target quaternion\n       * @returns the current quaternion\n       */\n      multiplyToRef(q1, result) {\n          const x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n          const y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n          const z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n          const w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n          result.copyFromFloats(x, y, z, w);\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @returns the currentupdated quaternion\n       */\n      multiplyInPlace(q1) {\n          this.multiplyToRef(q1, this);\n          return this;\n      }\n      /**\n       * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n       * @param ref - defines the target quaternion\n       * @returns the current quaternion\n       */\n      conjugateToRef(ref) {\n          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns the current updated quaternion\n       */\n      conjugateInPlace() {\n          this.x *= -1;\n          this.y *= -1;\n          this.z *= -1;\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns a new quaternion\n       */\n      conjugate() {\n          const result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n          return result;\n      }\n      /**\n       * Normalize in place the current quaternion\n       * @returns the current updated quaternion\n       */\n      normalize() {\n          const length = 1.0 / this.length;\n          this.x *= length;\n          this.y *= length;\n          this.z *= length;\n          this.w *= length;\n          return this;\n      }\n      angleAxis(degress, axis) {\n          if (axis.lengthSquared() === 0) {\n              return Quaternion.Identity;\n          }\n          const result = Quaternion.Identity;\n          let radians = degress * types_1$7.DEG2RAD;\n          radians *= 0.5;\n          let a2 = axis.normalize();\n          a2 = axis.scaleInPlace(Math.sin(radians));\n          result.x = a2.x;\n          result.y = a2.y;\n          result.z = a2.z;\n          result.w = Math.cos(radians);\n          return result.normalize();\n      }\n      /**\n       * Updates the given rotation matrix with the current quaternion values\n       * @param result - defines the target matrix\n       * @returns the current unchanged quaternion\n       */\n      toRotationMatrix(result) {\n          Matrix_1$2.Matrix.FromQuaternionToRef(this, result);\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @returns the current updated quaternion\n       */\n      fromRotationMatrix(matrix) {\n          Quaternion.FromRotationMatrixToRef(matrix, this);\n          return this;\n      }\n  }\n  Quaternion$1.Quaternion = Quaternion;\n\n  Object.defineProperty(Vector3$1, \"__esModule\", { value: true });\n  Vector3$1.Vector3 = void 0;\n  const preallocatedVariables_1$1 = preallocatedVariables;\n  const types_1$6 = types;\n  const Quaternion_1$1 = Quaternion$1;\n  const Scalar_1$4 = Scalar$1;\n  /**\n   * Classed used to store (x,y,z) vector representation\n   * A Vector3 is the main object used in 3D geometry\n   * It can represent etiher the coordinates of a point the space, either a direction\n   * Reminder: Babylon.js uses a left handed forward facing system\n   * @public\n   */\n  class Vector3 {\n      /**\n       * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n       * @param x - defines the first coordinates (on X axis)\n       * @param y - defines the second coordinates (on Y axis)\n       * @param z - defines the third coordinates (on Z axis)\n       */\n      constructor(\n      /**\n       * Defines the first coordinates (on X axis)\n       */\n      x = 0, \n      /**\n       * Defines the second coordinates (on Y axis)\n       */\n      y = 0, \n      /**\n       * Defines the third coordinates (on Z axis)\n       */\n      z = 0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n      }\n      /**\n       * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n       */\n      get isNonUniform() {\n          const absX = Math.abs(this.x);\n          const absY = Math.abs(this.y);\n          if (absX !== absY) {\n              return true;\n          }\n          const absZ = Math.abs(this.z);\n          if (absX !== absZ) {\n              return true;\n          }\n          if (absY !== absZ) {\n              return true;\n          }\n          return false;\n      }\n      // Statics\n      /**\n       * Returns a new Vector3 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\n      }\n      /**\n       * Get the clip factor between two vectors\n       * @param vector0 - defines the first operand\n       * @param vector1 - defines the second operand\n       * @param axis - defines the axis to use\n       * @param size - defines the size along the axis\n       * @returns the clip factor\n       */\n      static GetClipFactor(vector0, vector1, axis, size) {\n          const d0 = Vector3.Dot(vector0, axis) - size;\n          const d1 = Vector3.Dot(vector1, axis) - size;\n          const s = d0 / (d0 - d1);\n          return s;\n      }\n      /**\n       * Get angle between two vectors\n       * @param vector0 - angle between vector0 and vector1\n       * @param vector1 - angle between vector0 and vector1\n       * @param normal - direction of the normal\n       * @returns the angle between vector0 and vector1\n       */\n      static GetAngleBetweenVectors(vector0, vector1, normal) {\n          const v0 = vector0.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[1]);\n          const v1 = vector1.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[2]);\n          const dot = Vector3.Dot(v0, v1);\n          const n = preallocatedVariables_1$1.MathTmp.Vector3[3];\n          Vector3.CrossToRef(v0, v1, n);\n          if (Vector3.Dot(n, normal) > 0) {\n              return Math.acos(dot);\n          }\n          return -Math.acos(dot);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArray instead\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromFloatArray(array, offset) {\n          return Vector3.FromArray(array, offset);\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArrayToRef instead.\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          return Vector3.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the given floats.\n       * @param x - defines the x coordinate of the source\n       * @param y - defines the y coordinate of the source\n       * @param z - defines the z coordinate of the source\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatsToRef(x, y, z, result) {\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n       * @returns a new empty Vector3\n       */\n      static Zero() {\n          return new Vector3(0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n       * @returns a new unit Vector3\n       */\n      static One() {\n          return new Vector3(1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n       * @returns a new up Vector3\n       */\n      static Up() {\n          return new Vector3(0.0, 1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n       * @returns a new down Vector3\n       */\n      static Down() {\n          return new Vector3(0.0, -1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n       * @returns a new forward Vector3\n       */\n      static Forward() {\n          return new Vector3(0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n       * @returns a new forward Vector3\n       */\n      static Backward() {\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n       * @returns a new right Vector3\n       */\n      static Right() {\n          return new Vector3(1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n       * @returns a new left Vector3\n       */\n      static Left() {\n          return new Vector3(-1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the transformed Vector3\n       */\n      static TransformCoordinates(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformCoordinatesToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesToRef(vector, transformation, result) {\n          return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n       * This method computes tranformed coordinates only, not transformed direction vectors\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n          const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n          const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n          const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n          result.x = rx * rw;\n          result.y = ry * rw;\n          result.z = rz * rw;\n      }\n      /**\n       * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the new Vector3\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n       * @param value1 - defines the first control point\n       * @param value2 - defines the second control point\n       * @param value3 - defines the third control point\n       * @param value4 - defines the fourth control point\n       * @param amount - defines the amount on the spline to use\n       * @returns the new Vector3\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          const z = 0.5 *\n              (2.0 * value2.z +\n                  (-value1.z + value3.z) * amount +\n                  (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) *\n                      squared +\n                  (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @returns the new Vector3\n       */\n      static Clamp(value, min, max) {\n          const v = new Vector3();\n          Vector3.ClampToRef(value, min, max, v);\n          return v;\n      }\n      /**\n       * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @param result - defines the Vector3 where to store the result\n       */\n      static ClampToRef(value, min, max, result) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          let z = value.z;\n          z = z > max.z ? max.z : z;\n          z = z < min.z ? min.z : z;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n       * @param value1 - defines the first control point\n       * @param tangent1 - defines the first tangent vector\n       * @param value2 - defines the second control point\n       * @param tangent2 - defines the second tangent vector\n       * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Lerp(start, end, amount) {\n          const result = new Vector3(0, 0, 0);\n          Vector3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @param result - defines the Vector3 where to store the result\n       */\n      static LerpToRef(start, end, amount, result) {\n          result.x = start.x + (end.x - start.x) * amount;\n          result.y = start.y + (end.y - start.y) * amount;\n          result.z = start.z + (end.z - start.z) * amount;\n      }\n      /**\n       * Returns the dot product (float) between the vectors \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y + left.z * right.z;\n      }\n      /**\n       * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the cross product\n       */\n      static Cross(left, right) {\n          const result = Vector3.Zero();\n          Vector3.CrossToRef(left, right, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @param result - defines the Vector3 where to store the result\n       */\n      static CrossToRef(left, right, result) {\n          const x = left.y * right.z - left.z * right.y;\n          const y = left.z * right.x - left.x * right.z;\n          const z = left.x * right.y - left.y * right.x;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 as the normalization of the given vector\n       * @param vector - defines the Vector3 to normalize\n       * @returns the new Vector3\n       */\n      static Normalize(vector) {\n          const result = Vector3.Zero();\n          Vector3.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the normalization of the given first vector\n       * @param vector - defines the Vector3 to normalize\n       * @param result - defines the Vector3 where to store the result\n       */\n      static NormalizeToRef(vector, result) {\n          vector.normalizeToRef(result);\n      }\n      /**\n       * Gets the minimal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Minimize(left, right) {\n          const min = new Vector3(left.x, left.y, left.z);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Gets the maximal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Maximize(left, right) {\n          const max = new Vector3(left.x, left.y, left.z);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the distance\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the squared distance\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          return x * x + y * y + z * z;\n      }\n      /**\n       * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the new Vector3\n       */\n      static Center(value1, value2) {\n          const center = Vector3.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n       * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n       * to something in order to rotate it from its local system to the given target system\n       * Note: axis1, axis2 and axis3 are normalized during this operation\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns a new Vector3\n       */\n      static RotationFromAxis(axis1, axis2, axis3) {\n          const rotation = Vector3.Zero();\n          Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n          return rotation;\n      }\n      /**\n       * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the Vector3 where to store the result\n       */\n      static RotationFromAxisToRef(axis1, axis2, axis3, ref) {\n          const quat = preallocatedVariables_1$1.MathTmp.Quaternion[0];\n          Quaternion_1$1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          ref.copyFrom(quat.eulerAngles);\n      }\n      /**\n       * Creates a string representation of the Vector3\n       * @returns a string with the Vector3 coordinates.\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z})`;\n      }\n      /**\n       * Gets the class name\n       * @returns the string \"Vector3\"\n       */\n      getClassName() {\n          return 'Vector3';\n      }\n      /**\n       * Creates the Vector3 hash code\n       * @returns a number which tends to be unique between Vector3 instances\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Creates an array containing three elements : the coordinates of the Vector3\n       * @returns a new array of numbers\n       */\n      asArray() {\n          const result = [];\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n       * @param array - defines the destination array\n       * @param index - defines the offset in the destination array\n       * @returns the current Vector3\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          return this;\n      }\n      /**\n       * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n       * @returns a new Quaternion object, computed from the Vector3 coordinates\n       */\n      toQuaternion() {\n          return Quaternion_1$1.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n      }\n      /**\n       * Adds the given vector to the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      addInPlace(otherVector) {\n          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Adds the given coordinates to the current Vector3\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      addInPlaceFromFloats(x, y, z) {\n          this.x += x;\n          this.y += y;\n          this.z += z;\n          return this;\n      }\n      /**\n       * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      add(otherVector) {\n          return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      addToRef(otherVector, result) {\n          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Subtract the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      subtract(otherVector) {\n          return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n      }\n      /**\n       * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractToRef(otherVector, result) {\n          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n      }\n      /**\n       * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the resulting Vector3\n       */\n      subtractFromFloats(x, y, z) {\n          return new Vector3(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractFromFloatsToRef(x, y, z, result) {\n          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n       * @param matrix - The transformation matrix\n       */\n      applyMatrix4(matrix) {\n          this.applyMatrix4ToRef(matrix, this);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n       * @param matrix - The transformation matrix\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      applyMatrix4ToRef(matrix, result) {\n          const { x, y, z } = this;\n          const { m } = matrix;\n          const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n          return result;\n      }\n      /**\n       * Rotates the current Vector3 based on the given quaternion\n       * @param q - defines the Quaternion\n       * @returns the current Vector3\n       */\n      rotate(q) {\n          return this.rotateToRef(q, this);\n      }\n      /**\n       * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n       * @param q - defines the Quaternion\n       * @param result - defines the target Vector3\n       * @returns the current Vector3\n       */\n      rotateToRef(q, result) {\n          const { x, y, z } = this;\n          const { x: qx, y: qy, z: qz, w: qw } = q;\n          // calculate quat * vector\n          const ix = qw * x + qy * z - qz * y;\n          const iy = qw * y + qz * x - qx * z;\n          const iz = qw * z + qx * y - qy * x;\n          const iw = -qx * x - qy * y - qz * z;\n          // calculate result * inverse quat\n          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n          return result;\n      }\n      /**\n       * Gets a new Vector3 set with the current Vector3 negated coordinates\n       * @returns a new Vector3\n       */\n      negate() {\n          return new Vector3(-this.x, -this.y, -this.z);\n      }\n      /**\n       * Multiplies the Vector3 coordinates by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns the current updated Vector3\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns a new Vector3\n       */\n      scale(scale) {\n          return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n       * @param scale - defines the multiplier factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      scaleToRef(scale, result) {\n          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Scale the current Vector3 values by a factor and add the result to a given Vector3\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the unmodified current Vector3\n       */\n      scaleAndAddToRef(scale, result) {\n          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n       * @param otherVector - defines the second operand\n       * @returns true if both vectors are equals\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n       * @param otherVector - defines the second operand\n       * @param epsilon - defines the minimal distance to define values as equals\n       * @returns true if both vectors are distant less than epsilon\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$6.Epsilon) {\n          return (otherVector &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\n      }\n      /**\n       * Returns true if the current Vector3 coordinates equals the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns true if both vectors are equals\n       */\n      equalsToFloats(x, y, z) {\n          return this.x === x && this.y === y && this.z === z;\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      multiply(otherVector) {\n          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      multiplyToRef(otherVector, result) {\n          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the new Vector3\n       */\n      multiplyByFloats(x, y, z) {\n          return new Vector3(this.x * x, this.y * y, this.z * z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      divide(otherVector) {\n          return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      divideToRef(otherVector, result) {\n          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlace(other) {\n          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlace(other) {\n          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlaceFromFloats(x, y, z) {\n          if (x < this.x) {\n              this.x = x;\n          }\n          if (y < this.y) {\n              this.y = y;\n          }\n          if (z < this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlaceFromFloats(x, y, z) {\n          if (x > this.x) {\n              this.x = x;\n          }\n          if (y > this.y) {\n              this.y = y;\n          }\n          if (z > this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      floor() {\n          return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      fract() {\n          return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n      }\n      // Properties\n      /**\n       * Gets the length of the Vector3\n       * @returns the length of the Vecto3\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      }\n      /**\n       * Gets the squared length of the Vector3\n       * @returns squared length of the Vector3\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z;\n      }\n      /**\n       * Normalize the current Vector3.\n       * Please note that this is an in place operation.\n       * @returns the current updated Vector3\n       */\n      normalize() {\n          return this.normalizeFromLength(this.length());\n      }\n      /**\n       * Normalize the current Vector3 with the given input length.\n       * Please note that this is an in place operation.\n       * @param len - the length of the vector\n       * @returns the current updated Vector3\n       */\n      normalizeFromLength(len) {\n          if (len === 0 || len === 1.0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Normalize the current Vector3 to a new vector\n       * @returns the new Vector3\n       */\n      normalizeToNew() {\n          const normalized = new Vector3(0, 0, 0);\n          this.normalizeToRef(normalized);\n          return normalized;\n      }\n      /**\n       * Normalize the current Vector3 to the reference\n       * @param reference - define the Vector3 to update\n       * @returns the updated Vector3\n       */\n      normalizeToRef(reference) {\n          const len = this.length();\n          if (len === 0 || len === 1.0) {\n              return reference.copyFromFloats(this.x, this.y, this.z);\n          }\n          return this.scaleToRef(1.0 / len, reference);\n      }\n      /**\n       * Creates a new Vector3 copied from the current Vector3\n       * @returns the new Vector3\n       */\n      clone() {\n          return new Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Copies the given vector coordinates to the current Vector3 ones\n       * @param source - defines the source Vector3\n       * @returns the current updated Vector3\n       */\n      copyFrom(source) {\n          return this.copyFromFloats(source.x, source.y, source.z);\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      copyFromFloats(x, y, z) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          return this;\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      set(x, y, z) {\n          return this.copyFromFloats(x, y, z);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y and z coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = v;\n          return this;\n      }\n  }\n  Vector3$1.Vector3 = Vector3;\n\n  Object.defineProperty(preallocatedVariables, \"__esModule\", { value: true });\n  preallocatedVariables.MathTmp = void 0;\n  const utils_1 = utils;\n  const Vector3_1$4 = Vector3$1;\n  const Quaternion_1 = Quaternion$1;\n  const Matrix_1$1 = Matrix$1;\n  // Temporary pre-allocated objects for engine internal use\n  // usage in any internal function :\n  // var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n  // There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n  /**\n   * @public\n   * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n   */\n  preallocatedVariables.MathTmp = {\n      Vector3: (0, utils_1.buildArray)(6, Vector3_1$4.Vector3.Zero),\n      Matrix: (0, utils_1.buildArray)(2, Matrix_1$1.Matrix.Identity),\n      Quaternion: (0, utils_1.buildArray)(3, Quaternion_1.Quaternion.Zero),\n      staticUp: Vector3_1$4.Vector3.Up(),\n      tmpMatrix: Matrix_1$1.Matrix.Zero()\n  };\n\n  var Angle$1 = {};\n\n  Object.defineProperty(Angle$1, \"__esModule\", { value: true });\n  Angle$1.Angle = void 0;\n  /**\n   * Defines angle representation\n   * @public\n   */\n  class Angle {\n      /**\n       * Creates an Angle object of \"radians\" radians (float).\n       */\n      constructor(radians) {\n          this._radians = radians;\n          if (this._radians < 0.0) {\n              this._radians += 2.0 * Math.PI;\n          }\n      }\n      /**\n       * Gets a new Angle object valued with the angle value in radians between the two given vectors\n       * @param a - defines first vector\n       * @param b - defines second vector\n       * @returns a new Angle\n       */\n      static BetweenTwoPoints(a, b) {\n          const delta = b.subtract(a);\n          const theta = Math.atan2(delta.y, delta.x);\n          return new Angle(theta);\n      }\n      /**\n       * Gets a new Angle object from the given float in radians\n       * @param radians - defines the angle value in radians\n       * @returns a new Angle\n       */\n      static FromRadians(radians) {\n          return new Angle(radians);\n      }\n      /**\n       * Gets a new Angle object from the given float in degrees\n       * @param degrees - defines the angle value in degrees\n       * @returns a new Angle\n       */\n      static FromDegrees(degrees) {\n          return new Angle((degrees * Math.PI) / 180.0);\n      }\n      /**\n       * Get value in degrees\n       * @returns the Angle value in degrees (float)\n       */\n      degrees() {\n          return (this._radians * 180.0) / Math.PI;\n      }\n      /**\n       * Get value in radians\n       * @returns the Angle value in radians (float)\n       */\n      radians() {\n          return this._radians;\n      }\n  }\n  Angle$1.Angle = Angle;\n\n  var Arc2$1 = {};\n\n  var Vector2$1 = {};\n\n  Object.defineProperty(Vector2$1, \"__esModule\", { value: true });\n  Vector2$1.Vector2 = void 0;\n  const types_1$5 = types;\n  const Scalar_1$3 = Scalar$1;\n  /**\n   * Class representing a vector containing 2 coordinates\n   * @public\n   */\n  class Vector2 {\n      /**\n       * Creates a new Vector2 from the given x and y coordinates\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       */\n      constructor(\n      /** defines the first coordinate */\n      x = 0, \n      /** defines the second coordinate */\n      y = 0) {\n          this.x = x;\n          this.y = y;\n      }\n      /**\n       * Gets a new Vector2(0, 0)\n       * @returns a new Vector2\n       */\n      static Zero() {\n          return new Vector2(0, 0);\n      }\n      /**\n       * Gets a new Vector2(1, 1)\n       * @returns a new Vector2\n       */\n      static One() {\n          return new Vector2(1, 1);\n      }\n      /**\n       * Returns a new Vector2 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\n      }\n      /**\n       * Gets a new Vector2 set from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @returns a new Vector2\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector2(array[offset], array[offset + 1]);\n      }\n      /**\n       * Sets \"result\" from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @param result - defines the target vector\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n      }\n      /**\n       * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n       * @param value1 - defines 1st point of control\n       * @param value2 - defines 2nd point of control\n       * @param value3 - defines 3rd point of control\n       * @param value4 - defines 4th point of control\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n       * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n       * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n       * @param value - defines the value to clamp\n       * @param min - defines the lower limit\n       * @param max - defines the upper limit\n       * @returns a new Vector2\n       */\n      static Clamp(value, min, max) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\n       * @param value1 - defines the 1st control point\n       * @param tangent1 - defines the outgoing tangent\n       * @param value2 - defines the 2nd control point\n       * @param tangent2 - defines the incoming tangent\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n       * @param start - defines the start vector\n       * @param end - defines the end vector\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Lerp(start, end, amount) {\n          const x = start.x + (end.x - start.x) * amount;\n          const y = start.y + (end.y - start.y) * amount;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets the dot product of the vector \"left\" and the vector \"right\"\n       * @param left - defines first vector\n       * @param right - defines second vector\n       * @returns the dot product (float)\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y;\n      }\n      /**\n       * Returns a new Vector2 equal to the normalized given vector\n       * @param vector - defines the vector to normalize\n       * @returns a new Vector2\n       */\n      static Normalize(vector) {\n          const newVector = new Vector2(vector.x, vector.y);\n          newVector.normalize();\n          return newVector;\n      }\n      /**\n       * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Minimize(left, right) {\n          const x = left.x < right.x ? left.x : right.x;\n          const y = left.y < right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Maximize(left, right) {\n          const x = left.x > right.x ? left.x : right.x;\n          const y = left.y > right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @returns a new Vector2\n       */\n      static Transform(vector, transformation) {\n          const r = Vector2.Zero();\n          Vector2.TransformToRef(vector, transformation, r);\n          return r;\n      }\n      /**\n       * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @param result - defines the target vector\n       */\n      static TransformToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + m[12];\n          const y = vector.x * m[1] + vector.y * m[5] + m[13];\n          result.x = x;\n          result.y = y;\n      }\n      /**\n       * Determines if a given vector is included in a triangle\n       * @param p - defines the vector to test\n       * @param p0 - defines 1st triangle point\n       * @param p1 - defines 2nd triangle point\n       * @param p2 - defines 3rd triangle point\n       * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\n       */\n      static PointInTriangle(p, p0, p1, p2) {\n          const a = (1 / 2) *\n              (-p1.y * p2.x +\n                  p0.y * (-p1.x + p2.x) +\n                  p0.x * (p1.y - p2.y) +\n                  p1.x * p2.y);\n          const sign = a < 0 ? -1 : 1;\n          const s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) *\n              sign;\n          const t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) *\n              sign;\n          return s > 0 && t > 0 && s + t < 2 * a * sign;\n      }\n      /**\n       * Gets the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the distance between vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the squared distance between vectors\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          return x * x + y * y;\n      }\n      /**\n       * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns a new Vector2\n       */\n      static Center(value1, value2) {\n          const center = Vector2.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n       * @param p - defines the middle point\n       * @param segA - defines one point of the segment\n       * @param segB - defines the other point of the segment\n       * @returns the shortest distance\n       */\n      static DistanceOfPointFromSegment(p, segA, segB) {\n          const l2 = Vector2.DistanceSquared(segA, segB);\n          if (l2 === 0.0) {\n              return Vector2.Distance(p, segA);\n          }\n          const v = segB.subtract(segA);\n          const t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n          const proj = segA.add(v.multiplyByFloats(t, t));\n          return Vector2.Distance(p, proj);\n      }\n      /**\n       * Gets a string with the Vector2 coordinates\n       * @returns a string with the Vector2 coordinates\n       */\n      toString() {\n          return '{X: ' + this.x + ' Y:' + this.y + '}';\n      }\n      /**\n       * Gets class name\n       * @returns the string \"Vector2\"\n       */\n      getClassName() {\n          return 'Vector2';\n      }\n      /**\n       * Gets current vector hash code\n       * @returns the Vector2 hash code as a number\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n       * @param array - defines the source array\n       * @param index - defines the offset in source array\n       * @returns the current Vector2\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          return this;\n      }\n      /**\n       * Copy the current vector to an array\n       * @returns a new array with 2 elements: the Vector2 coordinates.\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given Vector2 coordinates\n       * @param source - defines the source Vector2\n       * @returns the current updated Vector2\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      copyFromFloats(x, y) {\n          this.x = x;\n          this.y = y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      set(x, y) {\n          return this.copyFromFloats(x, y);\n      }\n      /**\n       * Add another vector with the current one\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n       */\n      add(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          return this;\n      }\n      /**\n       * Set the Vector2 coordinates by adding the given Vector2 coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      addVector3(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      subtract(otherVector) {\n          return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          return this;\n      }\n      /**\n       * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          return this;\n      }\n      /**\n       * Multiplies in place the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      multiply(otherVector) {\n          return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n      }\n      /**\n       * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns a new Vector2\n       */\n      multiplyByFloats(x, y) {\n          return new Vector2(this.x * x, this.y * y);\n      }\n      /**\n       * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      divide(otherVector) {\n          return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          return this;\n      }\n      /**\n       * Divides the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Gets a new Vector2 with current Vector2 negated coordinates\n       * @returns a new Vector2\n       */\n      negate() {\n          return new Vector2(-this.x, -this.y);\n      }\n      /**\n       * Multiply the Vector2 coordinates by scale\n       * @param scale - defines the scaling factor\n       * @returns the current updated Vector2\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n       * @param scale - defines the scaling factor\n       * @returns a new Vector2\n       */\n      scale(scale) {\n          const result = new Vector2(0, 0);\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current Vector2 values by a factor to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector2 values by a factor and add the result to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          return this;\n      }\n      /**\n       * Gets a boolean if two vectors are equals\n       * @param otherVector - defines the other vector\n       * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n       */\n      equals(otherVector) {\n          return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n      }\n      /**\n       * Gets a boolean if two vectors are equals (using an epsilon value)\n       * @param otherVector - defines the other vector\n       * @param epsilon - defines the minimal distance to consider equality\n       * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$5.Epsilon) {\n          return (otherVector &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      floor() {\n          return new Vector2(Math.floor(this.x), Math.floor(this.y));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      fract() {\n          return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n      }\n      // Properties\n      /**\n       * Gets the length of the vector\n       * @returns the vector length (float)\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n      /**\n       * Gets the vector squared length\n       * @returns the vector squared length (float)\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y;\n      }\n      // Methods\n      /**\n       * Normalize the vector\n       * @returns the current updated Vector2\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          const num = 1.0 / len;\n          this.x *= num;\n          this.y *= num;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 copied from the Vector2\n       * @returns a new Vector2\n       */\n      clone() {\n          return new Vector2(this.x, this.y);\n      }\n  }\n  Vector2$1.Vector2 = Vector2;\n\n  Object.defineProperty(Arc2$1, \"__esModule\", { value: true });\n  Arc2$1.Arc2 = void 0;\n  const Angle_1 = Angle$1;\n  const Vector2_1$1 = Vector2$1;\n  const types_1$4 = types;\n  /**\n   * This represents an arc in a 2d space.\n   * @public\n   */\n  class Arc2 {\n      /**\n       * Creates an Arc object from the three given points : start, middle and end.\n       * @param startPoint - Defines the start point of the arc\n       * @param midPoint - Defines the midlle point of the arc\n       * @param endPoint - Defines the end point of the arc\n       */\n      constructor(\n      /** Defines the start point of the arc */\n      startPoint, \n      /** Defines the mid point of the arc */\n      midPoint, \n      /** Defines the end point of the arc */\n      endPoint) {\n          this.startPoint = startPoint;\n          this.midPoint = midPoint;\n          this.endPoint = endPoint;\n          const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n          const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n          const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n          const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) -\n              (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n          this.centerPoint = new Vector2_1$1.Vector2((startToMid * (midPoint.y - endPoint.y) -\n              midToEnd * (startPoint.y - midPoint.y)) /\n              det, ((startPoint.x - midPoint.x) * midToEnd -\n              (midPoint.x - endPoint.x) * startToMid) /\n              det);\n          this.radius = this.centerPoint.subtract(this.startPoint).length();\n          this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n          const a1 = this.startAngle.degrees();\n          let a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n          let a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n          // angles correction\n          if (a2 - a1 > +180.0) {\n              a2 -= 360.0;\n          }\n          if (a2 - a1 < -180.0) {\n              a2 += 360.0;\n          }\n          if (a3 - a2 > +180.0) {\n              a3 -= 360.0;\n          }\n          if (a3 - a2 < -180.0) {\n              a3 += 360.0;\n          }\n          this.orientation = a2 - a1 < 0 ? types_1$4.Orientation.CW : types_1$4.Orientation.CCW;\n          this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1$4.Orientation.CW ? a1 - a3 : a3 - a1);\n      }\n  }\n  Arc2$1.Arc2 = Arc2;\n\n  var Axis$1 = {};\n\n  Object.defineProperty(Axis$1, \"__esModule\", { value: true });\n  Axis$1.Axis = void 0;\n  const Vector3_1$3 = Vector3$1;\n  /**\n   * Defines the 3 main axes\n   * @public\n   */\n  class Axis {\n  }\n  Axis$1.Axis = Axis;\n  /** X axis */\n  Axis.X = new Vector3_1$3.Vector3(1.0, 0.0, 0.0);\n  /** Y axis */\n  Axis.Y = new Vector3_1$3.Vector3(0.0, 1.0, 0.0);\n  /** Z axis */\n  Axis.Z = new Vector3_1$3.Vector3(0.0, 0.0, 1.0);\n\n  var BezierCurve$1 = {};\n\n  Object.defineProperty(BezierCurve$1, \"__esModule\", { value: true });\n  BezierCurve$1.BezierCurve = void 0;\n  /**\n   * Class used to represent a Bezier curve\n   * @public\n   */\n  class BezierCurve {\n      /**\n       * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\n       * @param t - defines the time\n       * @param x1 - defines the left coordinate on X axis\n       * @param y1 - defines the left coordinate on Y axis\n       * @param x2 - defines the right coordinate on X axis\n       * @param y2 - defines the right coordinate on Y axis\n       * @returns the interpolated value\n       */\n      static Interpolate(t, x1, y1, x2, y2) {\n          // Extract X (which is equal to time here)\n          const f0 = 1 - 3 * x2 + 3 * x1;\n          const f1 = 3 * x2 - 6 * x1;\n          const f2 = 3 * x1;\n          let refinedT = t;\n          for (let i = 0; i < 5; i++) {\n              const refinedT2 = refinedT * refinedT;\n              const refinedT3 = refinedT2 * refinedT;\n              const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n              const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n              refinedT -= (x - t) * slope;\n              refinedT = Math.min(1, Math.max(0, refinedT));\n          }\n          // Resolve cubic bezier for the given x\n          return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n              3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n              Math.pow(refinedT, 3));\n      }\n  }\n  BezierCurve$1.BezierCurve = BezierCurve;\n\n  var Color3$1 = {};\n\n  var Color4$1 = {};\n\n  Object.defineProperty(Color4$1, \"__esModule\", { value: true });\n  Color4$1.Color4 = void 0;\n  const Scalar_1$2 = Scalar$1;\n  const types_1$3 = types;\n  /**\n   * Class used to hold a RBGA color\n   * @public\n   */\n  class Color4 {\n      /**\n       * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       * @param a - defines the alpha component (between 0 and 1, default is 1)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0, \n      /**\n       * Defines the alpha component (between 0 and 1, default is 1)\n       */\n      a = 1) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n      }\n      // Statics\n      /**\n       * Creates a new Color4 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color4 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 9) {\n              return new Color4(0.0, 0.0, 0.0, 0.0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          const a = parseInt(hex.substring(7, 9), 16);\n          return Color4.FromInts(r, g, b, a);\n      }\n      /**\n       * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @returns a new Color4 object\n       */\n      static Lerp(left, right, amount) {\n          const result = new Color4(0.0, 0.0, 0.0, 0.0);\n          Color4.LerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color4 object where to store data\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n          result.a = left.a + (right.a - left.a) * amount;\n      }\n      /**\n       * Returns a Color4 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color4(1.0, 0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a green color\n       * @returns a new Color4 object\n       */\n      static Green() {\n          return new Color4(0, 1.0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a blue color\n       * @returns a new Color4 object\n       */\n      static Blue() {\n          return new Color4(0, 0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a black color\n       * @returns a new Color4 object\n       */\n      static Black() {\n          return new Color4(0, 0, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a white color\n       * @returns a new Color4 object\n       */\n      static White() {\n          return new Color4(1, 1, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a purple color\n       * @returns a new Color4 object\n       */\n      static Purple() {\n          return new Color4(0.5, 0, 0.5, 1);\n      }\n      /**\n       * Returns a Color4 value containing a magenta color\n       * @returns a new Color4 object\n       */\n      static Magenta() {\n          return new Color4(1, 0, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a yellow color\n       * @returns a new Color4 object\n       */\n      static Yellow() {\n          return new Color4(1, 1, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a gray color\n       * @returns a new Color4 object\n       */\n      static Gray() {\n          return new Color4(0.5, 0.5, 0.5, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a teal color\n       * @returns a new Color4 object\n       */\n      static Teal() {\n          return new Color4(0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a transparent color\n       * @returns a new Color4 object\n       */\n      static Clear() {\n          return new Color4(0, 0, 0, 0);\n      }\n      /**\n       * Creates a new Color4 from a Color3 and an alpha value\n       * @param color3 - defines the source Color3 to read from\n       * @param alpha - defines the alpha component (1.0 by default)\n       * @returns a new Color4 object\n       */\n      static FromColor3(color3, alpha = 1.0) {\n          return new Color4(color3.r, color3.g, color3.b, alpha);\n      }\n      /**\n       * Creates a new Color4 from the starting index element of the given array\n       * @param array - defines the source array to read from\n       * @param offset - defines the offset in the source array\n       * @returns a new Color4 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @param a - defines the alpha component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b, a) {\n          return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n      }\n      /**\n       * Check the content of a given array and convert it to an array containing RGBA data\n       * If the original array was already containing count * 4 values then it is returned directly\n       * @param colors - defines the array to check\n       * @param count - defines the number of RGBA data to expect\n       * @returns an array containing count * 4 values (RGBA)\n       */\n      static CheckColors4(colors, count) {\n          // Check if color3 was used\n          if (colors.length === count * 3) {\n              const colors4 = [];\n              for (let index = 0; index < colors.length; index += 3) {\n                  const newIndex = (index / 3) * 4;\n                  colors4[newIndex] = colors[index];\n                  colors4[newIndex + 1] = colors[index + 1];\n                  colors4[newIndex + 2] = colors[index + 2];\n                  colors4[newIndex + 3] = 1.0;\n              }\n              return colors4;\n          }\n          return colors;\n      }\n      // Operators\n      /**\n       * Adds in place the given Color4 values to the current Color4 object\n       * @param right - defines the second operand\n       * @returns the current updated Color4 object\n       */\n      addInPlace(right) {\n          this.r += right.r;\n          this.g += right.g;\n          this.b += right.b;\n          this.a += right.a;\n          return this;\n      }\n      /**\n       * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Stores from the starting index in the given array the Color4 successive values\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color4 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          array[index + 3] = this.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 set with the added values of the current Color4 and of the given one\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      add(right) {\n          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n      }\n      /**\n       * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      subtract(right) {\n          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n      }\n      /**\n       * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n       * @param right - defines the second operand\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current Color4 object\n       */\n      subtractToRef(right, result) {\n          result.r = this.r - right.r;\n          result.g = this.g - right.g;\n          result.b = this.b - right.b;\n          result.a = this.a - right.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 with the current Color4 values multiplied by scale\n       * @param scale - defines the scaling factor to apply\n       * @returns a new Color4 object\n       */\n      scale(scale) {\n          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n      }\n      /**\n       * Multiplies the current Color4 values by scale and stores the result in \"result\"\n       * @param scale - defines the scaling factor to apply\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current unmodified Color4\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          result.a = this.a * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color4 values by a factor and add the result to a given Color4\n       * @param scale - defines the scale factor\n       * @param result - defines the Color4 object where to store the result\n       * @returns the unmodified current Color4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          result.a += this.a * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into.\n       * @returns the cuurent Color4\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$2.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$2.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$2.Scalar.Clamp(this.b, min, max);\n          result.a = Scalar_1$2.Scalar.Clamp(this.a, min, max);\n          return this;\n      }\n      /**\n       * Multipy an Color4 value by another and return a new Color4 object\n       * @param color - defines the Color4 value to multiply by\n       * @returns a new Color4 object\n       */\n      multiply(color) {\n          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n      }\n      /**\n       * Multipy a Color4 value by another and push the result in a reference value\n       * @param color - defines the Color4 value to multiply by\n       * @param result - defines the Color4 to fill the result in\n       * @returns the result Color4\n       */\n      multiplyToRef(color, result) {\n          result.r = this.r * color.r;\n          result.g = this.g * color.g;\n          result.b = this.b * color.b;\n          result.a = this.a * color.a;\n          return result;\n      }\n      /**\n       * Creates a string with the Color4 current values\n       * @returns the string representation of the Color4 object\n       */\n      toString() {\n          return ('{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}');\n      }\n      /**\n       * Returns the string \"Color4\"\n       * @returns \"Color4\"\n       */\n      getClassName() {\n          return 'Color4';\n      }\n      /**\n       * Compute the Color4 hash code\n       * @returns an unique number that can be used to hash Color4 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          hash = (hash * 397) ^ (this.a || 0);\n          return hash;\n      }\n      /**\n       * Creates a new Color4 copied from the current one\n       * @returns a new Color4 object\n       */\n      clone() {\n          return new Color4(this.r, this.g, this.b, this.a);\n      }\n      /**\n       * Copies the given Color4 values into the current one\n       * @param source - defines the source Color4 object\n       * @returns the current updated Color4 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          this.a = source.a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      copyFromFloats(r, g, b, a) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      set(r, g, b, a) {\n          return this.copyFromFloats(r, g, b, a);\n      }\n      /**\n       * Compute the Color4 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color4 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          const intA = (this.a * 255) | 0;\n          return ('#' +\n              Scalar_1$2.Scalar.ToHex(intR) +\n              Scalar_1$2.Scalar.ToHex(intG) +\n              Scalar_1$2.Scalar.ToHex(intB) +\n              Scalar_1$2.Scalar.ToHex(intA));\n      }\n      /**\n       * Computes a new Color4 converted from the current one to linear space\n       * @returns a new Color4 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color4();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the linear space version\n       * @returns the unmodified Color4\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToLinearSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n      /**\n       * Computes a new Color4 converted from the current one to gamma space\n       * @returns a new Color4 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color4();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the gamma space version\n       * @returns the unmodified Color4\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToGammaSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n  }\n  Color4$1.Color4 = Color4;\n\n  Object.defineProperty(Color3$1, \"__esModule\", { value: true });\n  Color3$1.Color3 = void 0;\n  const types_1$2 = types;\n  const Color4_1 = Color4$1;\n  const Scalar_1$1 = Scalar$1;\n  /**\n   * Class used to hold a RBG color\n   * @public\n   */\n  class Color3 {\n      /**\n       * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n      }\n      // Statics\n      /**\n       * Creates a new Color3 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color3 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 7) {\n              return new Color3(0, 0, 0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          return Color3.FromInts(r, g, b);\n      }\n      /**\n       * Creates a new Vector3 from the starting index of the given array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Color3 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b) {\n          return new Color3(r / 255.0, g / 255.0, b / 255.0);\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param start - defines the start Color3 value\n       * @param end - defines the end Color3 value\n       * @param amount - defines the gradient value between start and end\n       * @returns a new Color3 object\n       */\n      static Lerp(start, end, amount) {\n          const result = new Color3(0.0, 0.0, 0.0);\n          Color3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color3 object where to store the result\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n      }\n      /**\n       * Returns a Color3 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color3(1, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a green color\n       * @returns a new Color3 object\n       */\n      static Green() {\n          return new Color3(0, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a blue color\n       * @returns a new Color3 object\n       */\n      static Blue() {\n          return new Color3(0, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a black color\n       * @returns a new Color3 object\n       */\n      static Black() {\n          return new Color3(0, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a white color\n       * @returns a new Color3 object\n       */\n      static White() {\n          return new Color3(1, 1, 1);\n      }\n      /**\n       * Returns a Color3 value containing a purple color\n       * @returns a new Color3 object\n       */\n      static Purple() {\n          return new Color3(0.5, 0, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a magenta color\n       * @returns a new Color3 object\n       */\n      static Magenta() {\n          return new Color3(1, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a yellow color\n       * @returns a new Color3 object\n       */\n      static Yellow() {\n          return new Color3(1, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a gray color\n       * @returns a new Color3 object\n       */\n      static Gray() {\n          return new Color3(0.5, 0.5, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a teal color\n       * @returns a new Color3 object\n       */\n      static Teal() {\n          return new Color3(0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color3 value containing a random color\n       * @returns a new Color3 object\n       */\n      static Random() {\n          return new Color3(Math.random(), Math.random(), Math.random());\n      }\n      /**\n       * Creates a string with the Color3 current values\n       * @returns the string representation of the Color3 object\n       */\n      toString() {\n          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}';\n      }\n      /**\n       * Returns the string \"Color3\"\n       * @returns \"Color3\"\n       */\n      getClassName() {\n          return 'Color3';\n      }\n      /**\n       * Compute the Color3 hash code\n       * @returns an unique number that can be used to hash Color3 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Stores in the given array from the given starting index the red, green, blue values as successive elements\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color3 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          return this;\n      }\n      /**\n       * Returns a new Color4 object from the current Color3 and the given alpha\n       * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n       * @returns a new Color4 object\n       */\n      toColor4(alpha = 1) {\n          return new Color4_1.Color4(this.r, this.g, this.b, alpha);\n      }\n      /**\n       * Returns a new array populated with 3 numeric elements : red, green and blue values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Returns the luminance value\n       * @returns a float value\n       */\n      toLuminance() {\n          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n      }\n      /**\n       * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n       * @param otherColor - defines the second operand\n       * @returns the new Color3 object\n       */\n      multiply(otherColor) {\n          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n      }\n      /**\n       * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines the Color3 object where to store the result\n       * @returns the current Color3\n       */\n      multiplyToRef(otherColor, result) {\n          result.r = this.r * otherColor.r;\n          result.g = this.g * otherColor.g;\n          result.b = this.b * otherColor.b;\n          return this;\n      }\n      /**\n       * Determines equality between Color3 objects\n       * @param otherColor - defines the second operand\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equals(otherColor) {\n          return (otherColor &&\n              this.r === otherColor.r &&\n              this.g === otherColor.g &&\n              this.b === otherColor.b);\n      }\n      /**\n       * Determines equality between the current Color3 object and a set of r,b,g values\n       * @param r - defines the red component to check\n       * @param g - defines the green component to check\n       * @param b - defines the blue component to check\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equalsFloats(r, g, b) {\n          return this.r === r && this.g === g && this.b === b;\n      }\n      /**\n       * Multiplies in place each rgb value by scale\n       * @param scale - defines the scaling factor\n       * @returns the updated Color3\n       */\n      scale(scale) {\n          return new Color3(this.r * scale, this.g * scale, this.b * scale);\n      }\n      /**\n       * Multiplies the rgb values by scale and stores the result into \"result\"\n       * @param scale - defines the scaling factor\n       * @param result - defines the Color3 object where to store the result\n       * @returns the unmodified current Color3\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color3 values by a factor and add the result to a given Color3\n       * @param scale - defines the scale factor\n       * @param result - defines color to store the result into\n       * @returns the unmodified current Color3\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into\n       * @returns the original Color3\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$1.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$1.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$1.Scalar.Clamp(this.b, min, max);\n          return this;\n      }\n      /**\n       * Creates a new Color3 set with the added values of the current Color3 and of the given one\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      add(otherColor) {\n          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n      }\n      /**\n       * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      addToRef(otherColor, result) {\n          result.r = this.r + otherColor.r;\n          result.g = this.g + otherColor.g;\n          result.b = this.b + otherColor.b;\n          return this;\n      }\n      /**\n       * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      subtract(otherColor) {\n          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n      }\n      /**\n       * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      subtractToRef(otherColor, result) {\n          result.r = this.r - otherColor.r;\n          result.g = this.g - otherColor.g;\n          result.b = this.b - otherColor.b;\n          return this;\n      }\n      /**\n       * Copy the current object\n       * @returns a new Color3 copied the current one\n       */\n      clone() {\n          return new Color3(this.r, this.g, this.b);\n      }\n      /**\n       * Copies the rgb values from the source in the current Color3\n       * @param source - defines the source Color3 object\n       * @returns the updated Color3 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      copyFromFloats(r, g, b) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      set(r, g, b) {\n          return this.copyFromFloats(r, g, b);\n      }\n      /**\n       * Compute the Color3 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color3 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          return '#' + Scalar_1$1.Scalar.ToHex(intR) + Scalar_1$1.Scalar.ToHex(intG) + Scalar_1$1.Scalar.ToHex(intB);\n      }\n      /**\n       * Computes a new Color3 converted from the current one to linear space\n       * @returns a new Color3 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color3();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the linear space version\n       * @returns the unmodified Color3\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToLinearSpace);\n          return this;\n      }\n      /**\n       * Computes a new Color3 converted from the current one to gamma space\n       * @returns a new Color3 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color3();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the gamma space version\n       * @returns the unmodified Color3\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToGammaSpace);\n          return this;\n      }\n      /**\n       * Serializes Color3\n       */\n      toJSON() {\n          return {\n              r: this.r,\n              g: this.g,\n              b: this.b\n          };\n      }\n  }\n  Color3$1.Color3 = Color3;\n\n  var Curve3d = {};\n\n  Object.defineProperty(Curve3d, \"__esModule\", { value: true });\n  Curve3d.Curve3 = void 0;\n  const Vector3_1$2 = Vector3$1;\n  /**\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n   * A Curve3 is designed from a series of successive Vector3.\n   * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n   * @public\n   */\n  class Curve3 {\n      /**\n       * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n       * A Curve3 is designed from a series of successive Vector3.\n       * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n       * @param points - points which make up the curve\n       */\n      constructor(points) {\n          this._length = 0.0;\n          this._points = points;\n          this._length = this._computeLength(points);\n      }\n      /**\n       * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n       * @param v1 - (Vector3) the control point\n       * @param v2 - (Vector3) the end point of the Quadratic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateQuadraticBezier(v0, v1, v2, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 2 ? nbPoints : 3;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2) => {\n              const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Cubic Bezier\n       * @param v1 - (Vector3) the first control point\n       * @param v2 - (Vector3) the second control point\n       * @param v3 - (Vector3) the end point of the Cubic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateCubicBezier(v0, v1, v2, v3, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 3 ? nbPoints : 4;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2, val3) => {\n              const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n                  3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n                  3.0 * t * t * (1.0 - t) * val2 +\n                  t * t * t * val3;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n       * @param p1 - (Vector3) the origin point of the Hermite Spline\n       * @param t1 - (Vector3) the tangent vector at the origin point\n       * @param p2 - (Vector3) the end point of the Hermite Spline\n       * @param t2 - (Vector3) the tangent vector at the end point\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateHermiteSpline(p1, t1, p2, t2, nbPoints) {\n          const hermite = new Array();\n          const step = 1.0 / nbPoints;\n          for (let i = 0; i <= nbPoints; i++) {\n              hermite.push(Vector3_1$2.Vector3.Hermite(p1, t1, p2, t2, i * step));\n          }\n          return new Curve3(hermite);\n      }\n      /**\n       * Returns a Curve3 object along a CatmullRom Spline curve :\n       * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n       * @param nbPoints - (integer) the wanted number of points between each curve control points\n       * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n       * @returns the created Curve3\n       */\n      static CreateCatmullRomSpline(points, nbPoints, closed) {\n          const catmullRom = new Array();\n          const step = 1.0 / nbPoints;\n          let amount = 0.0;\n          if (closed) {\n              const pointsCount = points.length;\n              for (let i = 0; i < pointsCount; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n                      amount += step;\n                  }\n              }\n              catmullRom.push(catmullRom[0]);\n          }\n          else {\n              const totalPoints = new Array();\n              totalPoints.push(points[0].clone());\n              Array.prototype.push.apply(totalPoints, points);\n              totalPoints.push(points[points.length - 1].clone());\n              let i = 0;\n              for (i = 0; i < totalPoints.length - 3; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n                      amount += step;\n                  }\n              }\n              i--;\n              catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n          }\n          return new Curve3(catmullRom);\n      }\n      /**\n       * @returns the Curve3 stored array of successive Vector3\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * @returns the computed length (float) of the curve.\n       */\n      length() {\n          return this._length;\n      }\n      /**\n       * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n       * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n       * curveA and curveB keep unchanged.\n       * @param curve - the curve to continue from this curve\n       * @returns the newly constructed curve\n       */\n      continue(curve) {\n          const lastPoint = this._points[this._points.length - 1];\n          const continuedPoints = this._points.slice();\n          const curvePoints = curve.getPoints();\n          for (let i = 1; i < curvePoints.length; i++) {\n              continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n          }\n          const continuedCurve = new Curve3(continuedPoints);\n          return continuedCurve;\n      }\n      _computeLength(path) {\n          let l = 0;\n          for (let i = 1; i < path.length; i++) {\n              l += path[i].subtract(path[i - 1]).length();\n          }\n          return l;\n      }\n  }\n  Curve3d.Curve3 = Curve3;\n\n  var Furstum = {};\n\n  var Plane$1 = {};\n\n  Object.defineProperty(Plane$1, \"__esModule\", { value: true });\n  Plane$1.Plane = void 0;\n  const Vector3_1$1 = Vector3$1;\n  const Matrix_1 = Matrix$1;\n  const preallocatedVariables_1 = preallocatedVariables;\n  /**\n   * Represens a plane by the equation ax + by + cz + d = 0\n   * @public\n   */\n  class Plane {\n      /**\n       * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n       * @param a - a component of the plane\n       * @param b - b component of the plane\n       * @param c - c component of the plane\n       * @param d - d component of the plane\n       */\n      constructor(a, b, c, d) {\n          this.normal = new Vector3_1$1.Vector3(a, b, c);\n          this.d = d;\n      }\n      // Statics\n      /**\n       * Creates a plane from an  array\n       * @param array - the array to create a plane from\n       * @returns a new Plane from the given array.\n       */\n      static FromArray(array) {\n          return new Plane(array[0], array[1], array[2], array[3]);\n      }\n      /**\n       * Creates a plane from three points\n       * @param point1 - point used to create the plane\n       * @param point2 - point used to create the plane\n       * @param point3 - point used to create the plane\n       * @returns a new Plane defined by the three given points.\n       */\n      static FromPoints(point1, point2, point3) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          result.copyFromPoints(point1, point2, point3);\n          return result;\n      }\n      /**\n       * Creates a plane from an origin point and a normal\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @returns a new Plane the normal vector to this plane at the given origin point.\n       * Note : the vector \"normal\" is updated because normalized.\n       */\n      static FromPositionAndNormal(origin, normal) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          normal.normalize();\n          result.normal = normal;\n          result.d = -(normal.x * origin.x +\n              normal.y * origin.y +\n              normal.z * origin.z);\n          return result;\n      }\n      /**\n       * Calculates the distance from a plane and a point\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @param point - point to calculate distance to\n       * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n       */\n      static SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {\n          const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n          return Vector3_1$1.Vector3.Dot(point, normal) + d;\n      }\n      /**\n       * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n       */\n      asArray() {\n          return [this.normal.x, this.normal.y, this.normal.z, this.d];\n      }\n      // Methods\n      /**\n       * @returns a new plane copied from the current Plane.\n       */\n      clone() {\n          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n      }\n      /**\n       * @returns the string \"Plane\".\n       */\n      getClassName() {\n          return 'Plane';\n      }\n      /**\n       * @returns the Plane hash code.\n       */\n      getHashCode() {\n          let hash = this.normal.getHashCode();\n          hash = (hash * 397) ^ (this.d || 0);\n          return hash;\n      }\n      /**\n       * Normalize the current Plane in place.\n       * @returns the updated Plane.\n       */\n      normalize() {\n          const norm = Math.sqrt(this.normal.x * this.normal.x +\n              this.normal.y * this.normal.y +\n              this.normal.z * this.normal.z);\n          let magnitude = 0.0;\n          if (norm !== 0) {\n              magnitude = 1.0 / norm;\n          }\n          this.normal.x *= magnitude;\n          this.normal.y *= magnitude;\n          this.normal.z *= magnitude;\n          this.d *= magnitude;\n          return this;\n      }\n      /**\n       * Applies a transformation the plane and returns the result\n       * @param transformation - the transformation matrix to be applied to the plane\n       * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n       */\n      transform(transformation) {\n          const transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];\n          Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);\n          const m = transposedMatrix.m;\n          const x = this.normal.x;\n          const y = this.normal.y;\n          const z = this.normal.z;\n          const d = this.d;\n          const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n          const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n          const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n          const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n          return new Plane(normalX, normalY, normalZ, finalD);\n      }\n      /**\n       * Calcualtte the dot product between the point and the plane normal\n       * @param point - point to calculate the dot product with\n       * @returns the dot product (float) of the point coordinates and the plane normal.\n       */\n      dotCoordinate(point) {\n          return (this.normal.x * point.x +\n              this.normal.y * point.y +\n              this.normal.z * point.z +\n              this.d);\n      }\n      /**\n       * Updates the current Plane from the plane defined by the three given points.\n       * @param point1 - one of the points used to contruct the plane\n       * @param point2 - one of the points used to contruct the plane\n       * @param point3 - one of the points used to contruct the plane\n       * @returns the updated Plane.\n       */\n      copyFromPoints(point1, point2, point3) {\n          const x1 = point2.x - point1.x;\n          const y1 = point2.y - point1.y;\n          const z1 = point2.z - point1.z;\n          const x2 = point3.x - point1.x;\n          const y2 = point3.y - point1.y;\n          const z2 = point3.z - point1.z;\n          const yz = y1 * z2 - z1 * y2;\n          const xz = z1 * x2 - x1 * z2;\n          const xy = x1 * y2 - y1 * x2;\n          const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n          let invPyth;\n          if (pyth !== 0) {\n              invPyth = 1.0 / pyth;\n          }\n          else {\n              invPyth = 0.0;\n          }\n          this.normal.x = yz * invPyth;\n          this.normal.y = xz * invPyth;\n          this.normal.z = xy * invPyth;\n          this.d = -(this.normal.x * point1.x +\n              this.normal.y * point1.y +\n              this.normal.z * point1.z);\n          return this;\n      }\n      /**\n       * Checks if the plane is facing a given direction\n       * @param direction - the direction to check if the plane is facing\n       * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n       * @returns True is the vector \"direction\"  is the same side than the plane normal.\n       */\n      isFrontFacingTo(direction, epsilon) {\n          const dot = Vector3_1$1.Vector3.Dot(this.normal, direction);\n          return dot <= epsilon;\n      }\n      /**\n       * Calculates the distance to a point\n       * @param point - point to calculate distance to\n       * @returns the signed distance (float) from the given point to the Plane.\n       */\n      signedDistanceTo(point) {\n          return Vector3_1$1.Vector3.Dot(point, this.normal) + this.d;\n      }\n  }\n  Plane$1.Plane = Plane;\n\n  Object.defineProperty(Furstum, \"__esModule\", { value: true });\n  Furstum.Frustum = void 0;\n  const Plane_1 = Plane$1;\n  /**\n   * Reprasents a camera frustum\n   * @public\n   */\n  class Frustum {\n      /**\n       * Gets the planes representing the frustum\n       * @param transform - matrix to be applied to the returned planes\n       * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n       */\n      static GetPlanes(transform) {\n          const frustumPlanes = [];\n          for (let index = 0; index < 6; index++) {\n              frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));\n          }\n          Frustum.GetPlanesToRef(transform, frustumPlanes);\n          return frustumPlanes;\n      }\n      /**\n       * Gets the near frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetNearPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[2];\n          frustumPlane.normal.y = m[7] + m[6];\n          frustumPlane.normal.z = m[11] + m[10];\n          frustumPlane.d = m[15] + m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the far frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetFarPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[2];\n          frustumPlane.normal.y = m[7] - m[6];\n          frustumPlane.normal.z = m[11] - m[10];\n          frustumPlane.d = m[15] - m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the left frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetLeftPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[0];\n          frustumPlane.normal.y = m[7] + m[4];\n          frustumPlane.normal.z = m[11] + m[8];\n          frustumPlane.d = m[15] + m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the right frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetRightPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[0];\n          frustumPlane.normal.y = m[7] - m[4];\n          frustumPlane.normal.z = m[11] - m[8];\n          frustumPlane.d = m[15] - m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the top frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetTopPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[1];\n          frustumPlane.normal.y = m[7] - m[5];\n          frustumPlane.normal.z = m[11] - m[9];\n          frustumPlane.d = m[15] - m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the bottom frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetBottomPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[1];\n          frustumPlane.normal.y = m[7] + m[5];\n          frustumPlane.normal.z = m[11] + m[9];\n          frustumPlane.d = m[15] + m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n       * @param transform - transformation matrix to be applied to the resulting frustum planes\n       * @param frustumPlanes - the resuling frustum planes\n       */\n      static GetPlanesToRef(transform, frustumPlanes) {\n          // Near\n          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n          // Far\n          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n          // Left\n          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n          // Right\n          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n          // Top\n          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n          // Bottom\n          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n      }\n  }\n  Furstum.Frustum = Frustum;\n\n  var Path2d = {};\n\n  Object.defineProperty(Path2d, \"__esModule\", { value: true });\n  Path2d.Path2 = void 0;\n  const Vector2_1 = Vector2$1;\n  const Arc2_1 = Arc2$1;\n  const types_1$1 = types;\n  /**\n   * Represents a 2D path made up of multiple 2D points\n   * @public\n   */\n  class Path2 {\n      /**\n       * Creates a Path2 object from the starting 2D coordinates x and y.\n       * @param x - the starting points x value\n       * @param y - the starting points y value\n       */\n      constructor(x, y) {\n          /**\n           * If the path start and end point are the same\n           */\n          this.closed = false;\n          this._points = new Array();\n          this._length = 0.0;\n          this._points.push(new Vector2_1.Vector2(x, y));\n      }\n      /**\n       * Creates a new path starting from an x and y position\n       * @param x - starting x value\n       * @param y - starting y value\n       * @returns a new Path2 starting at the coordinates (x, y).\n       */\n      static StartingAt(x, y) {\n          return new Path2(x, y);\n      }\n      /**\n       * Adds a new segment until the given coordinates (x, y) to the current Path2.\n       * @param x - the added points x value\n       * @param y - the added points y value\n       * @returns the updated Path2.\n       */\n      addLineTo(x, y) {\n          if (this.closed) {\n              return this;\n          }\n          const newPoint = new Vector2_1.Vector2(x, y);\n          const previousPoint = this._points[this._points.length - 1];\n          this._points.push(newPoint);\n          this._length += newPoint.subtract(previousPoint).length();\n          return this;\n      }\n      /**\n       * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n       * @param midX - middle point x value\n       * @param midY - middle point y value\n       * @param endX - end point x value\n       * @param endY - end point y value\n       * @param numberOfSegments - (default: 36)\n       * @returns the updated Path2.\n       */\n      addArcTo(midX, midY, endX, endY, numberOfSegments = 36) {\n          if (this.closed) {\n              return this;\n          }\n          const startPoint = this._points[this._points.length - 1];\n          const midPoint = new Vector2_1.Vector2(midX, midY);\n          const endPoint = new Vector2_1.Vector2(endX, endY);\n          const arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);\n          let increment = arc.angle.radians() / numberOfSegments;\n          if (arc.orientation === types_1$1.Orientation.CW) {\n              increment *= -1;\n          }\n          let currentAngle = arc.startAngle.radians() + increment;\n          for (let i = 0; i < numberOfSegments; i++) {\n              const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n              const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n              this.addLineTo(x, y);\n              currentAngle += increment;\n          }\n          return this;\n      }\n      /**\n       * Closes the Path2.\n       * @returns the Path2.\n       */\n      close() {\n          this.closed = true;\n          return this;\n      }\n      /**\n       * Gets the sum of the distance between each sequential point in the path\n       * @returns the Path2 total length (float).\n       */\n      length() {\n          let result = this._length;\n          if (!this.closed) {\n              const lastPoint = this._points[this._points.length - 1];\n              const firstPoint = this._points[0];\n              result += firstPoint.subtract(lastPoint).length();\n          }\n          return result;\n      }\n      /**\n       * Gets the points which construct the path\n       * @returns the Path2 internal array of points.\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * Retreives the point at the distance aways from the starting point\n       * @param normalizedLengthPosition - the length along the path to retreive the point from\n       * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n       */\n      getPointAtLengthPosition(normalizedLengthPosition) {\n          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n              return Vector2_1.Vector2.Zero();\n          }\n          const lengthPosition = normalizedLengthPosition * this.length();\n          let previousOffset = 0;\n          for (let i = 0; i < this._points.length; i++) {\n              const j = (i + 1) % this._points.length;\n              const a = this._points[i];\n              const b = this._points[j];\n              const bToA = b.subtract(a);\n              const nextOffset = bToA.length() + previousOffset;\n              if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n                  const dir = bToA.normalize();\n                  const localOffset = lengthPosition - previousOffset;\n                  return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n              }\n              previousOffset = nextOffset;\n          }\n          return Vector2_1.Vector2.Zero();\n      }\n  }\n  Path2d.Path2 = Path2;\n\n  var Path3d = {};\n\n  Object.defineProperty(Path3d, \"__esModule\", { value: true });\n  Path3d.Path3D = void 0;\n  const Vector3_1 = Vector3$1;\n  const types_1 = types;\n  const Scalar_1 = Scalar$1;\n  /**\n   * Represents a 3D path made up of multiple 3D points\n   * @public\n   */\n  class Path3D {\n      /**\n       * new Path3D(path, normal, raw)\n       * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n       * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n       * @param path - an array of Vector3, the curve axis of the Path3D\n       * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n       * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\n       */\n      constructor(\n      /**\n       * an array of Vector3, the curve axis of the Path3D\n       */\n      path, firstNormal = null, raw) {\n          this.path = path;\n          this._curve = new Array();\n          this._distances = new Array();\n          this._tangents = new Array();\n          this._normals = new Array();\n          this._binormals = new Array();\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p] = path[p].clone(); // hard copy\n          }\n          this._raw = raw || false;\n          this._compute(firstNormal);\n      }\n      /**\n       * Returns the Path3D array of successive Vector3 designing its curve.\n       * @returns the Path3D array of successive Vector3 designing its curve.\n       */\n      getCurve() {\n          return this._curve;\n      }\n      /**\n       * Returns an array populated with tangent vectors on each Path3D curve point.\n       * @returns an array populated with tangent vectors on each Path3D curve point.\n       */\n      getTangents() {\n          return this._tangents;\n      }\n      /**\n       * Returns an array populated with normal vectors on each Path3D curve point.\n       * @returns an array populated with normal vectors on each Path3D curve point.\n       */\n      getNormals() {\n          return this._normals;\n      }\n      /**\n       * Returns an array populated with binormal vectors on each Path3D curve point.\n       * @returns an array populated with binormal vectors on each Path3D curve point.\n       */\n      getBinormals() {\n          return this._binormals;\n      }\n      /**\n       * Returns an array populated with distances (float) of the i-th point from the first curve point.\n       * @returns an array populated with distances (float) of the i-th point from the first curve point.\n       */\n      getDistances() {\n          return this._distances;\n      }\n      /**\n       * Forces the Path3D tangent, normal, binormal and distance recomputation.\n       * @param path - path which all values are copied into the curves points\n       * @param firstNormal - which should be projected onto the curve\n       * @returns the same object updated.\n       */\n      update(path, firstNormal = null) {\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p].x = path[p].x;\n              this._curve[p].y = path[p].y;\n              this._curve[p].z = path[p].z;\n          }\n          this._compute(firstNormal);\n          return this;\n      }\n      // private function compute() : computes tangents, normals and binormals\n      _compute(firstNormal) {\n          const l = this._curve.length;\n          // first and last tangents\n          this._tangents[0] = this._getFirstNonNullVector(0);\n          if (!this._raw) {\n              this._tangents[0].normalize();\n          }\n          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n          if (!this._raw) {\n              this._tangents[l - 1].normalize();\n          }\n          // normals and binormals at first point : arbitrary vector with _normalVector()\n          const tg0 = this._tangents[0];\n          const pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\n          this._normals[0] = pp0;\n          if (!this._raw) {\n              this._normals[0].normalize();\n          }\n          this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);\n          if (!this._raw) {\n              this._binormals[0].normalize();\n          }\n          this._distances[0] = 0.0;\n          // normals and binormals : next points\n          let prev; // previous vector (segment)\n          let cur; // current vector (segment)\n          let curTang; // current tangent\n          // previous normal\n          let prevBinor; // previous binormal\n          for (let i = 1; i < l; i++) {\n              // tangents\n              prev = this._getLastNonNullVector(i);\n              if (i < l - 1) {\n                  cur = this._getFirstNonNullVector(i);\n                  this._tangents[i] = prev.add(cur);\n                  this._tangents[i].normalize();\n              }\n              this._distances[i] = this._distances[i - 1] + prev.length();\n              // normals and binormals\n              // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n              curTang = this._tangents[i];\n              prevBinor = this._binormals[i - 1];\n              this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);\n              if (!this._raw) {\n                  this._normals[i].normalize();\n              }\n              this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);\n              if (!this._raw) {\n                  this._binormals[i].normalize();\n              }\n          }\n      }\n      // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n      _getFirstNonNullVector(index) {\n          let i = 1;\n          let nNVector = this._curve[index + i].subtract(this._curve[index]);\n          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n              i++;\n              nNVector = this._curve[index + i].subtract(this._curve[index]);\n          }\n          return nNVector;\n      }\n      // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n      _getLastNonNullVector(index) {\n          let i = 1;\n          let nLVector = this._curve[index].subtract(this._curve[index - i]);\n          while (nLVector.length() === 0 && index > i + 1) {\n              i++;\n              nLVector = this._curve[index].subtract(this._curve[index - i]);\n          }\n          return nLVector;\n      }\n      // private function normalVector(v0, vt, va) :\n      // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n      // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n      _normalVector(v0, vt, va) {\n          let normal0;\n          let tgl = vt.length();\n          if (tgl === 0.0) {\n              tgl = 1.0;\n          }\n          if (va === undefined || va === null) {\n              let point;\n              if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {\n                  // search for a point in the plane\n                  point = new Vector3_1.Vector3(0.0, -1.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n              }\n              else {\n                  point = Vector3_1.Vector3.Zero();\n              }\n              normal0 = Vector3_1.Vector3.Cross(vt, point);\n          }\n          else {\n              normal0 = Vector3_1.Vector3.Cross(vt, va);\n              Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);\n          }\n          normal0.normalize();\n          return normal0;\n      }\n  }\n  Path3d.Path3D = Path3D;\n\n  var Size$1 = {};\n\n  Object.defineProperty(Size$1, \"__esModule\", { value: true });\n  Size$1.Size = void 0;\n  /**\n   * Size containing widht and height\n   * @public\n   */\n  class Size {\n      /**\n       * Creates a Size object from the given width and height (floats).\n       * @param width - width of the new size\n       * @param height - height of the new size\n       */\n      constructor(width, height) {\n          this.width = width;\n          this.height = height;\n      }\n      /**\n       * The surface of the Size : width * height (float).\n       */\n      get surface() {\n          return this.width * this.height;\n      }\n      /**\n       * Create a new size of zero\n       * @returns a new Size set to (0.0, 0.0)\n       */\n      static Zero() {\n          return new Size(0.0, 0.0);\n      }\n      /**\n       * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       * @param start - starting size to lerp between\n       * @param end - end size to lerp between\n       * @param amount - amount to lerp between the start and end values\n       * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       */\n      static Lerp(start, end, amount) {\n          const w = start.width + (end.width - start.width) * amount;\n          const h = start.height + (end.height - start.height) * amount;\n          return new Size(w, h);\n      }\n      /**\n       * Returns a string with the Size width and height\n       * @returns a string with the Size width and height\n       */\n      toString() {\n          return `{W: ${this.width}, H: ${this.height}}`;\n      }\n      /**\n       * \"Size\"\n       * @returns the string \"Size\"\n       */\n      getClassName() {\n          return 'Size';\n      }\n      /**\n       * Returns the Size hash code.\n       * @returns a hash code for a unique width and height\n       */\n      getHashCode() {\n          let hash = this.width || 0;\n          hash = (hash * 397) ^ (this.height || 0);\n          return hash;\n      }\n      /**\n       * Updates the current size from the given one.\n       * @param src - the given size\n       */\n      copyFrom(src) {\n          this.width = src.width;\n          this.height = src.height;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width of the new size\n       * @param height - height of the new size\n       * @returns the updated Size.\n       */\n      copyFromFloats(width, height) {\n          this.width = width;\n          this.height = height;\n          return this;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width to set\n       * @param height - height to set\n       * @returns the updated Size.\n       */\n      set(width, height) {\n          return this.copyFromFloats(width, height);\n      }\n      /**\n       * Multiplies the width and height by numbers\n       * @param w - factor to multiple the width by\n       * @param h - factor to multiple the height by\n       * @returns a new Size set with the multiplication result of the current Size and the given floats.\n       */\n      multiplyByFloats(w, h) {\n          return new Size(this.width * w, this.height * h);\n      }\n      /**\n       * Clones the size\n       * @returns a new Size copied from the given one.\n       */\n      clone() {\n          return new Size(this.width, this.height);\n      }\n      /**\n       * True if the current Size and the given one width and height are strictly equal.\n       * @param other - the other size to compare against\n       * @returns True if the current Size and the given one width and height are strictly equal.\n       */\n      equals(other) {\n          if (!other) {\n              return false;\n          }\n          return this.width === other.width && this.height === other.height;\n      }\n      /**\n       * Sums the width and height of two sizes\n       * @param otherSize - size to add to this size\n       * @returns a new Size set as the addition result of the current Size and the given one.\n       */\n      add(otherSize) {\n          const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n          return r;\n      }\n      /**\n       * Subtracts the width and height of two\n       * @param otherSize - size to subtract to this size\n       * @returns a new Size set as the subtraction result of  the given one from the current Size.\n       */\n      subtract(otherSize) {\n          const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n          return r;\n      }\n  }\n  Size$1.Size = Size;\n\n  (function (exports) {\n  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n  }) : (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      o[k2] = m[k];\n  }));\n  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n      for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  };\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  __exportStar(types, exports);\n  __exportStar(preallocatedVariables, exports);\n  __exportStar(Angle$1, exports);\n  __exportStar(Arc2$1, exports);\n  __exportStar(Axis$1, exports);\n  __exportStar(BezierCurve$1, exports);\n  __exportStar(Color3$1, exports);\n  __exportStar(Color4$1, exports);\n  __exportStar(Curve3d, exports);\n  __exportStar(Furstum, exports);\n  __exportStar(Matrix$1, exports);\n  __exportStar(Path2d, exports);\n  __exportStar(Path3d, exports);\n  __exportStar(Plane$1, exports);\n  __exportStar(Quaternion$1, exports);\n  __exportStar(Scalar$1, exports);\n  __exportStar(Size$1, exports);\n  __exportStar(Vector2$1, exports);\n  __exportStar(Vector3$1, exports);\n  __exportStar(Vector4$1, exports);\n  __exportStar(dist, exports);\n\n  }(dist));\n\n  var defaultParams = {\r\n      looping: true,\r\n      speed: 1.0,\r\n      weight: 1.0,\r\n      layer: 0\r\n  };\r\n  /**\r\n   * @public\r\n   */\r\n  var AnimationState = /** @class */ (function (_super) {\r\n      __extends(AnimationState, _super);\r\n      function AnimationState(clip, params) {\r\n          if (params === void 0) { params = defaultParams; }\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.isAnimationClip = true;\r\n          /**\r\n           * Does the animation loop?, default: true\r\n           */\r\n          _this.looping = defaultParams.looping;\r\n          /**\r\n           * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\r\n           */\r\n          _this.weight = defaultParams.weight;\r\n          /**\r\n           * Is the animation playing? default: true\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Does any anyone asked to reset the animation? default: false\r\n           */\r\n          _this.shouldReset = false;\r\n          /**\r\n           * The animation speed\r\n           */\r\n          _this.speed = defaultParams.speed;\r\n          // @internal\r\n          _this.name = newId('AnimClip');\r\n          /**\r\n           * Layering allows you to have two or more levels of animation on an object's parameters at the same time\r\n           */\r\n          _this.layer = defaultParams.layer;\r\n          _this.clip = clip;\r\n          _this.setParams(__assign({}, params));\r\n          return _this;\r\n      }\r\n      /**\r\n       * Sets the clip parameters\r\n       */\r\n      AnimationState.prototype.setParams = function (params) {\r\n          this.looping = params.looping !== undefined ? params.looping : this.looping;\r\n          this.speed = params.speed || this.speed;\r\n          this.weight = params.weight || this.weight;\r\n          this.layer = params.layer || this.layer;\r\n          return this;\r\n      };\r\n      AnimationState.prototype.toJSON = function () {\r\n          var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n          if (this.shouldReset) {\r\n              this.shouldReset = false;\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      AnimationState.prototype.play = function (reset) {\r\n          var _a;\r\n          if (reset === void 0) { reset = false; }\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.play(this, reset);\r\n      };\r\n      /**\r\n       * Pauses the animation\r\n       */\r\n      AnimationState.prototype.pause = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.pause(this);\r\n      };\r\n      /**\r\n       * Resets the animation state to the frame 0\r\n       */\r\n      AnimationState.prototype.reset = function () {\r\n          this.shouldReset = true;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation\r\n       */\r\n      AnimationState.prototype.stop = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.stop(this);\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"clip\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"looping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"weight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"shouldReset\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"speed\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"name\", void 0);\r\n      return AnimationState;\r\n  }(ObservableComponent));\n\n  /** @public */\r\n  exports.InputEventType = void 0;\r\n  (function (InputEventType) {\r\n      InputEventType[InputEventType[\"DOWN\"] = 0] = \"DOWN\";\r\n      InputEventType[InputEventType[\"UP\"] = 1] = \"UP\";\r\n  })(exports.InputEventType || (exports.InputEventType = {}));\r\n  /** @public */\r\n  exports.CameraMode = void 0;\r\n  (function (CameraMode) {\r\n      CameraMode[CameraMode[\"FirstPerson\"] = 0] = \"FirstPerson\";\r\n      CameraMode[CameraMode[\"ThirdPerson\"] = 1] = \"ThirdPerson\";\r\n      // @internal\r\n      CameraMode[CameraMode[\"BuildingToolGodMode\"] = 2] = \"BuildingToolGodMode\";\r\n  })(exports.CameraMode || (exports.CameraMode = {}));\r\n  // @internal\r\n  var AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE';\r\n  /** @public */\r\n  exports.LandRole = void 0;\r\n  (function (LandRole) {\r\n      LandRole[\"OWNER\"] = \"owner\";\r\n      LandRole[\"OPERATOR\"] = \"operator\";\r\n  })(exports.LandRole || (exports.LandRole = {}));\n\n  /**\r\n   * @public\r\n   */\r\n  exports.ActionButton = void 0;\r\n  (function (ActionButton) {\r\n      ActionButton[\"POINTER\"] = \"POINTER\";\r\n      ActionButton[\"PRIMARY\"] = \"PRIMARY\";\r\n      ActionButton[\"SECONDARY\"] = \"SECONDARY\";\r\n      ActionButton[\"ANY\"] = \"ANY\";\r\n      ActionButton[\"FORWARD\"] = \"FORWARD\";\r\n      ActionButton[\"BACKWARD\"] = \"BACKWARD\";\r\n      ActionButton[\"RIGHT\"] = \"RIGHT\";\r\n      ActionButton[\"LEFT\"] = \"LEFT\";\r\n      ActionButton[\"JUMP\"] = \"JUMP\";\r\n      ActionButton[\"WALK\"] = \"WALK\";\r\n      ActionButton[\"ACTION_3\"] = \"ACTION_3\";\r\n      ActionButton[\"ACTION_4\"] = \"ACTION_4\";\r\n      ActionButton[\"ACTION_5\"] = \"ACTION_5\";\r\n      ActionButton[\"ACTION_6\"] = \"ACTION_6\";\r\n  })(exports.ActionButton || (exports.ActionButton = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventComponent = /** @class */ (function () {\r\n      function PointerEventComponent(callback) {\r\n          this.callback = callback;\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          Input.ensureInstance();\r\n      }\r\n      return PointerEventComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerDown = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerDown, _super);\r\n      function GlobalPointerDown() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerDown = __decorate([\r\n          Component('pointerDown')\r\n      ], GlobalPointerDown);\r\n      return GlobalPointerDown;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerUp = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerUp, _super);\r\n      function GlobalPointerUp() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerUp = __decorate([\r\n          Component('pointerUp')\r\n      ], GlobalPointerUp);\r\n      return GlobalPointerUp;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Subscription = /** @class */ (function () {\r\n      function Subscription(fn, useRaycast) {\r\n          this.fn = fn;\r\n          this.useRaycast = useRaycast;\r\n      }\r\n      return Subscription;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var Input = /** @class */ (function () {\r\n      function Input() {\r\n          // @internal\r\n          this.buttonIdMapping = [\r\n              exports.ActionButton.POINTER,\r\n              exports.ActionButton.PRIMARY,\r\n              exports.ActionButton.SECONDARY,\r\n              exports.ActionButton.ANY,\r\n              exports.ActionButton.FORWARD,\r\n              exports.ActionButton.BACKWARD,\r\n              exports.ActionButton.RIGHT,\r\n              exports.ActionButton.LEFT,\r\n              exports.ActionButton.JUMP,\r\n              exports.ActionButton.WALK,\r\n              exports.ActionButton.ACTION_3,\r\n              exports.ActionButton.ACTION_4,\r\n              exports.ActionButton.ACTION_5,\r\n              exports.ActionButton.ACTION_6\r\n          ];\r\n          // @internal\r\n          this.subscriptions = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: [], BUTTON_UP: [] }, _a)));\r\n          }, {});\r\n          this.internalState = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: false }, _a)));\r\n          }, {});\r\n      }\r\n      Object.defineProperty(Input, \"instance\", {\r\n          get: function () {\r\n              Input.ensureInstance();\r\n              return Input._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Input.ensureInstance = function () {\r\n          if (!Input._instance) {\r\n              Input._instance = new Input();\r\n          }\r\n      };\r\n      /**\r\n       * Allows to know if a button is pressed\r\n       *\r\n       * Returns true if the button is pressed\r\n       * @param buttonId - The id of the button.\r\n       */\r\n      Input.prototype.isButtonPressed = function (buttonId) {\r\n          return this.internalState[buttonId];\r\n      };\r\n      /**\r\n       * Subscribes to an input event and triggers the provided callback.\r\n       *\r\n       * Returns a function that can be called to remove the subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param useRaycast - Enables getting raycast information.\r\n       * @param fn - A callback function to be called when the event is triggered.\r\n       */\r\n      Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\r\n          var _this = this;\r\n          this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\r\n          return function () {\r\n              _this.unsubscribe(eventName, buttonId, fn);\r\n          };\r\n      };\r\n      /**\r\n       * Removes an existing input event subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param fn - The callback function used when subscribing to the event.\r\n       */\r\n      Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\r\n          var index = this.getSubscriptionId(eventName, buttonId, fn);\r\n          if (index > -1) {\r\n              return this.subscriptions[buttonId][eventName].splice(index, 1);\r\n          }\r\n          return false;\r\n      };\r\n      Input.prototype.handlePointerEvent = function (data) {\r\n          var button = this.getPointerById(data.buttonId);\r\n          if (!button) {\r\n              return;\r\n          }\r\n          var eventResult = __assign(__assign({}, data), { button: button, direction: new dist.Vector3().copyFrom(data.direction), origin: new dist.Vector3().copyFrom(data.origin), hit: undefined });\r\n          var hit = data.hit\r\n              ? __assign(__assign({}, data.hit), { hitPoint: new dist.Vector3().copyFrom(data.hit.hitPoint), normal: new dist.Vector3().copyFrom(data.hit.normal), worldNormal: new dist.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\r\n          if (data.type === exports.InputEventType.DOWN) {\r\n              this.internalState[button].BUTTON_DOWN = true;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_DOWN'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.internalState[button].BUTTON_DOWN = false;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_UP'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\r\n          for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\r\n              if (this.subscriptions[buttonId][eventName][i].fn === fn) {\r\n                  return i;\r\n              }\r\n          }\r\n          return -1;\r\n      };\r\n      Input.prototype.getPointerById = function (id) {\r\n          if (id < 0 || id >= this.buttonIdMapping.length) {\r\n              return null;\r\n          }\r\n          var actionButton = this.buttonIdMapping[id];\r\n          if (actionButton === exports.ActionButton.ANY) {\r\n              return null;\r\n          }\r\n          return actionButton;\r\n      };\r\n      return Input;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.CLASS_ID = void 0;\r\n  (function (CLASS_ID) {\r\n      CLASS_ID[CLASS_ID[\"TRANSFORM\"] = 1] = \"TRANSFORM\";\r\n      CLASS_ID[CLASS_ID[\"UUID_CALLBACK\"] = 8] = \"UUID_CALLBACK\";\r\n      CLASS_ID[CLASS_ID[\"BOX_SHAPE\"] = 16] = \"BOX_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"SPHERE_SHAPE\"] = 17] = \"SPHERE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"PLANE_SHAPE\"] = 18] = \"PLANE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CONE_SHAPE\"] = 19] = \"CONE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CYLINDER_SHAPE\"] = 20] = \"CYLINDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"TEXT_SHAPE\"] = 21] = \"TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"NFT_SHAPE\"] = 22] = \"NFT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_WORLD_SPACE_SHAPE\"] = 23] = \"UI_WORLD_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SCREEN_SPACE_SHAPE\"] = 24] = \"UI_SCREEN_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_RECT\"] = 25] = \"UI_CONTAINER_RECT\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_STACK\"] = 26] = \"UI_CONTAINER_STACK\";\r\n      CLASS_ID[CLASS_ID[\"UI_TEXT_SHAPE\"] = 27] = \"UI_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_INPUT_TEXT_SHAPE\"] = 28] = \"UI_INPUT_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_IMAGE_SHAPE\"] = 29] = \"UI_IMAGE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SLIDER_SHAPE\"] = 30] = \"UI_SLIDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CIRCLE_SHAPE\"] = 31] = \"CIRCLE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BILLBOARD\"] = 32] = \"BILLBOARD\";\r\n      CLASS_ID[CLASS_ID[\"ANIMATION\"] = 33] = \"ANIMATION\";\r\n      CLASS_ID[CLASS_ID[\"FONT\"] = 34] = \"FONT\";\r\n      CLASS_ID[CLASS_ID[\"UI_FULLSCREEN_SHAPE\"] = 40] = \"UI_FULLSCREEN_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_BUTTON_SHAPE\"] = 41] = \"UI_BUTTON_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"GLTF_SHAPE\"] = 54] = \"GLTF_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"OBJ_SHAPE\"] = 55] = \"OBJ_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_SHAPE\"] = 56] = \"AVATAR_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BASIC_MATERIAL\"] = 64] = \"BASIC_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"PBR_MATERIAL\"] = 65] = \"PBR_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"HIGHLIGHT_ENTITY\"] = 66] = \"HIGHLIGHT_ENTITY\";\r\n      /** @deprecated Sound has been deprecataed */\r\n      CLASS_ID[CLASS_ID[\"SOUND\"] = 67] = \"SOUND\";\r\n      CLASS_ID[CLASS_ID[\"TEXTURE\"] = 68] = \"TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_CLIP\"] = 70] = \"VIDEO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_TEXTURE\"] = 71] = \"VIDEO_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_TEXTURE\"] = 72] = \"AVATAR_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_CLIP\"] = 200] = \"AUDIO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_SOURCE\"] = 201] = \"AUDIO_SOURCE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_STREAM\"] = 202] = \"AUDIO_STREAM\";\r\n      CLASS_ID[CLASS_ID[\"GIZMOS\"] = 203] = \"GIZMOS\";\r\n      CLASS_ID[CLASS_ID[\"SMART_ITEM\"] = 204] = \"SMART_ITEM\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_MODIFIER_AREA\"] = 205] = \"AVATAR_MODIFIER_AREA\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_ATTACH\"] = 206] = \"AVATAR_ATTACH\";\r\n      CLASS_ID[CLASS_ID[\"CAMERA_MODE_AREA\"] = 207] = \"CAMERA_MODE_AREA\";\r\n      // For state sync only\r\n      CLASS_ID[CLASS_ID[\"NAME\"] = 300] = \"NAME\";\r\n      CLASS_ID[CLASS_ID[\"LOCKED_ON_EDIT\"] = 301] = \"LOCKED_ON_EDIT\";\r\n      CLASS_ID[CLASS_ID[\"VISIBLE_ON_EDIT\"] = 302] = \"VISIBLE_ON_EDIT\";\r\n  })(exports.CLASS_ID || (exports.CLASS_ID = {}));\r\n  /** @public */\r\n  exports.AvatarModifiers = void 0;\r\n  (function (AvatarModifiers) {\r\n      AvatarModifiers[\"HIDE_AVATARS\"] = \"HIDE_AVATARS\";\r\n      AvatarModifiers[\"DISABLE_PASSPORTS\"] = \"DISABLE_PASSPORTS\";\r\n  })(exports.AvatarModifiers || (exports.AvatarModifiers = {}));\r\n  /**\r\n   * Define an area where avatars can be modified in some way\r\n   * @public\r\n   */\r\n  var AvatarModifierArea = /** @class */ (function (_super) {\r\n      __extends(AvatarModifierArea, _super);\r\n      function AvatarModifierArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.modifiers = args.modifiers;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarModifierArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarModifierArea.prototype, \"modifiers\", void 0);\r\n      AvatarModifierArea = __decorate([\r\n          Component('engine.avatarModifierArea', exports.CLASS_ID.AVATAR_MODIFIER_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AvatarModifierArea);\r\n      return AvatarModifierArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Transform = /** @class */ (function (_super) {\r\n      __extends(Transform, _super);\r\n      function Transform(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.position = args.position || dist.Vector3.Zero();\r\n          _this.rotation = args.rotation || dist.Quaternion.Identity;\r\n          _this.scale = args.scale || new dist.Vector3(1, 1, 1);\r\n          return _this;\r\n      }\r\n      Object.defineProperty(Transform.prototype, \"eulerAngles\", {\r\n          /**\r\n           * @public\r\n           * The rotation as Euler angles in degrees.\r\n           */\r\n          get: function () {\r\n              return this.rotation.eulerAngles;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * @public\r\n       * Rotates the transform so the forward vector points at target's current position.\r\n       */\r\n      Transform.prototype.lookAt = function (target, worldUp) {\r\n          if (worldUp === void 0) { worldUp = dist.MathTmp.staticUp; }\r\n          var result = new dist.Matrix();\r\n          dist.Matrix.LookAtLHToRef(this.position, target, worldUp, result);\r\n          result.invert();\r\n          dist.Quaternion.FromRotationMatrixToRef(result, this.rotation);\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Applies a rotation of euler angles around the x, y and z axis.\r\n       */\r\n      Transform.prototype.rotate = function (axis, angle) {\r\n          this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Moves the transform in the direction and distance of translation.\r\n       */\r\n      Transform.prototype.translate = function (vec) {\r\n          this.position.addInPlace(vec);\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Quaternion)\r\n      ], Transform.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"scale\", void 0);\r\n      Transform = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.TRANSFORM),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], Transform);\r\n      return Transform;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.AttachToAvatarAnchorPointId = void 0;\r\n  (function (AttachToAvatarAnchorPointId) {\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"Position\"] = 0] = \"Position\";\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"NameTag\"] = 1] = \"NameTag\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"LeftHand\"] = 2] = \"LeftHand\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"RightHand\"] = 3] = \"RightHand\";\r\n  })(exports.AttachToAvatarAnchorPointId || (exports.AttachToAvatarAnchorPointId = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var AttachToAvatar = /** @class */ (function (_super) {\r\n      __extends(AttachToAvatar, _super);\r\n      function AttachToAvatar(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.avatarId = args.avatarId || '';\r\n          _this.anchorPointId =\r\n              args.anchorPointId || exports.AttachToAvatarAnchorPointId.Position;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AttachToAvatar.prototype, \"anchorPointId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarSceneId\", void 0);\r\n      AttachToAvatar = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.AVATAR_ATTACH),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AttachToAvatar);\r\n      return AttachToAvatar;\r\n  }(ObservableComponent));\r\n  /**\r\n   * Billboard defines a behavior that makes the entity face the camera in any moment.\r\n   * @public\r\n   */\r\n  var Billboard = /** @class */ (function (_super) {\r\n      __extends(Billboard, _super);\r\n      function Billboard(x, y, z) {\r\n          if (x === void 0) { x = true; }\r\n          if (y === void 0) { y = true; }\r\n          if (z === void 0) { z = true; }\r\n          var _this = _super.call(this) || this;\r\n          _this.x = true;\r\n          _this.y = true;\r\n          _this.z = true;\r\n          _this.x = x;\r\n          _this.y = y;\r\n          _this.z = z;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"x\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"y\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"z\", void 0);\r\n      Billboard = __decorate([\r\n          Component('engine.billboard', exports.CLASS_ID.BILLBOARD),\r\n          __metadata(\"design:paramtypes\", [Boolean, Boolean, Boolean])\r\n      ], Billboard);\r\n      return Billboard;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Shape = /** @class */ (function (_super) {\r\n      __extends(Shape, _super);\r\n      function Shape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Set to true to turn on the collider for the entity.\r\n           */\r\n          _this.withCollisions = true;\r\n          /**\r\n           * Set to true to turn on the PointerEvents blocking for the entity.\r\n           */\r\n          _this.isPointerBlocker = true;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.visible = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"withCollisions\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"isPointerBlocker\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"visible\", void 0);\r\n      return Shape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BoxShape = /** @class */ (function (_super) {\r\n      __extends(BoxShape, _super);\r\n      function BoxShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], BoxShape.prototype, \"uvs\", void 0);\r\n      BoxShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.BOX_SHAPE)\r\n      ], BoxShape);\r\n      return BoxShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var SphereShape = /** @class */ (function (_super) {\r\n      __extends(SphereShape, _super);\r\n      function SphereShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SphereShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.SPHERE_SHAPE)\r\n      ], SphereShape);\r\n      return SphereShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CircleShape = /** @class */ (function (_super) {\r\n      __extends(CircleShape, _super);\r\n      function CircleShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"segments\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"arc\", void 0);\r\n      CircleShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CIRCLE_SHAPE)\r\n      ], CircleShape);\r\n      return CircleShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var PlaneShape = /** @class */ (function (_super) {\r\n      __extends(PlaneShape, _super);\r\n      function PlaneShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Sets the horizontal length of the plane. Defaults to 1.\r\n           */\r\n          _this.width = 1;\r\n          /**\r\n           * Sets the vertical length of the plane. Defaults to 1.\r\n           */\r\n          _this.height = 1;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], PlaneShape.prototype, \"uvs\", void 0);\r\n      PlaneShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.PLANE_SHAPE)\r\n      ], PlaneShape);\r\n      return PlaneShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var ConeShape = /** @class */ (function (_super) {\r\n      __extends(ConeShape, _super);\r\n      function ConeShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of a truncated cone. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 0;\r\n          /**\r\n           * The radius of the base of the cone. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cone height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cone sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cone around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], ConeShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], ConeShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"arc\", void 0);\r\n      ConeShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CONE_SHAPE)\r\n      ], ConeShape);\r\n      return ConeShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CylinderShape = /** @class */ (function (_super) {\r\n      __extends(CylinderShape, _super);\r\n      function CylinderShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of the cylinder. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 1;\r\n          /**\r\n           * The radius of the base of the cylinder. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cylinder sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], CylinderShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CylinderShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"arc\", void 0);\r\n      CylinderShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CYLINDER_SHAPE)\r\n      ], CylinderShape);\r\n      return CylinderShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var GLTFShape = /** @class */ (function (_super) {\r\n      __extends(GLTFShape, _super);\r\n      function GLTFShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], GLTFShape.prototype, \"src\", void 0);\r\n      GLTFShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.GLTF_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], GLTFShape);\r\n      return GLTFShape;\r\n  }(Shape));\r\n  /** @public */\r\n  exports.PictureFrameStyle = void 0;\r\n  (function (PictureFrameStyle) {\r\n      PictureFrameStyle[PictureFrameStyle[\"Classic\"] = 0] = \"Classic\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Baroque_Ornament\"] = 1] = \"Baroque_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Diamond_Ornament\"] = 2] = \"Diamond_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Wide\"] = 3] = \"Minimal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Grey\"] = 4] = \"Minimal_Grey\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Blocky\"] = 5] = \"Blocky\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Edges\"] = 6] = \"Gold_Edges\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Carved\"] = 7] = \"Gold_Carved\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Wide\"] = 8] = \"Gold_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Rounded\"] = 9] = \"Gold_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Medium\"] = 10] = \"Metal_Medium\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Wide\"] = 11] = \"Metal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Slim\"] = 12] = \"Metal_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Rounded\"] = 13] = \"Metal_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Pins\"] = 14] = \"Pins\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Black\"] = 15] = \"Minimal_Black\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_White\"] = 16] = \"Minimal_White\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Tape\"] = 17] = \"Tape\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Slim\"] = 18] = \"Wood_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Wide\"] = 19] = \"Wood_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Twigs\"] = 20] = \"Wood_Twigs\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Canvas\"] = 21] = \"Canvas\";\r\n      PictureFrameStyle[PictureFrameStyle[\"None\"] = 22] = \"None\";\r\n  })(exports.PictureFrameStyle || (exports.PictureFrameStyle = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var NFTShape = /** @class */ (function (_super) {\r\n      __extends(NFTShape, _super);\r\n      function NFTShape(src, args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          var color = new dist.Color3(0.6404918, 0.611472, 0.8584906);\r\n          var style = exports.PictureFrameStyle.Classic;\r\n          // check if args is color (backwards compatibility)\r\n          if ('r' in args) {\r\n              color = args;\r\n          }\r\n          else if (args !== null) {\r\n              if (args.color)\r\n                  color = args.color;\r\n              if (args.style)\r\n                  style = args.style;\r\n          }\r\n          _this.color = color;\r\n          _this.style = style;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], NFTShape.prototype, \"src\", void 0);\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], NFTShape.prototype, \"style\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], NFTShape.prototype, \"color\", void 0);\r\n      NFTShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.NFT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], NFTShape);\r\n      return NFTShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Texture = /** @class */ (function (_super) {\r\n      __extends(Texture, _super);\r\n      function Texture(src, opts) {\r\n          var _this = _super.call(this) || this;\r\n          var base64Test = new RegExp('data:[a-z-]+/[a-z-]+;base64');\r\n          if (src.length > 2048 || base64Test.test(src)) {\r\n              log('⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs');\r\n          }\r\n          _this.src = src;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Texture.prototype, \"src\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Texture.prototype, \"hasAlpha\", void 0);\r\n      Texture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], Texture);\r\n      return Texture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Animator = /** @class */ (function (_super) {\r\n      __extends(Animator, _super);\r\n      function Animator() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.states = [];\r\n          return _this;\r\n      }\r\n      /**\r\n       * Adds an AnimationState to the animation lists.\r\n       */\r\n      Animator.prototype.addClip = function (clip) {\r\n          var _this = this;\r\n          this.states.push(clip);\r\n          clip.onChange(function () {\r\n              _this.dirty = true;\r\n          });\r\n          clip.owner = this;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the animation clip instance for the specified clip name.\r\n       * If the clip doesn't exist a new one will be created.\r\n       */\r\n      Animator.prototype.getClip = function (clipName) {\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var clip = this.states[i];\r\n              if (clip.clip === clipName) {\r\n                  return clip;\r\n              }\r\n          }\r\n          var newClip = new AnimationState(clipName);\r\n          this.addClip(newClip);\r\n          return newClip;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator\r\n       */\r\n      Animator.prototype.stop = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n              clip.shouldReset = true;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.stop(animationState);\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      Animator.prototype.play = function (clip, reset) {\r\n          if (reset === void 0) { reset = false; }\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var animationState = this.states[i];\r\n              if (animationState.layer === clip.layer && clip !== animationState) {\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n          if (reset)\r\n              clip.shouldReset = true;\r\n          clip.playing = true;\r\n          clip.dirty = true;\r\n          clip.data.nonce = Math.random();\r\n      };\r\n      /**\r\n       * Pauses the animation state, if the clip is null it will pause all animations on this animator\r\n       */\r\n      Animator.prototype.pause = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Array)\r\n      ], Animator.prototype, \"states\", void 0);\r\n      Animator = __decorate([\r\n          Component('engine.animator', exports.CLASS_ID.ANIMATION)\r\n      ], Animator);\r\n      return Animator;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var OBJShape = /** @class */ (function (_super) {\r\n      __extends(OBJShape, _super);\r\n      function OBJShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OBJShape.prototype, \"src\", void 0);\r\n      OBJShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.OBJ_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], OBJShape);\r\n      return OBJShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Font = /** @class */ (function (_super) {\r\n      __extends(Font, _super);\r\n      function Font(src) {\r\n          if (src === void 0) { src = ''; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Font.prototype, \"src\", void 0);\r\n      Font = __decorate([\r\n          DisposableComponent('engine.font', exports.CLASS_ID.FONT),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], Font);\r\n      return Font;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.Fonts = void 0;\r\n  (function (Fonts) {\r\n      /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/\r\n      Fonts[\"SanFrancisco\"] = \"builtin:SF-UI-Text-Regular SDF\";\r\n      /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/\r\n      Fonts[\"SanFrancisco_Heavy\"] = \"builtin:SF-UI-Text-Heavy SDF\";\r\n      /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/\r\n      Fonts[\"SanFrancisco_Semibold\"] = \"builtin:SF-UI-Text-Semibold SDF\";\r\n      Fonts[\"LiberationSans\"] = \"builtin:LiberationSans SDF\";\r\n      Fonts[\"SansSerif\"] = \"SansSerif\";\r\n      Fonts[\"SansSerif_Heavy\"] = \"SansSerif_Heavy\";\r\n      Fonts[\"SansSerif_Bold\"] = \"SansSerif_Bold\";\r\n      Fonts[\"SansSerif_SemiBold\"] = \"SansSerif_SemiBold\";\r\n  })(exports.Fonts || (exports.Fonts = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var TextShape = /** @class */ (function (_super) {\r\n      __extends(TextShape, _super);\r\n      function TextShape(value) {\r\n          var _this = _super.call(this) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = new dist.Color3(1, 1, 1);\r\n          _this.color = new dist.Color3(1, 1, 1);\r\n          _this.fontSize = 10;\r\n          _this.opacity = 1.0;\r\n          _this.value = '';\r\n          _this.lineSpacing = '0px';\r\n          _this.lineCount = 0;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = new dist.Color3(1, 1, 1);\r\n          _this.hTextAlign = 'center';\r\n          _this.vTextAlign = 'center';\r\n          _this.width = 1;\r\n          _this.height = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.billboard = false;\r\n          _this.visible = true;\r\n          if (value) {\r\n              _this.value = value;\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], TextShape.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"billboard\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"visible\", void 0);\r\n      TextShape = __decorate([\r\n          Component('engine.text', exports.CLASS_ID.TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], TextShape);\r\n      return TextShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.TransparencyMode = void 0;\r\n  (function (TransparencyMode) {\r\n      TransparencyMode[TransparencyMode[\"OPAQUE\"] = 0] = \"OPAQUE\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST\"] = 1] = \"ALPHA_TEST\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_BLEND\"] = 2] = \"ALPHA_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST_AND_BLEND\"] = 3] = \"ALPHA_TEST_AND_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"AUTO\"] = 4] = \"AUTO\";\r\n  })(exports.TransparencyMode || (exports.TransparencyMode = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var Material = /** @class */ (function (_super) {\r\n      __extends(Material, _super);\r\n      function Material() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\r\n           * Defaults to 0.5\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          /**\r\n           * Sets the transparency mode of the material.\r\n           * Defaults to -1.\r\n           *\r\n           * | Value | Type                                           |\r\n           * | ----- | ---------------------------------------------- |\r\n           * | 0     | OPAQUE  (default)                              |\r\n           * | 1     | ALPHATEST                                      |\r\n           * | 2     | ALPHABLEND                                     |\r\n           * | 3     | ALPHATESTANDBLEND                              |\r\n           * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\r\n           */\r\n          _this.transparencyMode = exports.TransparencyMode.AUTO;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Specifies the metallic scalar of the metallic/roughness workflow.\r\n           * Can also be used to scale the metalness values of the metallic texture.\r\n           * Defaults to  0.5.\r\n           */\r\n          )\r\n      ], Material.prototype, \"emissiveColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"metallic\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"roughness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Intensity of the direct lights e.g. the four lights available in scene.\r\n           * This impacts both the direct diffuse and specular highlights.\r\n           * Defaults to 1.\r\n           */\r\n          )\r\n      ], Material.prototype, \"reflectivityColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"directIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"microSurface\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"emissiveIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"specularIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"alphaTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"emissiveTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"bumpTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Material.prototype, \"castShadows\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"transparencyMode\", void 0);\r\n      Material = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.PBR_MATERIAL)\r\n      ], Material);\r\n      return Material;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BasicMaterial = /** @class */ (function (_super) {\r\n      __extends(BasicMaterial, _super);\r\n      function BasicMaterial() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * A number between 0 and 1.\r\n           * Any pixel with an alpha lower than this value will be shown as transparent.\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], BasicMaterial.prototype, \"texture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], BasicMaterial.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], BasicMaterial.prototype, \"castShadows\", void 0);\r\n      BasicMaterial = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.BASIC_MATERIAL)\r\n      ], BasicMaterial);\r\n      return BasicMaterial;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnUUIDEvent, _super);\r\n      function OnUUIDEvent(callback) {\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.uuid = newId('UUID');\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          _this.callback = callback;\r\n          return _this;\r\n      }\r\n      OnUUIDEvent.uuidEvent = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          if (value instanceof OnUUIDEvent) {\r\n                              this.data[propertyKey] = value.uuid;\r\n                          }\r\n                          else {\r\n                              throw new Error('value is not an OnUUIDEvent');\r\n                          }\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      OnUUIDEvent.prototype.toJSON = function () {\r\n          return { uuid: this.uuid, type: this.type };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Function)\r\n      ], OnUUIDEvent.prototype, \"callback\", void 0);\r\n      return OnUUIDEvent;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnPointerUUIDEvent, _super);\r\n      function OnPointerUUIDEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.button = exports.ActionButton.ANY;\r\n          _this.hoverText = 'Interact';\r\n          _this.distance = 10;\r\n          _this.showFeedback = true;\r\n          return _this;\r\n      }\r\n      OnPointerUUIDEvent.prototype.toJSON = function () {\r\n          return {\r\n              uuid: this.uuid,\r\n              type: this.type,\r\n              button: this.button,\r\n              hoverText: this.hoverText,\r\n              distance: this.distance,\r\n              showFeedback: this.showFeedback\r\n          };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"button\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"hoverText\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], OnPointerUUIDEvent.prototype, \"distance\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], OnPointerUUIDEvent.prototype, \"showFeedback\", void 0);\r\n      return OnPointerUUIDEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var OnPointerLock = /** @class */ (function (_super) {\r\n      __extends(OnPointerLock, _super);\r\n      function OnPointerLock() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onPointerLock';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerLock.prototype, \"type\", void 0);\r\n      OnPointerLock = __decorate([\r\n          Component('engine.onPointerLock', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerLock);\r\n      return OnPointerLock;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnAnimationEnd = /** @class */ (function (_super) {\r\n      __extends(OnAnimationEnd, _super);\r\n      function OnAnimationEnd() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onAnimationEnd';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnAnimationEnd.prototype, \"type\", void 0);\r\n      OnAnimationEnd = __decorate([\r\n          Component('engine.onAnimationEnd', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnAnimationEnd);\r\n      return OnAnimationEnd;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var SmartItem = /** @class */ (function (_super) {\r\n      __extends(SmartItem, _super);\r\n      function SmartItem() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SmartItem = __decorate([\r\n          Component('engine.smartItem', exports.CLASS_ID.SMART_ITEM)\r\n      ], SmartItem);\r\n      return SmartItem;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoClip = /** @class */ (function (_super) {\r\n      __extends(VideoClip, _super);\r\n      function VideoClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoClip.prototype, \"url\", void 0);\r\n      VideoClip = __decorate([\r\n          DisposableComponent('engine.VideoClip', exports.CLASS_ID.VIDEO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], VideoClip);\r\n      return VideoClip;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.VideoStatus = void 0;\r\n  (function (VideoStatus) {\r\n      VideoStatus[VideoStatus[\"NONE\"] = 0] = \"NONE\";\r\n      VideoStatus[VideoStatus[\"ERROR\"] = 1] = \"ERROR\";\r\n      VideoStatus[VideoStatus[\"LOADING\"] = 2] = \"LOADING\";\r\n      VideoStatus[VideoStatus[\"READY\"] = 3] = \"READY\";\r\n      VideoStatus[VideoStatus[\"PLAYING\"] = 4] = \"PLAYING\";\r\n      VideoStatus[VideoStatus[\"BUFFERING\"] = 5] = \"BUFFERING\";\r\n  })(exports.VideoStatus || (exports.VideoStatus = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoTexture = /** @class */ (function (_super) {\r\n      __extends(VideoTexture, _super);\r\n      function VideoTexture(videoClip, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.volume = 1;\r\n          _this.playbackRate = 1;\r\n          _this.loop = false;\r\n          _this.seek = -1;\r\n          _this._position = -1;\r\n          _this._videoLength = -1;\r\n          _this._status = exports.VideoStatus.NONE;\r\n          /**\r\n           * Is this VideoTexture playing?\r\n           */\r\n          _this.playing = false;\r\n          if (!(videoClip instanceof VideoClip)) {\r\n              throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");\r\n          }\r\n          _this.videoClipId = getComponentId(videoClip);\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      VideoTexture.prototype.play = function () {\r\n          this.playing = true;\r\n      };\r\n      VideoTexture.prototype.pause = function () {\r\n          this.playing = false;\r\n      };\r\n      VideoTexture.prototype.reset = function () {\r\n          this.seekTime(0);\r\n          this.pause();\r\n      };\r\n      VideoTexture.prototype.seekTime = function (seconds) {\r\n          this.seek = seconds;\r\n          this.dirty = true;\r\n          this.data.nonce = Math.random();\r\n      };\r\n      VideoTexture.prototype.toJSON = function () {\r\n          if (this.seek >= 0) {\r\n              // the seek value was changed/used\r\n              var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n              this.seek = -1;\r\n              return ret;\r\n          }\r\n          return _super.prototype.toJSON.call(this);\r\n      };\r\n      VideoTexture.prototype.update = function (videoEvent) {\r\n          if (videoEvent.videoClipId === this.videoClipId) {\r\n              this._status = videoEvent.videoStatus || exports.VideoStatus.NONE;\r\n              this._videoLength = videoEvent.totalVideoLength;\r\n              this._position = videoEvent.currentOffset;\r\n          }\r\n      };\r\n      Object.defineProperty(VideoTexture.prototype, \"position\", {\r\n          get: function () {\r\n              return this._position;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"videoLength\", {\r\n          get: function () {\r\n              return this._videoLength;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"status\", {\r\n          get: function () {\r\n              return this._status;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoTexture.prototype, \"videoClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"playbackRate\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"seek\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"playing\", void 0);\r\n      VideoTexture = __decorate([\r\n          DisposableComponent('engine.VideoTexture', exports.CLASS_ID.VIDEO_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [VideoClip, Object])\r\n      ], VideoTexture);\r\n      return VideoTexture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var CameraModeArea = /** @class */ (function (_super) {\r\n      __extends(CameraModeArea, _super);\r\n      function CameraModeArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.cameraMode = args.cameraMode;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CameraModeArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CameraModeArea.prototype, \"cameraMode\", void 0);\r\n      CameraModeArea = __decorate([\r\n          Component('engine.cameraModeArea', exports.CLASS_ID.CAMERA_MODE_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], CameraModeArea);\r\n      return CameraModeArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AvatarTexture = /** @class */ (function (_super) {\r\n      __extends(AvatarTexture, _super);\r\n      function AvatarTexture(userId, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.userId = userId;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarTexture.prototype, \"userId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarTexture.prototype, \"hasAlpha\", void 0);\r\n      AvatarTexture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.AVATAR_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], AvatarTexture);\r\n      return AvatarTexture;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var Camera = /** @class */ (function () {\r\n      function Camera() {\r\n          var _this = this;\r\n          /** Camera position, relative to the parcel. */\r\n          this.position = new dist.Vector3();\r\n          /** Camera rotation */\r\n          this.rotation = new dist.Quaternion();\r\n          /** Feet position, relative to the parcel.  */\r\n          this.feetPosition = new dist.Vector3();\r\n          /** Camera position, absolute. */\r\n          this.worldPosition = new dist.Vector3();\r\n          // @internal\r\n          this.lastEventPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\r\n          // @internal\r\n          this._playerHeight = 1.6;\r\n          // @internal\r\n          this._cameraMode = exports.CameraMode.ThirdPerson;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('positionChanged');\r\n              dcl.subscribe('rotationChanged');\r\n              dcl.subscribe('cameraModeChanged');\r\n              dcl.onEvent(function (event) {\r\n                  switch (event.type) {\r\n                      case 'positionChanged':\r\n                          _this.positionChanged(event.data);\r\n                          break;\r\n                      case 'rotationChanged':\r\n                          _this.rotationChanged(event.data);\r\n                          break;\r\n                      case 'cameraModeChanged':\r\n                          _this.cameraModeChanged(event.data);\r\n                          break;\r\n                  }\r\n              });\r\n          }\r\n          Object.defineProperty(this.position, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.position, 'y', {\r\n              get: function () { return _this.lastEventPosition.y; }\r\n          });\r\n          Object.defineProperty(this.position, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'x', {\r\n              get: function () { return _this.lastEventWorldPosition.x; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'y', {\r\n              get: function () { return _this.lastEventWorldPosition.y; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'z', {\r\n              get: function () { return _this.lastEventWorldPosition.z; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'y', {\r\n              get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'x', {\r\n              get: function () { return _this.lastEventRotation.x; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'y', {\r\n              get: function () { return _this.lastEventRotation.y; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'z', {\r\n              get: function () { return _this.lastEventRotation.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'w', {\r\n              get: function () { return _this.lastEventRotation.w; }\r\n          });\r\n      }\r\n      Object.defineProperty(Camera, \"instance\", {\r\n          get: function () {\r\n              if (!Camera._instance) {\r\n                  Camera._instance = new Camera();\r\n              }\r\n              return Camera._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"playerHeight\", {\r\n          /** Player height. */\r\n          get: function () {\r\n              return this._playerHeight;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"cameraMode\", {\r\n          /** @deprecated Use onCameraModeChangedObservable Observable instead. */\r\n          get: function () {\r\n              return this._cameraMode;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // @internal\r\n      Camera.prototype.positionChanged = function (e) {\r\n          this.lastEventPosition = e.position;\r\n          this.lastEventWorldPosition = e.cameraPosition;\r\n          this._playerHeight = e.playerHeight;\r\n      };\r\n      // @internal\r\n      Camera.prototype.rotationChanged = function (e) {\r\n          this.lastEventRotation = e.quaternion;\r\n      };\r\n      // @internal\r\n      Camera.prototype.cameraModeChanged = function (e) {\r\n          this._cameraMode = e.cameraMode;\r\n      };\r\n      return Camera;\r\n  }());\n\n  /**\r\n   * @internal\r\n   */\r\n  var QueryPrefix;\r\n  (function (QueryPrefix) {\r\n      QueryPrefix[\"HitFirst\"] = \"rqhf\";\r\n      QueryPrefix[\"HitAll\"] = \"rqha\";\r\n  })(QueryPrefix || (QueryPrefix = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PhysicsCast = /** @class */ (function () {\r\n      function PhysicsCast() {\r\n          this.queries = {};\r\n      }\r\n      Object.defineProperty(PhysicsCast, \"instance\", {\r\n          get: function () {\r\n              PhysicsCast.ensureInstance();\r\n              return PhysicsCast._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      PhysicsCast.ensureInstance = function () {\r\n          if (!PhysicsCast._instance) {\r\n              PhysicsCast._instance = new PhysicsCast();\r\n          }\r\n      };\r\n      PhysicsCast.prototype.getRayFromCamera = function (distance) {\r\n          var rotation = Camera.instance.rotation;\r\n          var rotationMat = dist.Matrix.Identity();\r\n          rotation.toRotationMatrix(rotationMat);\r\n          var direction = dist.Vector3.TransformCoordinates(dist.Vector3.Forward(), rotationMat);\r\n          var ray = {\r\n              origin: Camera.instance.position,\r\n              direction: direction,\r\n              distance: distance\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.getRayFromPositions = function (from, to) {\r\n          var direction = to.subtract(from);\r\n          var length = direction.length();\r\n          var ray = {\r\n              origin: from,\r\n              direction: direction.normalize(),\r\n              distance: length\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.hitFirst = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitAll = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitFirstAvatar = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.hitAllAvatars = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      return PhysicsCast;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var RaycastEventSystem = /** @class */ (function () {\r\n      function RaycastEventSystem() {\r\n      }\r\n      RaycastEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(RaycastResponse, this, function (event) {\r\n              if (event.payload.queryType === 'HitFirst') {\r\n                  PhysicsCast.instance.handleRaycastHitFirstResponse(event);\r\n              }\r\n              else if (event.payload.queryType === 'HitAll') {\r\n                  PhysicsCast.instance.handleRaycastHitAllResponse(event);\r\n              }\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('raycastResponse');\r\n          }\r\n      };\r\n      RaycastEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('raycastResponse');\r\n          }\r\n      };\r\n      return RaycastEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventSystem = /** @class */ (function () {\r\n      function PointerEventSystem() {\r\n      }\r\n      PointerEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(PointerEvent, this, function (event) {\r\n              Input.instance.handlePointerEvent(event.payload);\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('pointerUp');\r\n              dcl.subscribe('pointerDown');\r\n              dcl.subscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      PointerEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('pointerUp');\r\n              dcl.unsubscribe('pointerDown');\r\n              dcl.unsubscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      return PointerEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEventSystem = /** @class */ (function () {\r\n      function UUIDEventSystem() {\r\n          this.handlerMap = {};\r\n      }\r\n      UUIDEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onAddEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              if (event.component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[event.component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.handleEvent = function (event) {\r\n          if (event.uuid in this.handlerMap) {\r\n              var handler = this.handlerMap[event.uuid];\r\n              if (handler) {\r\n                  if (handler.callback && 'call' in handler.callback) {\r\n                      handler.callback(event.payload);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      return UUIDEventSystem;\r\n  }());\r\n  /** @internal */\r\n  var raycastEventSystem = new RaycastEventSystem();\r\n  /** @internal */\r\n  var pointerEventSystem = new PointerEventSystem();\r\n  /** @internal */\r\n  var uuidEventSystem = new UUIDEventSystem();\n\n  /**\r\n   * @public\r\n   */\r\n  var AudioClip = /** @class */ (function (_super) {\r\n      __extends(AudioClip, _super);\r\n      function AudioClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioClip.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"loadingCompleteEventId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioClip.prototype, \"volume\", void 0);\r\n      AudioClip = __decorate([\r\n          DisposableComponent('engine.AudioClip', exports.CLASS_ID.AUDIO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioClip);\r\n      return AudioClip;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioSource = /** @class */ (function (_super) {\r\n      __extends(AudioSource, _super);\r\n      function AudioSource(audioClip) {\r\n          var _this = _super.call(this) || this;\r\n          _this.audioClip = audioClip;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          /**\r\n           * Is this AudioSource playing?\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Pitch, default: 1.0, range from 0.0 to MaxFloat\r\n           */\r\n          _this.pitch = 1.0;\r\n          /**\r\n           * Timestamp of when the playOnce was executed to see if we need to start over the audio\r\n           */\r\n          _this.playedAtTimestamp = Date.now();\r\n          if (!(audioClip instanceof AudioClip)) {\r\n              throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");\r\n          }\r\n          _this.audioClipId = getComponentId(audioClip);\r\n          return _this;\r\n      }\r\n      /**\r\n       * Disables the looping and plays the current source once.\r\n       * If the sound was playing, it stops and starts over.\r\n       */\r\n      AudioSource.prototype.playOnce = function () {\r\n          this.playing = true;\r\n          this.dirty = true;\r\n          this.playedAtTimestamp = Date.now();\r\n          this.data.nonce = Math.random();\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioSource.prototype, \"audioClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"pitch\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"playedAtTimestamp\", void 0);\r\n      AudioSource = __decorate([\r\n          Component('engine.AudioSource', exports.CLASS_ID.AUDIO_SOURCE),\r\n          __metadata(\"design:paramtypes\", [AudioClip])\r\n      ], AudioSource);\r\n      return AudioSource;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioStream = /** @class */ (function (_super) {\r\n      __extends(AudioStream, _super);\r\n      function AudioStream(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.playing = false;\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          _this.playing = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioStream.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioStream.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioStream.prototype, \"volume\", void 0);\r\n      AudioStream = __decorate([\r\n          Component('engine.AudioStream', exports.CLASS_ID.AUDIO_STREAM),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioStream);\r\n      return AudioStream;\r\n  }(ObservableComponent));\n\n  /**\r\n   * Gizmo identifiers\r\n   * @public\r\n   */\r\n  exports.Gizmo = void 0;\r\n  (function (Gizmo) {\r\n      Gizmo[\"MOVE\"] = \"MOVE\";\r\n      Gizmo[\"ROTATE\"] = \"ROTATE\";\r\n      Gizmo[\"SCALE\"] = \"SCALE\";\r\n      Gizmo[\"NONE\"] = \"NONE\";\r\n  })(exports.Gizmo || (exports.Gizmo = {}));\r\n  /**\r\n   * This event is triggered after the user finalizes dragging a gizmo.\r\n   * @public\r\n   */\r\n  var OnGizmoEvent = /** @class */ (function (_super) {\r\n      __extends(OnGizmoEvent, _super);\r\n      function OnGizmoEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'gizmoEvent';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnGizmoEvent.prototype, \"type\", void 0);\r\n      OnGizmoEvent = __decorate([\r\n          Component('engine.gizmoEvent', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnGizmoEvent);\r\n      return OnGizmoEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\r\n   * @public\r\n   */\r\n  var Gizmos = /** @class */ (function (_super) {\r\n      __extends(Gizmos, _super);\r\n      function Gizmos() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Enable position gizmo\r\n           */\r\n          _this.position = true;\r\n          /**\r\n           * Enable rotation gizmo\r\n           */\r\n          _this.rotation = true;\r\n          /**\r\n           * Enable scale gizmo\r\n           */\r\n          _this.scale = true;\r\n          /**\r\n           * Cycle through gizmos using click.\r\n           */\r\n          _this.cycle = true;\r\n          /**\r\n           * Align the gizmos to match the local reference system\r\n           */\r\n          _this.localReference = false;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"scale\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"cycle\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], Gizmos.prototype, \"selectedGizmo\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"localReference\", void 0);\r\n      Gizmos = __decorate([\r\n          Component('engine.gizmos', exports.CLASS_ID.GIZMOS)\r\n      ], Gizmos);\r\n      return Gizmos;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var OnFocus = /** @class */ (function (_super) {\r\n      __extends(OnFocus, _super);\r\n      function OnFocus(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onFocus';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnFocus.prototype, \"type\", void 0);\r\n      OnFocus = __decorate([\r\n          Component('engine.onFocus', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnFocus);\r\n      return OnFocus;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnTextSubmit = /** @class */ (function (_super) {\r\n      __extends(OnTextSubmit, _super);\r\n      function OnTextSubmit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onTextSubmit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnTextSubmit.prototype, \"type\", void 0);\r\n      OnTextSubmit = __decorate([\r\n          Component('engine.onTextSubmit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnTextSubmit);\r\n      return OnTextSubmit;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnBlur = /** @class */ (function (_super) {\r\n      __extends(OnBlur, _super);\r\n      function OnBlur(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onBlur';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnBlur.prototype, \"type\", void 0);\r\n      OnBlur = __decorate([\r\n          Component('engine.onBlur', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnBlur);\r\n      return OnBlur;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnEnter = /** @class */ (function (_super) {\r\n      __extends(OnEnter, _super);\r\n      function OnEnter(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnEnter.prototype, \"type\", void 0);\r\n      OnEnter = __decorate([\r\n          Component('engine.onEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnEnter);\r\n      return OnEnter;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnChanged = /** @class */ (function (_super) {\r\n      __extends(OnChanged, _super);\r\n      function OnChanged(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onChange';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnChanged.prototype, \"type\", void 0);\r\n      OnChanged = __decorate([\r\n          Component('engine.onChange', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnChanged);\r\n      return OnChanged;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public @deprecated use `OnPointerDown` instead\r\n   */\r\n  var OnClick = /** @class */ (function (_super) {\r\n      __extends(OnClick, _super);\r\n      function OnClick(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onClick';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnClick.prototype, \"type\", void 0);\r\n      OnClick = __decorate([\r\n          Component('engine.onClick', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnClick);\r\n      return OnClick;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerDown = /** @class */ (function (_super) {\r\n      __extends(OnPointerDown, _super);\r\n      function OnPointerDown(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerDown';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerDown.prototype, \"type\", void 0);\r\n      OnPointerDown = __decorate([\r\n          Component('engine.pointerDown', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerDown);\r\n      return OnPointerDown;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUp = /** @class */ (function (_super) {\r\n      __extends(OnPointerUp, _super);\r\n      function OnPointerUp(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerUp';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUp.prototype, \"type\", void 0);\r\n      OnPointerUp = __decorate([\r\n          Component('engine.pointerUp', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerUp);\r\n      return OnPointerUp;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverEnter = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverEnter, _super);\r\n      function OnPointerHoverEnter(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverEnter.prototype, \"type\", void 0);\r\n      OnPointerHoverEnter = __decorate([\r\n          Component('engine.pointerHoverEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerHoverEnter);\r\n      return OnPointerHoverEnter;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverExit = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverExit, _super);\r\n      function OnPointerHoverExit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverExit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          // Changed default distance value for this component because in most cases we probably\r\n          // don't want for the hover exit event to be limited by a distance, and it default value was too small.\r\n          _this.distance = 160;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverExit.prototype, \"type\", void 0);\r\n      OnPointerHoverExit = __decorate([\r\n          Component('engine.pointerHoverExit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnPointerHoverExit);\r\n      return OnPointerHoverExit;\r\n  }(OnPointerUUIDEvent));\n\n  /**\r\n   * @public\r\n   */\r\n  var UIShape = /** @class */ (function (_super) {\r\n      __extends(UIShape, _super);\r\n      function UIShape(parent) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.name = null;\r\n          _this.visible = true;\r\n          _this.opacity = 1;\r\n          _this.hAlign = 'center';\r\n          _this.vAlign = 'center';\r\n          _this.width = '100px';\r\n          _this.height = '50px';\r\n          _this.positionX = '0px';\r\n          _this.positionY = '0px';\r\n          _this.isPointerBlocker = true;\r\n          if (parent) {\r\n              _this._parent = parent;\r\n              _this.data.parentComponent = getComponentId(parent);\r\n          }\r\n          return _this;\r\n      }\r\n      Object.defineProperty(UIShape.prototype, \"parent\", {\r\n          get: function () {\r\n              return this._parent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(UIShape.prototype, \"parentComponent\", {\r\n          // @internal\r\n          get: function () {\r\n              return this.data.parentComponent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"visible\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"hAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"vAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"isPointerBlocker\", void 0);\r\n      return UIShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIFullScreen = /** @class */ (function (_super) {\r\n      __extends(UIFullScreen, _super);\r\n      function UIFullScreen() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIFullScreen = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_FULLSCREEN_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIFullScreen);\r\n      return UIFullScreen;\r\n  }(UIShape));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIWorldSpace = /** @class */ (function (_super) {\r\n      __extends(UIWorldSpace, _super);\r\n      function UIWorldSpace() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIWorldSpace = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_WORLD_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIWorldSpace);\r\n      return UIWorldSpace;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UICanvas = /** @class */ (function (_super) {\r\n      __extends(UICanvas, _super);\r\n      function UICanvas() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UICanvas = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SCREEN_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UICanvas);\r\n      return UICanvas;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerRect = /** @class */ (function (_super) {\r\n      __extends(UIContainerRect, _super);\r\n      function UIContainerRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.thickness = 0;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.alignmentUsesSize = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerRect.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerRect.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerRect.prototype, \"alignmentUsesSize\", void 0);\r\n      UIContainerRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_RECT)\r\n      ], UIContainerRect);\r\n      return UIContainerRect;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.UIStackOrientation = void 0;\r\n  (function (UIStackOrientation) {\r\n      UIStackOrientation[UIStackOrientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\r\n      UIStackOrientation[UIStackOrientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\r\n  })(exports.UIStackOrientation || (exports.UIStackOrientation = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerStack = /** @class */ (function (_super) {\r\n      __extends(UIContainerStack, _super);\r\n      function UIContainerStack() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.adaptWidth = true;\r\n          _this.adaptHeight = true;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.stackOrientation = exports.UIStackOrientation.VERTICAL;\r\n          _this.spacing = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerStack.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"stackOrientation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"spacing\", void 0);\r\n      UIContainerStack = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_STACK)\r\n      ], UIContainerStack);\r\n      return UIContainerStack;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIButton = /** @class */ (function (_super) {\r\n      __extends(UIButton, _super);\r\n      function UIButton() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.fontSize = 10;\r\n          _this.fontWeight = 'normal';\r\n          _this.thickness = 0;\r\n          _this.cornerRadius = 0;\r\n          _this.color = dist.Color4.White();\r\n          _this.background = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.text = 'button';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"fontWeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"cornerRadius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"background\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"text\", void 0);\r\n      UIButton = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_BUTTON_SHAPE)\r\n      ], UIButton);\r\n      return UIButton;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIText = /** @class */ (function (_super) {\r\n      __extends(UIText, _super);\r\n      function UIText() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.White();\r\n          _this.color = dist.Color4.White();\r\n          _this.fontSize = 10;\r\n          _this.fontAutoSize = false;\r\n          _this.value = '';\r\n          _this.lineSpacing = 0;\r\n          _this.lineCount = 0;\r\n          _this.adaptWidth = false;\r\n          _this.adaptHeight = false;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"fontAutoSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingLeft\", void 0);\r\n      UIText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_TEXT_SHAPE)\r\n      ], UIText);\r\n      return UIText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIInputText = /** @class */ (function (_super) {\r\n      __extends(UIInputText, _super);\r\n      function UIInputText(parent) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.Black();\r\n          _this.color = dist.Color4.Clear();\r\n          _this.fontSize = 10;\r\n          _this.value = '';\r\n          _this.placeholder = '';\r\n          _this.margin = 10;\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.focusedBackground = dist.Color4.Black();\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onTextSubmit = null;\r\n          _this.onChanged = null;\r\n          _this.onFocus = null;\r\n          _this.onBlur = null;\r\n          _this.onTextChanged = new OnChanged(function (e) {\r\n              var _a = e.value, value = _a.value, isSubmit = _a.isSubmit;\r\n              // NOTE: here we want to keep the same `dirty` state as before changing `this.value`\r\n              // because changing `this.value` will set the component as `dirty` and send a message to the renderer with it value\r\n              // and that message is unnecesary (if the only thing that have changed is `this.value`) since that new value has come from the renderer itself\r\n              var isDirty = _this.dirty;\r\n              _this.value = value;\r\n              _this.dirty = isDirty;\r\n              if (isSubmit && _this.onTextSubmit) {\r\n                  var onSubmitValue = { text: value };\r\n                  _this.onTextSubmit.callback(onSubmitValue);\r\n              }\r\n              else if (!isSubmit && _this.onChanged) {\r\n                  var onChangeValue = {\r\n                      value: value,\r\n                      pointerId: e.pointerId\r\n                  };\r\n                  _this.onChanged.callback(onChangeValue);\r\n              }\r\n          });\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIInputText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"placeholder\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"margin\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"focusedBackground\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIInputText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", OnChanged)\r\n      ], UIInputText.prototype, \"onTextChanged\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onFocus\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onBlur\", void 0);\r\n      UIInputText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_INPUT_TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], UIInputText);\r\n      return UIInputText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIImage = /** @class */ (function (_super) {\r\n      __extends(UIImage, _super);\r\n      function UIImage(parent, source) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.sourceLeft = 0;\r\n          _this.sourceTop = 0;\r\n          _this.sourceWidth = 1;\r\n          _this.sourceHeight = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.sizeInPixels = true;\r\n          _this.onClick = null;\r\n          _this.source = source;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Texture)\r\n      ], UIImage.prototype, \"source\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIImage.prototype, \"sizeInPixels\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIImage.prototype, \"onClick\", void 0);\r\n      UIImage = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_IMAGE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [UIShape, Texture])\r\n      ], UIImage);\r\n      return UIImage;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIScrollRect = /** @class */ (function (_super) {\r\n      __extends(UIScrollRect, _super);\r\n      function UIScrollRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.valueX = 0;\r\n          _this.valueY = 0;\r\n          _this.backgroundColor = dist.Color4.Clear();\r\n          _this.isHorizontal = false;\r\n          _this.isVertical = false;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onChanged = null;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIScrollRect.prototype, \"backgroundColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isHorizontal\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isVertical\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIScrollRect.prototype, \"onChanged\", void 0);\r\n      UIScrollRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SLIDER_SHAPE)\r\n      ], UIScrollRect);\r\n      return UIScrollRect;\r\n  }(UIShape));\n\n  /**\r\n   * @public\r\n   */\r\n  var AvatarShape = /** @class */ (function (_super) {\r\n      __extends(AvatarShape, _super);\r\n      function AvatarShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.useDummyModel = false;\r\n          _this.talking = false;\r\n          return _this;\r\n      }\r\n      AvatarShape_1 = AvatarShape;\r\n      AvatarShape.Dummy = function () {\r\n          var avatarShape = new AvatarShape_1();\r\n          avatarShape.useDummyModel = true;\r\n          return avatarShape;\r\n      };\r\n      var AvatarShape_1;\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"id\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"expressionTriggerId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarShape.prototype, \"expressionTriggerTimestamp\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"bodyShape\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarShape.prototype, \"wearables\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"skinColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"hairColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"eyeColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"useDummyModel\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"talking\", void 0);\r\n      AvatarShape = AvatarShape_1 = __decorate([\r\n          Component('engine.avatarShape', exports.CLASS_ID.AVATAR_SHAPE)\r\n      ], AvatarShape);\r\n      return AvatarShape;\r\n  }(ObservableComponent));\n\n  var communicationsController = null;\r\n  var communicationsControllerPromise = null;\r\n  var _messageObserver = null;\r\n  /**\r\n   * @internal\r\n   */\r\n  function getMessageObserver() {\r\n      if (!_messageObserver) {\r\n          _messageObserver = new Observable();\r\n      }\r\n      return _messageObserver;\r\n  }\r\n  function ensureCommunicationsController() {\r\n      if (!communicationsControllerPromise) {\r\n          communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});\r\n          void communicationsControllerPromise.then(function ($) {\r\n              communicationsController = $;\r\n          });\r\n          var observer_1 = getMessageObserver();\r\n          dcl.subscribe('comms');\r\n          dcl.onEvent(function (event) {\r\n              if (event.type === 'comms') {\r\n                  observer_1.notifyObservers(event.data);\r\n              }\r\n          });\r\n      }\r\n      return communicationsControllerPromise;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var MessageBus = /** @class */ (function () {\r\n      function MessageBus() {\r\n          var _this = this;\r\n          this.messageQueue = [];\r\n          this.connected = false;\r\n          this.flushing = false;\r\n          void ensureCommunicationsController().then(function () {\r\n              _this.connected = true;\r\n              _this.flush();\r\n          });\r\n      }\r\n      MessageBus.prototype.on = function (message, callback) {\r\n          return getMessageObserver().add(function (e) {\r\n              try {\r\n                  var m = JSON.parse(e.message);\r\n                  if (m.message === message) {\r\n                      callback(m.payload, e.sender);\r\n                  }\r\n              }\r\n              catch (e) {\r\n                  dcl.error('Error parsing comms message ' + (e.message || ''), e);\r\n              }\r\n          });\r\n      };\r\n      // @internal\r\n      MessageBus.prototype.sendRaw = function (message) {\r\n          this.messageQueue.push(message);\r\n          if (this.connected) {\r\n              this.flush();\r\n          }\r\n      };\r\n      MessageBus.prototype.emit = function (message, payload) {\r\n          var messageToSend = JSON.stringify({ message: message, payload: payload });\r\n          this.sendRaw(messageToSend);\r\n          getMessageObserver().notifyObservers({\r\n              message: messageToSend,\r\n              sender: 'self'\r\n          });\r\n      };\r\n      MessageBus.prototype.flush = function () {\r\n          var _this = this;\r\n          if (this.messageQueue.length === 0)\r\n              return;\r\n          if (!this.connected)\r\n              return;\r\n          if (!communicationsController)\r\n              return;\r\n          if (this.flushing)\r\n              return;\r\n          var message = this.messageQueue.shift();\r\n          this.flushing = true;\r\n          dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\r\n              _this.flushing = false;\r\n              _this.flush();\r\n          }, function (e) {\r\n              _this.flushing = false;\r\n              error('Error flushing MessageBus', e);\r\n          });\r\n      };\r\n      return MessageBus;\r\n  }());\n\n  // CORE DEPENDENCIES\r\n  var entity = new Entity('scene');\r\n  entity.uuid = '0';\r\n  // Initialize engine\r\n  /** @public */\r\n  var engine = new Engine(entity);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  DisposableComponent.engine = engine;\r\n  // Initialize Decentraland interface\r\n  if (typeof dcl !== 'undefined') {\r\n      engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);\r\n      _initEventObservables(dcl);\r\n  }\r\n  // Initialize UUID Events system\r\n  engine.addSystem(uuidEventSystem);\r\n  // Initialize Pointer Events System\r\n  engine.addSystem(pointerEventSystem);\r\n  // Initialize Raycast Events System\r\n  engine.addSystem(raycastEventSystem);\n\n  exports.AVATAR_OBSERVABLE = AVATAR_OBSERVABLE;\n  exports.Angle = dist.Angle;\n  exports.AnimationState = AnimationState;\n  exports.Animator = Animator;\n  exports.Arc2 = dist.Arc2;\n  exports.AttachToAvatar = AttachToAvatar;\n  exports.Attachable = Attachable;\n  exports.AudioClip = AudioClip;\n  exports.AudioSource = AudioSource;\n  exports.AudioStream = AudioStream;\n  exports.AvatarModifierArea = AvatarModifierArea;\n  exports.AvatarShape = AvatarShape;\n  exports.AvatarTexture = AvatarTexture;\n  exports.Axis = dist.Axis;\n  exports.BasicMaterial = BasicMaterial;\n  exports.BezierCurve = dist.BezierCurve;\n  exports.Billboard = Billboard;\n  exports.BoxShape = BoxShape;\n  exports.Camera = Camera;\n  exports.CameraModeArea = CameraModeArea;\n  exports.CircleShape = CircleShape;\n  exports.Color3 = dist.Color3;\n  exports.Color4 = dist.Color4;\n  exports.Component = Component;\n  exports.ComponentAdded = ComponentAdded;\n  exports.ComponentGroup = ComponentGroup;\n  exports.ComponentRemoved = ComponentRemoved;\n  exports.ConeShape = ConeShape;\n  exports.Curve3 = dist.Curve3;\n  exports.CylinderShape = CylinderShape;\n  exports.DEG2RAD = dist.DEG2RAD;\n  exports.DisposableComponent = DisposableComponent;\n  exports.DisposableComponentCreated = DisposableComponentCreated;\n  exports.DisposableComponentRemoved = DisposableComponentRemoved;\n  exports.DisposableComponentUpdated = DisposableComponentUpdated;\n  exports.Engine = Engine;\n  exports.Entity = Entity;\n  exports.Epsilon = dist.Epsilon;\n  exports.EventConstructor = EventConstructor;\n  exports.EventManager = EventManager;\n  exports.Font = Font;\n  exports.Frustum = dist.Frustum;\n  exports.GLTFShape = GLTFShape;\n  exports.Gizmos = Gizmos;\n  exports.GlobalPointerDown = GlobalPointerDown;\n  exports.GlobalPointerUp = GlobalPointerUp;\n  exports.Input = Input;\n  exports.Material = Material;\n  exports.Matrix = dist.Matrix;\n  exports.MessageBus = MessageBus;\n  exports.MultiObserver = MultiObserver;\n  exports.NFTShape = NFTShape;\n  exports.OBJShape = OBJShape;\n  exports.Observable = Observable;\n  exports.ObservableComponent = ObservableComponent;\n  exports.Observer = Observer;\n  exports.ObserverEventState = ObserverEventState;\n  exports.OnAnimationEnd = OnAnimationEnd;\n  exports.OnBlur = OnBlur;\n  exports.OnChanged = OnChanged;\n  exports.OnClick = OnClick;\n  exports.OnEnter = OnEnter;\n  exports.OnFocus = OnFocus;\n  exports.OnGizmoEvent = OnGizmoEvent;\n  exports.OnPointerDown = OnPointerDown;\n  exports.OnPointerHoverEnter = OnPointerHoverEnter;\n  exports.OnPointerHoverExit = OnPointerHoverExit;\n  exports.OnPointerLock = OnPointerLock;\n  exports.OnPointerUUIDEvent = OnPointerUUIDEvent;\n  exports.OnPointerUp = OnPointerUp;\n  exports.OnTextSubmit = OnTextSubmit;\n  exports.OnUUIDEvent = OnUUIDEvent;\n  exports.Orientation = dist.Orientation;\n  exports.ParentChanged = ParentChanged;\n  exports.Path2 = dist.Path2;\n  exports.Path3D = dist.Path3D;\n  exports.PhysicsCast = PhysicsCast;\n  exports.Plane = dist.Plane;\n  exports.PlaneShape = PlaneShape;\n  exports.PointerEvent = PointerEvent;\n  exports.PointerEventComponent = PointerEventComponent;\n  exports.PointerEventSystem = PointerEventSystem;\n  exports.Quaternion = dist.Quaternion;\n  exports.RAD2DEG = dist.RAD2DEG;\n  exports.RaycastEventSystem = RaycastEventSystem;\n  exports.RaycastResponse = RaycastResponse;\n  exports.Scalar = dist.Scalar;\n  exports.Shape = Shape;\n  exports.Size = dist.Size;\n  exports.SmartItem = SmartItem;\n  exports.Space = dist.Space;\n  exports.SphereShape = SphereShape;\n  exports.Subscription = Subscription;\n  exports.TextShape = TextShape;\n  exports.Texture = Texture;\n  exports.ToGammaSpace = dist.ToGammaSpace;\n  exports.ToLinearSpace = dist.ToLinearSpace;\n  exports.Transform = Transform;\n  exports.UIButton = UIButton;\n  exports.UICanvas = UICanvas;\n  exports.UIContainerRect = UIContainerRect;\n  exports.UIContainerStack = UIContainerStack;\n  exports.UIFullScreen = UIFullScreen;\n  exports.UIImage = UIImage;\n  exports.UIInputText = UIInputText;\n  exports.UIScrollRect = UIScrollRect;\n  exports.UIShape = UIShape;\n  exports.UIText = UIText;\n  exports.UIValue = UIValue;\n  exports.UIWorldSpace = UIWorldSpace;\n  exports.UUIDEvent = UUIDEvent;\n  exports.UUIDEventSystem = UUIDEventSystem;\n  exports.Vector2 = dist.Vector2;\n  exports.Vector3 = dist.Vector3;\n  exports.Vector4 = dist.Vector4;\n  exports.VideoClip = VideoClip;\n  exports.VideoTexture = VideoTexture;\n  exports._initEventObservables = _initEventObservables;\n  exports.buildArray = buildArray$1;\n  exports.engine = engine;\n  exports.error = error;\n  exports.executeTask = executeTask;\n  exports.getComponentClassId = getComponentClassId;\n  exports.getComponentId = getComponentId;\n  exports.getComponentName = getComponentName;\n  exports.getMessageObserver = getMessageObserver;\n  exports.isDisposableComponent = isDisposableComponent;\n  exports.log = log;\n  exports.newId = newId;\n  exports.onCameraModeChangedObservable = onCameraModeChangedObservable;\n  exports.onEnterScene = onEnterScene;\n  exports.onEnterSceneObservable = onEnterSceneObservable;\n  exports.onIdleStateChangedObservable = onIdleStateChangedObservable;\n  exports.onLeaveScene = onLeaveScene;\n  exports.onLeaveSceneObservable = onLeaveSceneObservable;\n  exports.onPlayerClickedObservable = onPlayerClickedObservable;\n  exports.onPlayerConnectedObservable = onPlayerConnectedObservable;\n  exports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;\n  exports.onPlayerExpressionObservable = onPlayerExpressionObservable;\n  exports.onPointerLockedStateChange = onPointerLockedStateChange;\n  exports.onProfileChanged = onProfileChanged;\n  exports.onRealmChangedObservable = onRealmChangedObservable;\n  exports.onSceneReadyObservable = onSceneReadyObservable;\n  exports.onVideoEvent = onVideoEvent;\n  exports.openExternalURL = openExternalURL;\n  exports.openNFTDialog = openNFTDialog;\n  exports.pointerEventSystem = pointerEventSystem;\n  exports.raycastEventSystem = raycastEventSystem;\n  exports.teleportTo = teleportTo;\n  exports.uuid = uuid;\n  exports.uuidEventSystem = uuidEventSystem;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}(this.self = this.self || {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "sha256": "9c9106281e633a4ba54224bcfb49f46bd22a146297dfc22e14cb6558c026e08c"
  },
  {
    "path": "src\\game.ts",
    "content": "var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\n/// <reference path=\"./types.d.ts\" />\r\ndefine(\"node_modules/decentraland-builder-scripts/channel\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createChannel = void 0;\r\n    var REQUEST_VALUE = '__request_value__';\r\n    var REPLY_VALUE = '__reply_value__';\r\n    var POLL_INTERVAL = 5000;\r\n    function createChannel(id, host, bus) {\r\n        var handlers = {};\r\n        var requests = {};\r\n        var responses = {};\r\n        bus.on(host.name, function (action) {\r\n            var handler = handlers[action.actionId];\r\n            if (handler) {\r\n                handler(action);\r\n            }\r\n            // clear all pending requests for this entity\r\n            requests = {};\r\n        });\r\n        bus.on(REQUEST_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key;\r\n                var response = responses[key];\r\n                if (response) {\r\n                    var value = response();\r\n                    var reply = {\r\n                        entityName: host.name,\r\n                        key: key,\r\n                        sender: id,\r\n                        value: value\r\n                    };\r\n                    bus.emit(REPLY_VALUE, reply);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        bus.on(REPLY_VALUE, function (message) {\r\n            if (message.sender !== id && message.entityName === host.name) {\r\n                var key = message.key, value = message.value;\r\n                var request = requests[key];\r\n                if (request) {\r\n                    request(value);\r\n                }\r\n                // clear pending request for this key\r\n                delete requests[key];\r\n            }\r\n        });\r\n        return {\r\n            id: id,\r\n            bus: bus,\r\n            createAction: function (actionId, values) {\r\n                var action = {\r\n                    entityName: host.name,\r\n                    actionId: actionId,\r\n                    values: values\r\n                };\r\n                return action;\r\n            },\r\n            sendActions: function (actions) {\r\n                var e_1, _a;\r\n                if (actions === void 0) { actions = []; }\r\n                try {\r\n                    for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\r\n                        var base = actions_1_1.value;\r\n                        var action = __assign(__assign({}, base), { sender: id });\r\n                        bus.emit(action.entityName, action);\r\n                    }\r\n                }\r\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\r\n                    }\r\n                    finally { if (e_1) throw e_1.error; }\r\n                }\r\n            },\r\n            handleAction: function (actionId, handler) {\r\n                handlers[actionId] = handler;\r\n            },\r\n            request: function (key, callback) {\r\n                requests[key] = callback;\r\n                var request = { entityName: host.name, key: key, sender: id };\r\n                var interval = setInterval(function () {\r\n                    if (key in requests) {\r\n                        bus.emit(REQUEST_VALUE, request);\r\n                    }\r\n                    else {\r\n                        clearInterval(interval);\r\n                    }\r\n                }, POLL_INTERVAL);\r\n            },\r\n            reply: function (key, callback) {\r\n                responses[key] = callback;\r\n            }\r\n        };\r\n    }\r\n    exports.createChannel = createChannel;\r\n});\r\n/// <reference path=\"./types.d.ts\" />\r\ndefine(\"node_modules/decentraland-builder-scripts/inventory\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createInventory = void 0;\r\n    function createInventory(UICanvas, UIContainerStack, UIImage) {\r\n        var canvas = null;\r\n        var container = null;\r\n        var images = {};\r\n        function getContainer() {\r\n            if (!canvas) {\r\n                canvas = new UICanvas();\r\n            }\r\n            if (!container) {\r\n                container = new UIContainerStack(canvas);\r\n                container.isPointerBlocker = false;\r\n                container.vAlign = 'bottom';\r\n                container.hAlign = 'right';\r\n                container.stackOrientation = 0;\r\n                container.spacing = 0;\r\n                container.positionY = 75;\r\n                container.positionX = -25;\r\n            }\r\n            return container;\r\n        }\r\n        return {\r\n            add: function (id, texture) {\r\n                var image = images[id] || new UIImage(getContainer(), texture);\r\n                image.width = 128;\r\n                image.height = 128;\r\n                image.sourceTop = 0;\r\n                image.sourceLeft = 0;\r\n                image.sourceHeight = 256;\r\n                image.sourceWidth = 256;\r\n                image.isPointerBlocker = false;\r\n                image.visible = true;\r\n                images[id] = image;\r\n            },\r\n            remove: function (id) {\r\n                var image = images[id];\r\n                if (image) {\r\n                    image.visible = false;\r\n                    image.height = 0;\r\n                    image.width = 0;\r\n                }\r\n            },\r\n            has: function (id) {\r\n                return id in images && images[id].visible;\r\n            }\r\n        };\r\n    }\r\n    exports.createInventory = createInventory;\r\n});\r\ndefine(\"683aa047-8043-40f8-8d31-beb7ab1b138c/src/tween\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.easingConverter = exports.CurveType = exports.TweenSystem = exports.Tweenable = exports.Syncable = void 0;\r\n    var Syncable = /** @class */ (function () {\r\n        function Syncable() {\r\n        }\r\n        Syncable = __decorate([\r\n            Component('org.decentraland.Syncable')\r\n        ], Syncable);\r\n        return Syncable;\r\n    }());\r\n    exports.Syncable = Syncable;\r\n    var Tweenable = /** @class */ (function () {\r\n        function Tweenable(args) {\r\n            this.transition = 0;\r\n            this.curve = CurveType.LINEAR;\r\n            this.sender = 'initial';\r\n            this.type = args.type;\r\n            this.x = args.x;\r\n            this.y = args.y;\r\n            this.z = args.z;\r\n            this.speed = args.speed;\r\n            this.relative = args.relative;\r\n            this.onComplete = args.onComplete;\r\n            this.channel = args.channel;\r\n            this.origin = args.origin;\r\n            this.curve = args.curve;\r\n            this.sender = args.sender;\r\n            this.timestamp = args.timestamp;\r\n        }\r\n        Tweenable = __decorate([\r\n            Component('org.decentraland.Tweenable')\r\n        ], Tweenable);\r\n        return Tweenable;\r\n    }());\r\n    exports.Tweenable = Tweenable;\r\n    var offsetFactory = function (tweenable, relative) { return function (axis) {\r\n        var value = tweenable[axis];\r\n        var offset = relative[axis];\r\n        return tweenable.relative ? value + offset : value;\r\n    }; };\r\n    var TweenSystem = /** @class */ (function () {\r\n        function TweenSystem() {\r\n            this.syncableGroup = engine.getComponentGroup(Syncable);\r\n            this.tweenableGroup = engine.getComponentGroup(Tweenable);\r\n        }\r\n        TweenSystem.prototype.update = function (dt) {\r\n            var e_2, _a;\r\n            try {\r\n                for (var _b = __values(this.tweenableGroup.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var tweenable = entity.getComponent(Tweenable);\r\n                    var transform = entity.getComponent(Transform);\r\n                    var speed = tweenable.speed / 10;\r\n                    switch (tweenable.type) {\r\n                        case 'move': {\r\n                            var start = tweenable.origin;\r\n                            var offset = offsetFactory(tweenable, start);\r\n                            var end = new Vector3(offset('x'), offset('y'), offset('z'));\r\n                            if (tweenable.transition >= 0 && tweenable.transition < 1) {\r\n                                tweenable.transition += dt * speed;\r\n                                var easingIndex = easingConverter(tweenable.transition, tweenable.curve);\r\n                                transform.position.copyFrom(Vector3.Lerp(start, end, easingIndex));\r\n                            }\r\n                            else if (tweenable.transition >= 1) {\r\n                                tweenable.transition = -1;\r\n                                transform.position.copyFrom(end);\r\n                                // send actions\r\n                                tweenable.channel.sendActions(tweenable.onComplete);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 'rotate': {\r\n                            var start = Quaternion.Euler(tweenable.origin.x, tweenable.origin.y, tweenable.origin.z);\r\n                            var end = start.multiply(Quaternion.Euler(tweenable.x, tweenable.y, tweenable.z));\r\n                            if (tweenable.transition >= 0 && tweenable.transition < 1) {\r\n                                tweenable.transition += dt * speed;\r\n                                var easingIndex = easingConverter(tweenable.transition, tweenable.curve);\r\n                                transform.rotation.copyFrom(Quaternion.Slerp(start, end, easingIndex));\r\n                            }\r\n                            else if (tweenable.transition >= 1) {\r\n                                tweenable.transition = -1;\r\n                                transform.rotation.copyFrom(end);\r\n                                entity.removeComponent(Tweenable);\r\n                                // send actions\r\n                                tweenable.channel.sendActions(tweenable.onComplete);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 'scale': {\r\n                            var start = tweenable.origin;\r\n                            var offset = offsetFactory(tweenable, start);\r\n                            var end = new Vector3(offset('x'), offset('y'), offset('z'));\r\n                            if (tweenable.transition >= 0 && tweenable.transition < 1) {\r\n                                tweenable.transition += dt * speed;\r\n                                var easingIndex = easingConverter(tweenable.transition, tweenable.curve);\r\n                                transform.scale.copyFrom(Vector3.Lerp(start, end, easingIndex));\r\n                            }\r\n                            else if (tweenable.transition >= 1) {\r\n                                tweenable.transition = -1;\r\n                                transform.scale.copyFrom(end);\r\n                                entity.removeComponent(Tweenable);\r\n                                // send actions\r\n                                tweenable.channel.sendActions(tweenable.onComplete);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        };\r\n        return TweenSystem;\r\n    }());\r\n    exports.TweenSystem = TweenSystem;\r\n    var CurveType;\r\n    (function (CurveType) {\r\n        CurveType[\"LINEAR\"] = \"linear\";\r\n        CurveType[\"EASEINSINE\"] = \"easeinsine\";\r\n        CurveType[\"EASEOUTSINE\"] = \"easeoutsine\";\r\n        CurveType[\"EASEINOUTSINE\"] = \"easeinoutsine\";\r\n        CurveType[\"EASEINQUADRATIC\"] = \"easeinquadratic\";\r\n        CurveType[\"EASEOUTQUADRATIC\"] = \"easeoutquadratic\";\r\n        CurveType[\"EASEINOUTQUADRATIC\"] = \"easeinoutquadratic\";\r\n        CurveType[\"EASEINCUBIC\"] = \"easeincubic\";\r\n        CurveType[\"EASEOUTCUBIC\"] = \"easeoutcubic\";\r\n        CurveType[\"EASEINOUTCUBIC\"] = \"easeinoutcubic\";\r\n        CurveType[\"EASEINEXPO\"] = \"easeinexpo\";\r\n        CurveType[\"EASEOUTEXPO\"] = \"easeoutexpo\";\r\n        CurveType[\"EASEINOUTEXPO\"] = \"easeinoutexpo\";\r\n        CurveType[\"EASEINELASTIC\"] = \"easeinelastic\";\r\n        CurveType[\"EASEOUTELASTIC\"] = \"easeoutelastic\";\r\n        CurveType[\"EASEINOUTELASTIC\"] = \"easeinoutelastic\";\r\n        CurveType[\"EASEINBOUNCE\"] = \"easeinbounce\";\r\n        CurveType[\"EASEOUTEBOUNCE\"] = \"easeoutbounce\";\r\n        CurveType[\"EASEINOUTBOUNCE\"] = \"easeinoutbounce\";\r\n    })(CurveType = exports.CurveType || (exports.CurveType = {}));\r\n    function easingConverter(x, curveType) {\r\n        switch (curveType) {\r\n            case CurveType.LINEAR:\r\n                return x;\r\n                break;\r\n            case CurveType.EASEINSINE:\r\n                return 1 - Math.cos((x * Math.PI) / 2);\r\n                break;\r\n            case CurveType.EASEOUTSINE:\r\n                return Math.sin((x * Math.PI) / 2);\r\n                break;\r\n            case CurveType.EASEINOUTSINE:\r\n                return -(Math.cos(Math.PI * x) - 1) / 2;\r\n                break;\r\n            case CurveType.EASEINQUADRATIC:\r\n                return x * x;\r\n                break;\r\n            case CurveType.EASEOUTQUADRATIC:\r\n                return 1 - (1 - x) * (1 - x);\r\n                break;\r\n            case CurveType.EASEINOUTQUADRATIC:\r\n                return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\r\n                break;\r\n            case CurveType.EASEINCUBIC:\r\n                return x * x * x;\r\n                break;\r\n            case CurveType.EASEOUTCUBIC:\r\n                return 1 - Math.pow(1 - x, 3);\r\n                break;\r\n            case CurveType.EASEINOUTCUBIC:\r\n                return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\r\n                break;\r\n            case CurveType.EASEINEXPO:\r\n                return x === 0 ? 0 : Math.pow(2, 10 * x - 10);\r\n                break;\r\n            case CurveType.EASEOUTEXPO:\r\n                return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);\r\n                break;\r\n            case CurveType.EASEINOUTEXPO:\r\n                return x === 0\r\n                    ? 0\r\n                    : x === 1\r\n                        ? 1\r\n                        : x < 0.5\r\n                            ? Math.pow(2, 20 * x - 10) / 2\r\n                            : (2 - Math.pow(2, -20 * x + 10)) / 2;\r\n                break;\r\n            case CurveType.EASEINELASTIC:\r\n                var c4 = (2 * Math.PI) / 3;\r\n                return x === 0\r\n                    ? 0\r\n                    : x === 1\r\n                        ? 1\r\n                        : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);\r\n                break;\r\n            case CurveType.EASEOUTELASTIC:\r\n                var c5 = (2 * Math.PI) / 3;\r\n                return x === 0\r\n                    ? 0\r\n                    : x === 1\r\n                        ? 1\r\n                        : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c5) + 1;\r\n                break;\r\n            case CurveType.EASEINOUTELASTIC:\r\n                var c6 = (2 * Math.PI) / 4.5;\r\n                return x === 0\r\n                    ? 0\r\n                    : x === 1\r\n                        ? 1\r\n                        : x < 0.5\r\n                            ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c6)) / 2\r\n                            : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c6)) / 2 + 1;\r\n                break;\r\n            case CurveType.EASEINBOUNCE:\r\n                return 1 - bounce(1 - x);\r\n                break;\r\n            case CurveType.EASEOUTEBOUNCE:\r\n                return bounce(x);\r\n                break;\r\n            case CurveType.EASEINOUTBOUNCE:\r\n                return x < 0.5 ? (1 - bounce(1 - 2 * x)) / 2 : (1 + bounce(2 * x - 1)) / 2;\r\n                break;\r\n        }\r\n    }\r\n    exports.easingConverter = easingConverter;\r\n    function bounce(x) {\r\n        var n1 = 7.5625;\r\n        var d1 = 2.75;\r\n        if (x < 1 / d1) {\r\n            return n1 * x * x;\r\n        }\r\n        else if (x < 2 / d1) {\r\n            return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n        }\r\n        else if (x < 2.5 / d1) {\r\n            return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n        }\r\n        else {\r\n            return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n        }\r\n    }\r\n});\r\ndefine(\"683aa047-8043-40f8-8d31-beb7ab1b138c/src/delay\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.setTimeout = exports.DelaySystem = void 0;\r\n    var callbacks = {};\r\n    var DelaySystem = /** @class */ (function () {\r\n        function DelaySystem() {\r\n        }\r\n        DelaySystem.prototype.update = function (dt) {\r\n            var e_3, _a;\r\n            for (var timestamp in callbacks) {\r\n                if (+timestamp < Date.now()) {\r\n                    var callbackArray = callbacks[timestamp];\r\n                    try {\r\n                        for (var callbackArray_1 = (e_3 = void 0, __values(callbackArray)), callbackArray_1_1 = callbackArray_1.next(); !callbackArray_1_1.done; callbackArray_1_1 = callbackArray_1.next()) {\r\n                            var callback = callbackArray_1_1.value;\r\n                            callback();\r\n                        }\r\n                    }\r\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n                    finally {\r\n                        try {\r\n                            if (callbackArray_1_1 && !callbackArray_1_1.done && (_a = callbackArray_1.return)) _a.call(callbackArray_1);\r\n                        }\r\n                        finally { if (e_3) throw e_3.error; }\r\n                    }\r\n                    delete callbacks[timestamp];\r\n                }\r\n            }\r\n        };\r\n        return DelaySystem;\r\n    }());\r\n    exports.DelaySystem = DelaySystem;\r\n    function setTimeout(callback, timeout) {\r\n        var key = Date.now() + timeout;\r\n        if (!(key in callbacks)) {\r\n            callbacks[key] = [];\r\n        }\r\n        callbacks[key].push(callback);\r\n    }\r\n    exports.setTimeout = setTimeout;\r\n});\r\ndefine(\"683aa047-8043-40f8-8d31-beb7ab1b138c/src/animation\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Animated = void 0;\r\n    var Animated = /** @class */ (function () {\r\n        function Animated(args) {\r\n            this.sender = 'initial';\r\n            this.type = args.type;\r\n            this.name = args.name;\r\n            this.speed = args.speed;\r\n            this.channel = args.channel;\r\n            this.sender = args.sender;\r\n            this.loop = args.loop;\r\n            this.timestamp = args.timestamp;\r\n        }\r\n        Animated = __decorate([\r\n            Component('org.decentraland.Animation')\r\n        ], Animated);\r\n        return Animated;\r\n    }());\r\n    exports.Animated = Animated;\r\n});\r\ndefine(\"683aa047-8043-40f8-8d31-beb7ab1b138c/src/item\", [\"require\", \"exports\", \"683aa047-8043-40f8-8d31-beb7ab1b138c/src/tween\", \"683aa047-8043-40f8-8d31-beb7ab1b138c/src/delay\", \"683aa047-8043-40f8-8d31-beb7ab1b138c/src/animation\"], function (require, exports, tween_1, delay_1, animation_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var syncv = function (vector, values) {\r\n        var _a = __read(values, 3), x = _a[0], y = _a[1], z = _a[2];\r\n        vector.set(x, y, z);\r\n    };\r\n    var syncq = function (quaternion, values) {\r\n        var _a = __read(values, 4), x = _a[0], y = _a[1], z = _a[2], w = _a[3];\r\n        quaternion.set(x, y, z, w);\r\n    };\r\n    var getEntityByName = function (name) {\r\n        return Object.keys(engine.entities)\r\n            .map(function (key) { return engine.entities[key]; })\r\n            .filter(function (entity) { return entity.name === name; })[0];\r\n    };\r\n    var Tools = /** @class */ (function () {\r\n        function Tools() {\r\n            var _this = this;\r\n            this.canvas = new UICanvas();\r\n            this.tweenSystem = new tween_1.TweenSystem();\r\n            this.delaySystem = new delay_1.DelaySystem();\r\n            this.getContainer = function () {\r\n                if (!_this.container) {\r\n                    _this.container = new UIContainerStack(_this.canvas);\r\n                    _this.container.width = 800;\r\n                    _this.container.height = '100%';\r\n                    _this.container.hAlign = 'center';\r\n                    _this.container.vAlign = 'bottom';\r\n                    _this.container.positionY = 50;\r\n                }\r\n                return _this.container;\r\n            };\r\n        }\r\n        Tools.prototype.init = function () {\r\n            engine.addSystem(this.tweenSystem);\r\n            engine.addSystem(this.delaySystem);\r\n        };\r\n        Tools.prototype.getEntities = function () {\r\n            return this.tweenSystem.syncableGroup.entities;\r\n        };\r\n        Tools.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            // handle actions\r\n            channel.handleAction('move', function (action) {\r\n                var _a = action.values, target = _a.target, tween = __rest(_a, [\"target\"]);\r\n                var sender = action.sender;\r\n                var entity = getEntityByName(target);\r\n                if (entity) {\r\n                    var currentTime = +Date.now();\r\n                    if (entity.hasComponent(tween_1.Tweenable)) {\r\n                        var existingTweenble = entity.getComponent(tween_1.Tweenable);\r\n                        if (existingTweenble.sender !== action.sender &&\r\n                            existingTweenble.type == 'move' &&\r\n                            currentTime - existingTweenble.timestamp < 500 &&\r\n                            existingTweenble.x === action.values.x &&\r\n                            existingTweenble.y === action.values.y &&\r\n                            existingTweenble.z === action.values.z) {\r\n                            // same tween already in progress?\r\n                            return;\r\n                        }\r\n                    }\r\n                    var origin = entity.getComponent(Transform).position.clone();\r\n                    var tweenable = new tween_1.Tweenable(__assign(__assign({}, tween), { type: 'move', channel: channel, origin: origin, sender: sender, timestamp: currentTime }));\r\n                    entity.addComponentOrReplace(tweenable);\r\n                    entity.addComponentOrReplace(new tween_1.Syncable());\r\n                }\r\n            });\r\n            channel.handleAction('rotate', function (action) {\r\n                var _a = action.values, target = _a.target, tween = __rest(_a, [\"target\"]);\r\n                var sender = action.sender;\r\n                var entity = getEntityByName(target);\r\n                if (entity) {\r\n                    var currentTime = +Date.now();\r\n                    if (entity.hasComponent(tween_1.Tweenable)) {\r\n                        var existingTweenble = entity.getComponent(tween_1.Tweenable);\r\n                        if (existingTweenble.sender !== action.sender &&\r\n                            existingTweenble.type == 'rotate' &&\r\n                            currentTime - existingTweenble.timestamp < 500 &&\r\n                            existingTweenble.x === action.values.x &&\r\n                            existingTweenble.y === action.values.y &&\r\n                            existingTweenble.z === action.values.z) {\r\n                            // same tween already in progress?\r\n                            return;\r\n                        }\r\n                    }\r\n                    var origin = entity.getComponent(Transform).rotation.clone()\r\n                        .eulerAngles;\r\n                    var tweenable = new tween_1.Tweenable(__assign(__assign({}, tween), { type: 'rotate', channel: channel, origin: origin, sender: sender, timestamp: currentTime }));\r\n                    entity.addComponentOrReplace(tweenable);\r\n                    entity.addComponentOrReplace(new tween_1.Syncable());\r\n                }\r\n            });\r\n            channel.handleAction('scale', function (action) {\r\n                var _a = action.values, target = _a.target, tween = __rest(_a, [\"target\"]);\r\n                var sender = action.sender;\r\n                var entity = getEntityByName(target);\r\n                if (entity) {\r\n                    var currentTime = +Date.now();\r\n                    if (entity.hasComponent(tween_1.Tweenable)) {\r\n                        var existingTweenble = entity.getComponent(tween_1.Tweenable);\r\n                        if (existingTweenble.sender !== action.sender &&\r\n                            existingTweenble.type == 'scale' &&\r\n                            currentTime - existingTweenble.timestamp < 500 &&\r\n                            existingTweenble.x === action.values.x &&\r\n                            existingTweenble.y === action.values.y &&\r\n                            existingTweenble.z === action.values.z) {\r\n                            // same tween already in progress?\r\n                            return;\r\n                        }\r\n                    }\r\n                    var origin = entity.getComponent(Transform).scale.clone();\r\n                    var tweenable = new tween_1.Tweenable(__assign(__assign({}, tween), { type: 'scale', channel: channel, origin: origin, sender: sender, timestamp: currentTime }));\r\n                    entity.addComponentOrReplace(tweenable);\r\n                    entity.addComponentOrReplace(new tween_1.Syncable());\r\n                }\r\n            });\r\n            channel.handleAction('animate', function (action) {\r\n                var _a = action.values, target = _a.target, animation = _a.animation, animAction = _a.animAction, speed = _a.speed, loop = _a.loop;\r\n                var sender = action.sender;\r\n                var entity = getEntityByName(target);\r\n                if (entity) {\r\n                    var currentTime = +Date.now();\r\n                    var animator = void 0;\r\n                    if (entity.hasComponent(Animator)) {\r\n                        animator = entity.getComponent(Animator);\r\n                    }\r\n                    else {\r\n                        animator = new Animator();\r\n                        entity.addComponent(animator);\r\n                    }\r\n                    var currentAnim = void 0;\r\n                    switch (animAction) {\r\n                        case 'play':\r\n                            if (entity.hasComponent(animation_1.Animated)) {\r\n                                var existingAnim = entity.getComponent(animation_1.Animated);\r\n                                if (existingAnim.sender !== action.sender &&\r\n                                    existingAnim.type == 'play' &&\r\n                                    currentTime - existingAnim.timestamp < 500 &&\r\n                                    existingAnim.name === action.values.animation &&\r\n                                    existingAnim.speed === existingAnim.speed) {\r\n                                    // same anim already in progress?\r\n                                    break;\r\n                                }\r\n                                if (existingAnim.type == 'play') {\r\n                                    // stop any other playing animations\r\n                                    animator.getClip(existingAnim.name).stop();\r\n                                }\r\n                            }\r\n                            var animClip = animator.getClip(animation);\r\n                            animClip.looping = loop;\r\n                            animClip.speed = speed;\r\n                            animClip.playing = true;\r\n                            var animated = new animation_1.Animated({\r\n                                type: 'play',\r\n                                name: animation,\r\n                                speed: speed,\r\n                                loop: loop,\r\n                                channel: channel,\r\n                                sender: sender,\r\n                                timestamp: currentTime,\r\n                            });\r\n                            entity.addComponentOrReplace(animated);\r\n                            entity.addComponentOrReplace(new tween_1.Syncable());\r\n                            break;\r\n                        case 'stop':\r\n                            if (!entity.hasComponent(animation_1.Animated)) {\r\n                                break;\r\n                            }\r\n                            currentAnim = entity.getComponent(animation_1.Animated).name;\r\n                            animator.getClip(currentAnim).stop();\r\n                            entity.getComponent(animation_1.Animated).type = 'stop';\r\n                            break;\r\n                        case 'pause':\r\n                            if (!entity.hasComponent(animation_1.Animated)) {\r\n                                break;\r\n                            }\r\n                            currentAnim = entity.getComponent(animation_1.Animated).name;\r\n                            animator.getClip(currentAnim).pause();\r\n                            entity.getComponent(animation_1.Animated).type = 'pause';\r\n                            break;\r\n                        case 'reset':\r\n                            if (!entity.hasComponent(animation_1.Animated)) {\r\n                                break;\r\n                            }\r\n                            currentAnim = entity.getComponent(animation_1.Animated).name;\r\n                            animator.getClip(currentAnim).reset();\r\n                            entity.getComponent(animation_1.Animated).type = 'reset';\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n            channel.handleAction('delay', function (action) {\r\n                var _a = action.values, timeout = _a.timeout, onTimeout = _a.onTimeout;\r\n                if (action.sender === channel.id) {\r\n                    (0, delay_1.setTimeout)(function () {\r\n                        channel.sendActions(onTimeout);\r\n                    }, timeout * 1000);\r\n                }\r\n            });\r\n            channel.handleAction('interval', function (action) {\r\n                var _a = action.values, timeout = _a.timeout, onTimeout = _a.onTimeout;\r\n                if (action.sender === channel.id) {\r\n                    var intervalAction_1 = channel.createAction(action.actionId, action.values);\r\n                    channel.sendActions(onTimeout);\r\n                    (0, delay_1.setTimeout)(function () { return channel.sendActions([intervalAction_1]); }, timeout * 1000);\r\n                }\r\n            });\r\n            channel.handleAction('print', function (action) {\r\n                var _a = action.values, message = _a.message, duration = _a.duration, multiplayer = _a.multiplayer;\r\n                if (!multiplayer && action.sender !== channel.id) {\r\n                    // if not multiplayer and not ours prevent showing the message\r\n                    return;\r\n                }\r\n                var text = new UIText(_this.getContainer());\r\n                text.value = message;\r\n                text.fontSize = 24;\r\n                text.height = 30;\r\n                text.width = '100%';\r\n                text.hAlign = 'center';\r\n                text.hTextAlign = 'center';\r\n                (0, delay_1.setTimeout)(function () {\r\n                    text.visible = false;\r\n                    text.height = 0;\r\n                }, duration * 1000);\r\n            });\r\n            // sync initial values\r\n            channel.request('syncEntities', function (syncEntities) {\r\n                var e_4, _a;\r\n                try {\r\n                    for (var syncEntities_1 = __values(syncEntities), syncEntities_1_1 = syncEntities_1.next(); !syncEntities_1_1.done; syncEntities_1_1 = syncEntities_1.next()) {\r\n                        var syncEntity = syncEntities_1_1.value;\r\n                        var entityName = syncEntity.entityName, transform = syncEntity.transform, tween = syncEntity.tween, anim = syncEntity.anim;\r\n                        var entity = getEntityByName(entityName);\r\n                        if (entity) {\r\n                            var original = entity.getComponent(Transform);\r\n                            syncv(original.position, transform.position);\r\n                            syncq(original.rotation, transform.rotation);\r\n                            syncv(original.scale, transform.scale);\r\n                            if (tween) {\r\n                                var tweenable = new tween_1.Tweenable(__assign(__assign({}, tween), { channel: channel }));\r\n                                entity.addComponentOrReplace(tweenable);\r\n                            }\r\n                            if (anim) {\r\n                                var animated = new animation_1.Animated(__assign(__assign({}, anim), { channel: channel }));\r\n                                entity.addComponentOrReplace(animated);\r\n                                var animator = new Animator();\r\n                                entity.addComponentOrReplace(animator);\r\n                                var animClip = animator.getClip(anim.name);\r\n                                animClip.looping = anim.loop;\r\n                                animClip.speed = anim.speed;\r\n                                switch (anim.type) {\r\n                                    case 'play':\r\n                                        animClip.play();\r\n                                        break;\r\n                                    case 'stop':\r\n                                        animClip.stop();\r\n                                        break;\r\n                                    case 'pause':\r\n                                        animClip.pause();\r\n                                        break;\r\n                                    case 'reset':\r\n                                        animClip.reset();\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (syncEntities_1_1 && !syncEntities_1_1.done && (_a = syncEntities_1.return)) _a.call(syncEntities_1);\r\n                    }\r\n                    finally { if (e_4) throw e_4.error; }\r\n                }\r\n            });\r\n            channel.reply('syncEntities', function () {\r\n                var entities = _this.getEntities();\r\n                return entities.map(function (entity) {\r\n                    var transform = entity.getComponent(Transform);\r\n                    var syncEntity = {\r\n                        entityName: entity.name,\r\n                        transform: {\r\n                            position: [\r\n                                transform.position.x,\r\n                                transform.position.y,\r\n                                transform.position.z,\r\n                            ],\r\n                            rotation: [\r\n                                transform.rotation.x,\r\n                                transform.rotation.y,\r\n                                transform.rotation.z,\r\n                                transform.rotation.w,\r\n                            ],\r\n                            scale: [transform.scale.x, transform.scale.y, transform.scale.z],\r\n                        },\r\n                    };\r\n                    if (entity.hasComponent(tween_1.Tweenable)) {\r\n                        var _a = entity.getComponent(tween_1.Tweenable), _ = _a.channel, tween = __rest(_a, [\"channel\"]);\r\n                        syncEntity.tween = tween;\r\n                    }\r\n                    if (entity.hasComponent(animation_1.Animated)) {\r\n                        var _b = entity.getComponent(animation_1.Animated), _ = _b.channel, anim = __rest(_b, [\"channel\"]);\r\n                        syncEntity.anim = anim;\r\n                    }\r\n                    return syncEntity;\r\n                });\r\n            });\r\n        };\r\n        return Tools;\r\n    }());\r\n    exports.default = Tools;\r\n});\r\ndefine(\"846479b0-75d3-450d-bbd6-7e6b3355a7a2/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Button = /** @class */ (function () {\r\n        function Button() {\r\n            this.active = {};\r\n        }\r\n        Button.prototype.init = function () {\r\n            this.material = new BasicMaterial();\r\n            this.material.texture = new Texture('846479b0-75d3-450d-bbd6-7e6b3355a7a2/models/transparent-texture.png');\r\n            this.material.alphaTest = 1;\r\n        };\r\n        Button.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var shape = new BoxShape();\r\n            shape.withCollisions = false;\r\n            this.active[host.name] = props.enabled;\r\n            channel.handleAction('enable', function () {\r\n                _this.active[host.name] = true;\r\n            });\r\n            channel.handleAction('disable', function () {\r\n                _this.active[host.name] = false;\r\n            });\r\n            // sync initial values\r\n            channel.request('enabled', function (enabled) {\r\n                _this.active[host.name] = enabled;\r\n            });\r\n            channel.reply('enabled', function () { return _this.active[host.name]; });\r\n            var ent = new Entity();\r\n            ent.setParent(host);\r\n            ent.addComponent(shape);\r\n            ent.addComponent(this.material);\r\n            ent.addComponent(new Transform({ position: new Vector3(0, 0.5, 0) }));\r\n            ent.addComponent(new OnPointerDown(function () {\r\n                if (_this.active[host.name]) {\r\n                    channel.sendActions(props.onClick);\r\n                }\r\n            }, {\r\n                button: props.button,\r\n                hoverText: props.onClickText,\r\n                distance: 6\r\n            }));\r\n        };\r\n        return Button;\r\n    }());\r\n    exports.default = Button;\r\n});\r\ndefine(\"1ab2733f-1782-4521-9eda-6aa8ad684277/src/utils\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Box = void 0;\r\n    // Adapted from Threejs\r\n    var Box = /** @class */ (function () {\r\n        function Box(min, max) {\r\n            this.min = new Vector3(+Infinity, +Infinity, +Infinity);\r\n            this.max = new Vector3(-Infinity, -Infinity, -Infinity);\r\n            this.min = min;\r\n            this.max = max;\r\n        }\r\n        Box.prototype.containsPoint = function (point) {\r\n            return point.x < this.min.x ||\r\n                point.x > this.max.x ||\r\n                point.y < this.min.y ||\r\n                point.y > this.max.y ||\r\n                point.z < this.min.z ||\r\n                point.z > this.max.z\r\n                ? false\r\n                : true;\r\n        };\r\n        return Box;\r\n    }());\r\n    exports.Box = Box;\r\n});\r\ndefine(\"1ab2733f-1782-4521-9eda-6aa8ad684277/src/area\", [\"require\", \"exports\", \"1ab2733f-1782-4521-9eda-6aa8ad684277/src/utils\"], function (require, exports, utils_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TriggerableAreaSystem = exports.getGlobalPosition = exports.TriggerableArea = void 0;\r\n    var TriggerableArea = /** @class */ (function () {\r\n        function TriggerableArea() {\r\n            this.lastState = 0;\r\n            this.enabled = true;\r\n            this._transformCache = '(0 0 0)';\r\n        }\r\n        TriggerableArea = __decorate([\r\n            Component('org.decentraland.TriggerableArea')\r\n        ], TriggerableArea);\r\n        return TriggerableArea;\r\n    }());\r\n    exports.TriggerableArea = TriggerableArea;\r\n    function getGlobalPosition(subject) {\r\n        var entityPosition = subject.hasComponent(Transform)\r\n            ? subject.getComponent(Transform).position.clone()\r\n            : Vector3.Zero();\r\n        var parentEntity = subject.getParent();\r\n        if (parentEntity.alive) {\r\n            if (parentEntity != null) {\r\n                var parentRotation = parentEntity.hasComponent(Transform)\r\n                    ? parentEntity.getComponent(Transform).rotation\r\n                    : Quaternion.Identity;\r\n                return getGlobalPosition(parentEntity).add(entityPosition.rotate(parentRotation));\r\n            }\r\n        }\r\n        return entityPosition;\r\n    }\r\n    exports.getGlobalPosition = getGlobalPosition;\r\n    var TriggerableAreaSystem = /** @class */ (function () {\r\n        function TriggerableAreaSystem() {\r\n            this.group = engine.getComponentGroup(TriggerableArea);\r\n        }\r\n        TriggerableAreaSystem.prototype.update = function (_) {\r\n            var e_5, _a;\r\n            try {\r\n                for (var _b = __values(this.group.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var triggerableArea = entity.getComponent(TriggerableArea);\r\n                    var transform = entity.getComponent(Transform);\r\n                    var rotation = transform.rotation, scale = transform.scale;\r\n                    var position = getGlobalPosition(entity);\r\n                    if (triggerableArea.enabled) {\r\n                        var radius = Math.max(Math.max(Math.abs(scale.x), Math.abs(scale.z)), Math.abs(scale.y));\r\n                        var distance = Vector3.DistanceSquared(position, Camera.instance.position);\r\n                        if (distance >\r\n                            (radius + Camera.instance.playerHeight) *\r\n                                (radius + Camera.instance.playerHeight))\r\n                            continue;\r\n                        var transformCache = \"\".concat(position, \" \").concat(rotation, \" \").concat(scale);\r\n                        var inverseMatrix = Matrix.Invert(Matrix.Compose(Vector3.One(), rotation, position));\r\n                        var playerPos = Camera.instance.position.clone();\r\n                        if (transformCache !== triggerableArea._transformCache) {\r\n                            triggerableArea._boxCache = this.computeBoundingBox(transform);\r\n                            triggerableArea._transformCache = transformCache;\r\n                        }\r\n                        // Feet\r\n                        var inversePoint1 = playerPos.subtractFromFloats(0, Camera.instance.playerHeight, 0);\r\n                        inversePoint1.applyMatrix4(inverseMatrix);\r\n                        // Mid body\r\n                        var inversePoint2 = playerPos.subtractFromFloats(0, Camera.instance.playerHeight / 2, 0);\r\n                        inversePoint2.applyMatrix4(inverseMatrix);\r\n                        // Head\r\n                        var inversePoint3 = playerPos.clone();\r\n                        inversePoint3.applyMatrix4(inverseMatrix);\r\n                        if (triggerableArea._boxCache.containsPoint(inversePoint1) ||\r\n                            triggerableArea._boxCache.containsPoint(inversePoint2) ||\r\n                            triggerableArea._boxCache.containsPoint(inversePoint3)) {\r\n                            if (triggerableArea.lastState === 0) {\r\n                                triggerableArea.onEnter();\r\n                            }\r\n                            triggerableArea.lastState = 1;\r\n                        }\r\n                        else {\r\n                            if (triggerableArea.lastState === 1) {\r\n                                triggerableArea.onLeave();\r\n                            }\r\n                            triggerableArea.lastState = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_5) throw e_5.error; }\r\n            }\r\n        };\r\n        TriggerableAreaSystem.prototype.computeBoundingBox = function (transform) {\r\n            var scale = transform.scale;\r\n            var halfScaleX = scale.x * 0.5;\r\n            var halfScaleZ = scale.z * 0.5;\r\n            var max = new Vector3(halfScaleX, scale.y, halfScaleZ);\r\n            var min = new Vector3(-halfScaleX, 0, -halfScaleZ);\r\n            var inverseBox = new utils_1.Box(min, max);\r\n            return inverseBox;\r\n        };\r\n        return TriggerableAreaSystem;\r\n    }());\r\n    exports.TriggerableAreaSystem = TriggerableAreaSystem;\r\n});\r\ndefine(\"1ab2733f-1782-4521-9eda-6aa8ad684277/src/item\", [\"require\", \"exports\", \"1ab2733f-1782-4521-9eda-6aa8ad684277/src/area\"], function (require, exports, area_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Button = /** @class */ (function () {\r\n        function Button() {\r\n        }\r\n        Button.prototype.init = function () {\r\n            engine.addSystem(new area_1.TriggerableAreaSystem());\r\n        };\r\n        Button.prototype.spawn = function (host, props, channel) {\r\n            var trigger = new area_1.TriggerableArea();\r\n            trigger.enabled = props.enabled;\r\n            channel.handleAction('enable', function () {\r\n                trigger.enabled = true;\r\n            });\r\n            channel.handleAction('disable', function () {\r\n                trigger.enabled = false;\r\n            });\r\n            trigger.onEnter = function () {\r\n                if (trigger.enabled) {\r\n                    channel.sendActions(props.onEnter);\r\n                }\r\n            };\r\n            trigger.onLeave = function () {\r\n                if (trigger.enabled) {\r\n                    channel.sendActions(props.onLeave);\r\n                }\r\n            };\r\n            // sync initial values\r\n            channel.request('enabled', function (enabled) { return (trigger.enabled = enabled); });\r\n            channel.reply('enabled', function () { return trigger.enabled; });\r\n            host.addComponent(trigger);\r\n        };\r\n        return Button;\r\n    }());\r\n    exports.default = Button;\r\n});\r\ndefine(\"a747f104-5434-42a8-a543-8739c24cf253/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var defaultStation = 'https://theuniverse.club/live/genesisplaza/index.m3u8';\r\n    var Button = /** @class */ (function () {\r\n        function Button() {\r\n            this.channel = '';\r\n            this.video = {};\r\n            this.materials = {};\r\n            this.active = {};\r\n            this.volume = {};\r\n            this.sign = {};\r\n        }\r\n        Button.prototype.init = function () { };\r\n        Button.prototype.toggle = function (entity, value) {\r\n            log('all screens: ', this.video, ' setting: ', entity.name, ' to ', value);\r\n            if (value) {\r\n                if (this.activeScreen && this.activeScreen == entity) {\r\n                    return;\r\n                }\r\n                else if (this.activeScreen) {\r\n                    this.toggle(this.activeScreen, false);\r\n                }\r\n                this.activeScreen = entity;\r\n                this.active[entity.name] = true;\r\n                this.video[entity.name].volume = this.volume[entity.name];\r\n                this.video[entity.name].playing = true;\r\n                engine.removeEntity(this.sign[entity.name]);\r\n                //this.sign[entity.name].getComponent(PlaneShape).visible = false\r\n            }\r\n            else {\r\n                if (!this.activeScreen || this.activeScreen != entity) {\r\n                    return;\r\n                }\r\n                this.activeScreen = null;\r\n                this.active[entity.name] = false;\r\n                this.video[entity.name].playing = false;\r\n                //this.sign[entity.name].getComponent(PlaneShape).visible = true\r\n            }\r\n            return;\r\n        };\r\n        Button.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var screen = new Entity(host.name + '-screen');\r\n            screen.setParent(host);\r\n            var scaleMult = 1.55;\r\n            screen.addComponent(new PlaneShape());\r\n            screen.addComponent(new Transform({\r\n                scale: new Vector3(1.92 * scaleMult, 1.08 * scaleMult, 10 * scaleMult),\r\n                position: new Vector3(0, 0.548 * scaleMult, 0),\r\n            }));\r\n            if (props.customStation) {\r\n                this.channel = props.customStation;\r\n            }\r\n            else if (props.station) {\r\n                this.channel = props.station;\r\n            }\r\n            else {\r\n                this.channel = defaultStation;\r\n            }\r\n            // //test\r\n            // let test = new Entity()\r\n            // test.setParent(host)\r\n            // test.addComponentOrReplace(new GLTFShape('a747f104-5434-42a8-a543-8739c24cf253/models/stream_preview.glb'))\r\n            // video material\r\n            this.video[screen.name] = new VideoTexture(new VideoClip(this.channel));\r\n            this.materials[screen.name] = new Material();\r\n            this.materials[screen.name].albedoTexture = this.video[screen.name];\r\n            this.materials[screen.name].specularIntensity = 0;\r\n            this.materials[screen.name].roughness = 1;\r\n            this.materials[screen.name].metallic = 0;\r\n            this.materials[screen.name].emissiveTexture = this.video[screen.name];\r\n            this.materials[screen.name].emissiveIntensity = 0.8;\r\n            this.materials[screen.name].emissiveColor = new Color3(1, 1, 1);\r\n            screen.addComponent(this.materials[screen.name]);\r\n            // icon for streaming\r\n            this.sign[screen.name] = new Entity(host.name + '-sign');\r\n            this.sign[screen.name].setParent(screen);\r\n            this.sign[screen.name].addComponent(new PlaneShape());\r\n            this.sign[screen.name].addComponent(new Transform({\r\n                position: new Vector3(0, 0, 0.002),\r\n                rotation: Quaternion.Euler(180, 0, 0),\r\n            }));\r\n            this.volume[screen.name] = props.volume;\r\n            var placeholderMaterial = new Material();\r\n            placeholderMaterial.albedoTexture = new Texture(props.image ? props.image : 'a747f104-5434-42a8-a543-8739c24cf253/images/stream.png');\r\n            placeholderMaterial.specularIntensity = 0;\r\n            placeholderMaterial.roughness = 1;\r\n            this.sign[screen.name].addComponent(placeholderMaterial);\r\n            if (props.onClick) {\r\n                this.sign[screen.name].addComponent(new OnPointerDown(function () {\r\n                    channel.sendActions(props.onClick);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: props.onClickText,\r\n                    distance: 6,\r\n                }));\r\n                screen.addComponent(new OnPointerDown(function () {\r\n                    log('clicked');\r\n                    channel.sendActions(props.onClick);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: props.onClickText,\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            if (props.startOn) {\r\n                this.toggle(screen, true);\r\n            }\r\n            else {\r\n                this.toggle(screen, false);\r\n            }\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(screen, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(screen, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            channel.handleAction('toggle', function (_a) {\r\n                var sender = _a.sender;\r\n                var value = !_this.active[screen.name];\r\n                _this.toggle(screen, value);\r\n                if (sender === channel.id) {\r\n                    if (value) {\r\n                        channel.sendActions(props.onActivate);\r\n                    }\r\n                    else {\r\n                        channel.sendActions(props.onDeactivate);\r\n                    }\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(screen, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[screen.name]; });\r\n        };\r\n        return Button;\r\n    }());\r\n    exports.default = Button;\r\n});\r\ndefine(\"b79a150e-5914-4fdf-a6b4-c7ff0c6833dd/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('b79a150e-5914-4fdf-a6b4-c7ff0c6833dd/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('b79a150e-5914-4fdf-a6b4-c7ff0c6833dd/models/FuturisticLight_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('b79a150e-5914-4fdf-a6b4-c7ff0c6833dd/models/FuturisticLight_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"9ca76658-8c9c-43fe-ab17-e4ec05b6ae35/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('9ca76658-8c9c-43fe-ab17-e4ec05b6ae35/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('9ca76658-8c9c-43fe-ab17-e4ec05b6ae35/models/Spotlight_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('9ca76658-8c9c-43fe-ab17-e4ec05b6ae35/models/Spotlight_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"4adfea35-fb5c-4f64-bb5e-c7ebfa350868/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Button = /** @class */ (function () {\r\n        function Button() {\r\n            this.clip = new AudioClip('4adfea35-fb5c-4f64-bb5e-c7ebfa350868/sounds/EDMLoop.mp3');\r\n            this.active = {};\r\n        }\r\n        Button.prototype.init = function () { };\r\n        Button.prototype.toggle = function (entity, value) {\r\n            if (this.active[entity.name] === value)\r\n                return;\r\n            if (value) {\r\n                var source = new AudioSource(this.clip);\r\n                entity.addComponentOrReplace(source);\r\n                source.loop = true;\r\n                source.playing = true;\r\n            }\r\n            else {\r\n                var source = entity.getComponent(AudioSource);\r\n                if (source) {\r\n                    source.playing = false;\r\n                }\r\n            }\r\n            var animator = entity.getComponent(Animator);\r\n            var activateClip = animator.getClip('Mix');\r\n            var deactivateClip = animator.getClip('Pause');\r\n            activateClip.stop();\r\n            deactivateClip.stop();\r\n            var clip = value ? activateClip : deactivateClip;\r\n            clip.play();\r\n            this.active[entity.name] = value;\r\n        };\r\n        Button.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var transmitter = new Entity(host.name + '-button');\r\n            transmitter.setParent(host);\r\n            var animator = new Animator();\r\n            var deactivateClip = new AnimationState('Pause', { looping: true });\r\n            var activateClip = new AnimationState('Mix', { looping: true });\r\n            animator.addClip(deactivateClip);\r\n            animator.addClip(activateClip);\r\n            transmitter.addComponent(animator);\r\n            deactivateClip.play();\r\n            transmitter.addComponent(new GLTFShape('4adfea35-fb5c-4f64-bb5e-c7ebfa350868/models/Mixtable_Anim.glb'));\r\n            transmitter.addComponent(new OnPointerDown(function () {\r\n                var value = !_this.active[transmitter.name];\r\n                var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                channel.sendActions([action]);\r\n            }, {\r\n                button: ActionButton.POINTER,\r\n                hoverText: 'On/Off',\r\n                distance: 6\r\n            }));\r\n            this.active[transmitter.name] = false;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(transmitter, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(transmitter, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(transmitter, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[transmitter.name]; });\r\n        };\r\n        return Button;\r\n    }());\r\n    exports.default = Button;\r\n});\r\ndefine(\"da30258e-3cc1-48a4-bc55-508e923ae977/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    /// click to hear siren, click again for siren to stop\r\n    var Door = /** @class */ (function () {\r\n        function Door() {\r\n            this.Clip = new AudioClip(\"da30258e-3cc1-48a4-bc55-508e923ae977/sounds/EDMLoop.mp3\");\r\n            this.active = {};\r\n        }\r\n        Door.prototype.init = function () { };\r\n        Door.prototype.toggle = function (entity) {\r\n            var source = new AudioSource(this.Clip);\r\n            entity.addComponentOrReplace(source);\r\n            source.playing = true;\r\n        };\r\n        Door.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var car = new Entity(host.name + \"-button\");\r\n            car.setParent(host);\r\n            car.addComponent(new GLTFShape(\"da30258e-3cc1-48a4-bc55-508e923ae977/models/Cyberpunk_Speakers.glb\"));\r\n            if (props.clickable) {\r\n                car.addComponent(new OnPointerDown(function () {\r\n                    var activateAction = channel.createAction('activate', {});\r\n                    channel.sendActions([activateAction]);\r\n                }));\r\n            }\r\n            // handle actions\r\n            channel.handleAction(\"activate\", function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(car);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n        };\r\n        return Door;\r\n    }());\r\n    exports.default = Door;\r\n});\r\n// sync initial values\r\ndefine(\"8d62d5a3-411c-43f8-a438-574ccf3d0fbe/src/utils\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.RadioDelayManager = exports.Delay = void 0;\r\n    var Delay = /** @class */ (function () {\r\n        function Delay(timer, action) {\r\n            this.timer = timer / 1000;\r\n            this.action = action;\r\n        }\r\n        Delay = __decorate([\r\n            Component('org.decentraland.radioDelay')\r\n        ], Delay);\r\n        return Delay;\r\n    }());\r\n    exports.Delay = Delay;\r\n    var RadioDelayManager = /** @class */ (function () {\r\n        function RadioDelayManager() {\r\n            this.group = engine.getComponentGroup(Delay);\r\n        }\r\n        RadioDelayManager.prototype.update = function (dt) {\r\n            var e_6, _a;\r\n            try {\r\n                for (var _b = __values(this.group.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var delay = entity.getComponent(Delay);\r\n                    delay.timer -= dt;\r\n                    if (delay.timer < 0) {\r\n                        delay.action();\r\n                        entity.removeComponent(Delay);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_6) throw e_6.error; }\r\n            }\r\n        };\r\n        return RadioDelayManager;\r\n    }());\r\n    exports.RadioDelayManager = RadioDelayManager;\r\n});\r\ndefine(\"8d62d5a3-411c-43f8-a438-574ccf3d0fbe/src/item\", [\"require\", \"exports\", \"8d62d5a3-411c-43f8-a438-574ccf3d0fbe/src/utils\"], function (require, exports, utils_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var defaultStation = 'https://icecast.ravepartyradio.org/ravepartyradio-192.mp3';\r\n    var Button = /** @class */ (function () {\r\n        function Button() {\r\n            this.clip = new AudioClip('8d62d5a3-411c-43f8-a438-574ccf3d0fbe/sounds/click.mp3');\r\n            this.station = '';\r\n            this.active = {};\r\n            this.volume = {};\r\n        }\r\n        Button.prototype.init = function () {\r\n            engine.addSystem(new utils_2.RadioDelayManager());\r\n        };\r\n        Button.prototype.toggle = function (entity, value, silent) {\r\n            if (!silent) {\r\n                var source = new AudioSource(this.clip);\r\n                entity.addComponentOrReplace(source);\r\n                source.playing = true;\r\n            }\r\n            var animator = entity.getComponent(Animator);\r\n            var switchClip = animator.getClip('Speaker_Action');\r\n            var lightClip = animator.getClip('Click_Action');\r\n            if (value) {\r\n                lightClip.stop();\r\n                switchClip.stop();\r\n                switchClip.play();\r\n                entity.addComponent(new utils_2.Delay(500, function () {\r\n                    switchClip.stop();\r\n                    lightClip.stop();\r\n                    lightClip.play();\r\n                }));\r\n                var musicStream = new AudioStream(this.station);\r\n                entity.addComponentOrReplace(musicStream);\r\n                musicStream.playing = true;\r\n                musicStream.volume = this.volume[entity.name];\r\n            }\r\n            else {\r\n                lightClip.stop();\r\n                switchClip.stop();\r\n                switchClip.play();\r\n                if (entity.hasComponent(AudioStream)) {\r\n                    entity.getComponent(AudioStream).playing = false;\r\n                }\r\n            }\r\n        };\r\n        Button.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var button = new Entity(host.name + '-radio');\r\n            button.setParent(host);\r\n            button.addComponent(new GLTFShape('8d62d5a3-411c-43f8-a438-574ccf3d0fbe/models/Radio_Anim.glb'));\r\n            var animator = new Animator();\r\n            var switchClip = new AnimationState('Speaker_Action', { looping: false });\r\n            var lightClip = new AnimationState('Click_Action', { looping: true });\r\n            animator.addClip(switchClip);\r\n            animator.addClip(lightClip);\r\n            button.addComponent(animator);\r\n            if (props.customStation) {\r\n                this.station = props.customStation;\r\n            }\r\n            else if (props.station) {\r\n                this.station = props.station;\r\n            }\r\n            else {\r\n                this.station = defaultStation;\r\n            }\r\n            if (props.onClick) {\r\n                button.addComponent(new OnPointerDown(function () {\r\n                    channel.sendActions(props.onClick);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: props.onClickText,\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            this.volume[button.name] = props.volume;\r\n            if (props.startOn) {\r\n                this.toggle(button, true, true);\r\n                this.active[button.name] = true;\r\n            }\r\n            else {\r\n                this.active[button.name] = false;\r\n            }\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.active[button.name] = true;\r\n                _this.toggle(button, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.active[button.name] = false;\r\n                _this.toggle(button, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            channel.handleAction('toggle', function (_a) {\r\n                var sender = _a.sender;\r\n                var value = !_this.active[button.name];\r\n                _this.active[button.name] = value;\r\n                _this.toggle(button, value);\r\n                if (sender === channel.id) {\r\n                    if (value) {\r\n                        channel.sendActions(props.onActivate);\r\n                    }\r\n                    else {\r\n                        channel.sendActions(props.onDeactivate);\r\n                    }\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(button, isActive, true);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[button.name]; });\r\n        };\r\n        return Button;\r\n    }());\r\n    exports.default = Button;\r\n});\r\ndefine(\"2166e10c-6d1a-4579-a18e-20abb4e1e8bf/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('2166e10c-6d1a-4579-a18e-20abb4e1e8bf/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('2166e10c-6d1a-4579-a18e-20abb4e1e8bf/models/StripLights_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('2166e10c-6d1a-4579-a18e-20abb4e1e8bf/models/StripLights_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"a3401af9-8e2b-4b2b-915e-ccb8ed611c88/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('a3401af9-8e2b-4b2b-915e-ccb8ed611c88/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('a3401af9-8e2b-4b2b-915e-ccb8ed611c88/models/SpotlightStrip_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('a3401af9-8e2b-4b2b-915e-ccb8ed611c88/models/SpotlightStrip_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"4c9fa249-97ec-4f32-8fb8-b96f69ba8892/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Spark = /** @class */ (function () {\r\n        function Spark() {\r\n            this.active = {};\r\n        }\r\n        Spark.prototype.init = function () { };\r\n        Spark.prototype.toggle = function (entity, value) {\r\n            if (this.active[entity.name] === value)\r\n                return;\r\n            var animator = entity.getComponent(Animator);\r\n            var clip = animator.getClip('Spark_Action');\r\n            clip.looping = true;\r\n            if (value) {\r\n                entity.getComponent(GLTFShape).visible = true;\r\n                clip.playing = true;\r\n            }\r\n            else {\r\n                entity.getComponent(GLTFShape).visible = false;\r\n                clip.playing = false;\r\n            }\r\n            this.active[entity.name] = value;\r\n        };\r\n        Spark.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var siren = new Entity(host.name + '-button');\r\n            siren.setParent(host);\r\n            var animator = new Animator();\r\n            var clip = new AnimationState('Spark_Action_Armature.000', {\r\n                looping: true,\r\n            });\r\n            animator.addClip(clip);\r\n            siren.addComponent(animator);\r\n            siren.addComponent(new GLTFShape('4c9fa249-97ec-4f32-8fb8-b96f69ba8892/models/Spark.glb'));\r\n            if (!props.active) {\r\n                siren.getComponent(GLTFShape).visible = false;\r\n            }\r\n            else {\r\n                clip.play();\r\n            }\r\n            this.active[siren.name] = props.active;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(siren, true);\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(siren, false);\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(siren, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[siren.name]; });\r\n        };\r\n        return Spark;\r\n    }());\r\n    exports.default = Spark;\r\n});\r\ndefine(\"2263960d-51ff-483a-bd2a-a9d286558620/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('2263960d-51ff-483a-bd2a-a9d286558620/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('2263960d-51ff-483a-bd2a-a9d286558620/models/FunkyFloorLight_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('2263960d-51ff-483a-bd2a-a9d286558620/models/FunkyFloorLight_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"e25d12ec-e349-4c76-9826-1094458e3982/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('e25d12ec-e349-4c76-9826-1094458e3982/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('e25d12ec-e349-4c76-9826-1094458e3982/models/Lamp_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('e25d12ec-e349-4c76-9826-1094458e3982/models/Lamp_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"85cf3207-2792-4349-9938-21fd82ea2168/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('85cf3207-2792-4349-9938-21fd82ea2168/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('85cf3207-2792-4349-9938-21fd82ea2168/models/RainLight_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('85cf3207-2792-4349-9938-21fd82ea2168/models/RainLight_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"7d669c08-c354-45e4-b3a3-c915c8fd6b6e/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var SignPost = /** @class */ (function () {\r\n        function SignPost() {\r\n        }\r\n        SignPost.prototype.init = function () { };\r\n        SignPost.prototype.spawn = function (host, props, channel) {\r\n            var sign = new Entity();\r\n            sign.setParent(host);\r\n            //sign.addComponent(new GLTFShape('models/QR_SimpleFrame.glb'))\r\n            sign.addComponent(new Transform({}));\r\n            var url = props.image;\r\n            var QRTexture = new Texture(url);\r\n            var QRMaterial = new Material();\r\n            QRMaterial.metallic = 0;\r\n            QRMaterial.roughness = 1;\r\n            QRMaterial.specularIntensity = 0;\r\n            QRMaterial.albedoTexture = QRTexture;\r\n            var QRPlane = new Entity();\r\n            QRPlane.setParent(host);\r\n            QRPlane.addComponent(new PlaneShape());\r\n            QRPlane.addComponent(QRMaterial);\r\n            QRPlane.addComponent(new Transform({\r\n                position: new Vector3(0, 0.5, 0),\r\n                rotation: Quaternion.Euler(180, 0, 0),\r\n                scale: new Vector3(1, 1, 1),\r\n            }));\r\n        };\r\n        return SignPost;\r\n    }());\r\n    exports.default = SignPost;\r\n});\r\ndefine(\"80d9cb1c-2fcf-4585-8e19-e2d5621fd54d/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var SignPost = /** @class */ (function () {\r\n        function SignPost() {\r\n        }\r\n        SignPost.prototype.init = function () { };\r\n        SignPost.prototype.spawn = function (host, props, channel) {\r\n            var frame = new Entity();\r\n            frame.setParent(host);\r\n            frame.addComponent(new Transform({\r\n                position: new Vector3(0, 0.25, 0),\r\n                rotation: Quaternion.Euler(0, 180, 0),\r\n            }));\r\n            var nft = 'ethereum://' + props.contract + '/' + props.id;\r\n            frame.addComponent(new NFTShape(nft, {\r\n                color: Color3.FromHexString(props.color),\r\n                style: PictureFrameStyle[props.style],\r\n            }));\r\n            if (props.ui) {\r\n                frame.addComponent(new OnPointerDown(function () {\r\n                    openNFTDialog(nft, props.uiText ? props.uiText : null);\r\n                }, { hoverText: 'Open UI' }));\r\n            }\r\n            // let test = new Entity()\r\n            // test.setParent(host)\r\n            // test.addComponent(new GLTFShape('80d9cb1c-2fcf-4585-8e19-e2d5621fd54d/models/CustomFrame.glb'))\r\n        };\r\n        return SignPost;\r\n    }());\r\n    exports.default = SignPost;\r\n});\r\ndefine(\"a87c0a7e-f8f7-4bc8-b02d-60e053ccf939/src/item\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var Lamp = /** @class */ (function () {\r\n        function Lamp() {\r\n            this.clip = new AudioClip('a87c0a7e-f8f7-4bc8-b02d-60e053ccf939/sounds/Click.mp3');\r\n            this.active = {};\r\n            this.onModels = {};\r\n            this.offModels = {};\r\n            this.AudioSources = {};\r\n        }\r\n        Lamp.prototype.init = function () { };\r\n        Lamp.prototype.toggle = function (entityName, value) {\r\n            if (this.active[entityName] === value)\r\n                return;\r\n            this.AudioSources[entityName].playOnce();\r\n            if (value) {\r\n                this.onModels[entityName].visible = true;\r\n                this.offModels[entityName].visible = false;\r\n            }\r\n            else {\r\n                this.onModels[entityName].visible = false;\r\n                this.offModels[entityName].visible = true;\r\n            }\r\n            this.active[entityName] = value;\r\n        };\r\n        Lamp.prototype.spawn = function (host, props, channel) {\r\n            var _this = this;\r\n            var lampOff = new Entity(host.name + '-off');\r\n            lampOff.setParent(host);\r\n            lampOff.addComponent(new Transform());\r\n            var offModel = new GLTFShape('a87c0a7e-f8f7-4bc8-b02d-60e053ccf939/models/GalleryLight_Off.glb');\r\n            lampOff.addComponent(offModel);\r\n            var lampOn = new Entity(host.name + '-on');\r\n            lampOn.setParent(host);\r\n            lampOn.addComponent(new Transform());\r\n            var onModel = new GLTFShape('a87c0a7e-f8f7-4bc8-b02d-60e053ccf939/models/GalleryLight_On.glb');\r\n            lampOn.addComponent(onModel);\r\n            if (props.startOn) {\r\n                offModel.visible = false;\r\n            }\r\n            else {\r\n                onModel.visible = false;\r\n            }\r\n            if (props.clickable) {\r\n                lampOff.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n                lampOn.addComponent(new OnPointerDown(function () {\r\n                    var value = !_this.active[host.name];\r\n                    var action = channel.createAction(value ? 'activate' : 'deactivate', {});\r\n                    channel.sendActions([action]);\r\n                }, {\r\n                    button: ActionButton.POINTER,\r\n                    hoverText: 'Switch',\r\n                    distance: 6,\r\n                }));\r\n            }\r\n            var source = new AudioSource(this.clip);\r\n            lampOn.addComponent(source);\r\n            this.active[host.name] = props.startOn;\r\n            this.onModels[host.name] = onModel;\r\n            this.offModels[host.name] = offModel;\r\n            this.AudioSources[host.name] = source;\r\n            // handle actions\r\n            channel.handleAction('activate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, true);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onActivate);\r\n                }\r\n            });\r\n            channel.handleAction('deactivate', function (_a) {\r\n                var sender = _a.sender;\r\n                _this.toggle(host.name, false);\r\n                if (sender === channel.id) {\r\n                    channel.sendActions(props.onDeactivate);\r\n                }\r\n            });\r\n            // sync initial values\r\n            channel.request('isActive', function (isActive) {\r\n                return _this.toggle(host.name, isActive);\r\n            });\r\n            channel.reply('isActive', function () { return _this.active[host.name]; });\r\n        };\r\n        return Lamp;\r\n    }());\r\n    exports.default = Lamp;\r\n});\r\ndefine(\"src/game\", [\"require\", \"exports\", \"node_modules/decentraland-builder-scripts/channel\", \"node_modules/decentraland-builder-scripts/inventory\", \"683aa047-8043-40f8-8d31-beb7ab1b138c/src/item\", \"846479b0-75d3-450d-bbd6-7e6b3355a7a2/src/item\", \"1ab2733f-1782-4521-9eda-6aa8ad684277/src/item\", \"a747f104-5434-42a8-a543-8739c24cf253/src/item\", \"b79a150e-5914-4fdf-a6b4-c7ff0c6833dd/src/item\", \"9ca76658-8c9c-43fe-ab17-e4ec05b6ae35/src/item\", \"4adfea35-fb5c-4f64-bb5e-c7ebfa350868/src/item\", \"da30258e-3cc1-48a4-bc55-508e923ae977/src/item\", \"8d62d5a3-411c-43f8-a438-574ccf3d0fbe/src/item\", \"2166e10c-6d1a-4579-a18e-20abb4e1e8bf/src/item\", \"a3401af9-8e2b-4b2b-915e-ccb8ed611c88/src/item\", \"4c9fa249-97ec-4f32-8fb8-b96f69ba8892/src/item\", \"2263960d-51ff-483a-bd2a-a9d286558620/src/item\", \"e25d12ec-e349-4c76-9826-1094458e3982/src/item\", \"85cf3207-2792-4349-9938-21fd82ea2168/src/item\", \"7d669c08-c354-45e4-b3a3-c915c8fd6b6e/src/item\", \"80d9cb1c-2fcf-4585-8e19-e2d5621fd54d/src/item\", \"a87c0a7e-f8f7-4bc8-b02d-60e053ccf939/src/item\"], function (require, exports, channel_1, inventory_1, item_1, item_2, item_3, item_4, item_5, item_6, item_7, item_8, item_9, item_10, item_11, item_12, item_13, item_14, item_15, item_16, item_17, item_18) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var _scene = new Entity('_scene');\r\n    engine.addEntity(_scene);\r\n    var transform = new Transform({\r\n        position: new Vector3(0, 0, 0),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    _scene.addComponentOrReplace(transform);\r\n    var toolbox = new Entity('toolbox');\r\n    engine.addEntity(toolbox);\r\n    toolbox.setParent(_scene);\r\n    var transform2 = new Transform({\r\n        position: new Vector3(0.5, 0, 1),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    toolbox.addComponentOrReplace(transform2);\r\n    var floorLightDisc = new Entity('floorLightDisc');\r\n    engine.addEntity(floorLightDisc);\r\n    floorLightDisc.setParent(_scene);\r\n    var transform3 = new Transform({\r\n        position: new Vector3(27.5, 0, 43.8811149597168),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.25, 2, 2)\r\n    });\r\n    floorLightDisc.addComponentOrReplace(transform3);\r\n    var gltfShape = new GLTFShape(\"0845fe62-9876-4e6a-a9c2-e001667c455b/Light_04/Light_04.glb\");\r\n    gltfShape.withCollisions = true;\r\n    gltfShape.isPointerBlocker = true;\r\n    gltfShape.visible = true;\r\n    floorLightDisc.addComponentOrReplace(gltfShape);\r\n    var clickArea = new Entity('clickArea');\r\n    engine.addEntity(clickArea);\r\n    clickArea.setParent(_scene);\r\n    var transform4 = new Transform({\r\n        position: new Vector3(27.5, 0, 44),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2, 0.5099999904632568, 2)\r\n    });\r\n    clickArea.addComponentOrReplace(transform4);\r\n    var wallPlainGlass = new Entity('wallPlainGlass');\r\n    engine.addEntity(wallPlainGlass);\r\n    wallPlainGlass.setParent(_scene);\r\n    var transform5 = new Transform({\r\n        position: new Vector3(25.5, 0.1635526418685913, 31.045602798461914),\r\n        rotation: new Quaternion(8.449403523581086e-15, 1, -1.1920928244535389e-7, -2.2351741790771484e-8),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    wallPlainGlass.addComponentOrReplace(transform5);\r\n    var gltfShape2 = new GLTFShape(\"e28ea76e-fe21-4544-a001-a65867b11be0/PlainGlassWall.glb\");\r\n    gltfShape2.withCollisions = true;\r\n    gltfShape2.isPointerBlocker = true;\r\n    gltfShape2.visible = true;\r\n    wallPlainGlass.addComponentOrReplace(gltfShape2);\r\n    var wallPlainGlass2 = new Entity('wallPlainGlass2');\r\n    engine.addEntity(wallPlainGlass2);\r\n    wallPlainGlass2.setParent(_scene);\r\n    wallPlainGlass2.addComponentOrReplace(gltfShape2);\r\n    var transform6 = new Transform({\r\n        position: new Vector3(29.5, 0.1598912477493286, 31.351280212402344),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    wallPlainGlass2.addComponentOrReplace(transform6);\r\n    var triggerArea = new Entity('triggerArea');\r\n    engine.addEntity(triggerArea);\r\n    triggerArea.setParent(_scene);\r\n    var transform7 = new Transform({\r\n        position: new Vector3(27.5, 0, 31),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(4.5, 4.5, 7)\r\n    });\r\n    triggerArea.addComponentOrReplace(transform7);\r\n    var floorGlass = new Entity('floorGlass');\r\n    engine.addEntity(floorGlass);\r\n    floorGlass.setParent(_scene);\r\n    var transform8 = new Transform({\r\n        position: new Vector3(29.5, 23.213342666625977, 46),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    floorGlass.addComponentOrReplace(transform8);\r\n    var gltfShape3 = new GLTFShape(\"f4a4956e-f60a-4108-82c7-41b5ebda6549/GlassFloor.glb\");\r\n    gltfShape3.withCollisions = true;\r\n    gltfShape3.isPointerBlocker = true;\r\n    gltfShape3.visible = true;\r\n    floorGlass.addComponentOrReplace(gltfShape3);\r\n    var clickArea2 = new Entity('clickArea2');\r\n    engine.addEntity(clickArea2);\r\n    clickArea2.setParent(_scene);\r\n    var transform9 = new Transform({\r\n        position: new Vector3(27.5, 23, 44),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2, 0.5099999904632568, 2)\r\n    });\r\n    clickArea2.addComponentOrReplace(transform9);\r\n    var bermudaGrass = new Entity('bermudaGrass');\r\n    engine.addEntity(bermudaGrass);\r\n    bermudaGrass.setParent(_scene);\r\n    var gltfShape4 = new GLTFShape(\"c9b17021-765c-4d9a-9966-ce93a9c323d1/FloorBaseGrass_01/FloorBaseGrass_01.glb\");\r\n    gltfShape4.withCollisions = true;\r\n    gltfShape4.isPointerBlocker = true;\r\n    gltfShape4.visible = true;\r\n    bermudaGrass.addComponentOrReplace(gltfShape4);\r\n    var transform10 = new Transform({\r\n        position: new Vector3(8, 0, 8),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass.addComponentOrReplace(transform10);\r\n    var bermudaGrass2 = new Entity('bermudaGrass2');\r\n    engine.addEntity(bermudaGrass2);\r\n    bermudaGrass2.setParent(_scene);\r\n    bermudaGrass2.addComponentOrReplace(gltfShape4);\r\n    var transform11 = new Transform({\r\n        position: new Vector3(24, 0, 8),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass2.addComponentOrReplace(transform11);\r\n    var bermudaGrass3 = new Entity('bermudaGrass3');\r\n    engine.addEntity(bermudaGrass3);\r\n    bermudaGrass3.setParent(_scene);\r\n    bermudaGrass3.addComponentOrReplace(gltfShape4);\r\n    var transform12 = new Transform({\r\n        position: new Vector3(40, 0, 8),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass3.addComponentOrReplace(transform12);\r\n    var bermudaGrass4 = new Entity('bermudaGrass4');\r\n    engine.addEntity(bermudaGrass4);\r\n    bermudaGrass4.setParent(_scene);\r\n    bermudaGrass4.addComponentOrReplace(gltfShape4);\r\n    var transform13 = new Transform({\r\n        position: new Vector3(8, 0, 24),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass4.addComponentOrReplace(transform13);\r\n    var bermudaGrass5 = new Entity('bermudaGrass5');\r\n    engine.addEntity(bermudaGrass5);\r\n    bermudaGrass5.setParent(_scene);\r\n    bermudaGrass5.addComponentOrReplace(gltfShape4);\r\n    var transform14 = new Transform({\r\n        position: new Vector3(24, 0, 24),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass5.addComponentOrReplace(transform14);\r\n    var bermudaGrass6 = new Entity('bermudaGrass6');\r\n    engine.addEntity(bermudaGrass6);\r\n    bermudaGrass6.setParent(_scene);\r\n    bermudaGrass6.addComponentOrReplace(gltfShape4);\r\n    var transform15 = new Transform({\r\n        position: new Vector3(40, 0, 24),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass6.addComponentOrReplace(transform15);\r\n    var bermudaGrass7 = new Entity('bermudaGrass7');\r\n    engine.addEntity(bermudaGrass7);\r\n    bermudaGrass7.setParent(_scene);\r\n    bermudaGrass7.addComponentOrReplace(gltfShape4);\r\n    var transform16 = new Transform({\r\n        position: new Vector3(8, 0, 40),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass7.addComponentOrReplace(transform16);\r\n    var bermudaGrass8 = new Entity('bermudaGrass8');\r\n    engine.addEntity(bermudaGrass8);\r\n    bermudaGrass8.setParent(_scene);\r\n    bermudaGrass8.addComponentOrReplace(gltfShape4);\r\n    var transform17 = new Transform({\r\n        position: new Vector3(24, 0, 40),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass8.addComponentOrReplace(transform17);\r\n    var bermudaGrass9 = new Entity('bermudaGrass9');\r\n    engine.addEntity(bermudaGrass9);\r\n    bermudaGrass9.setParent(_scene);\r\n    bermudaGrass9.addComponentOrReplace(gltfShape4);\r\n    var transform18 = new Transform({\r\n        position: new Vector3(40, 0, 40),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass9.addComponentOrReplace(transform18);\r\n    var bermudaGrass10 = new Entity('bermudaGrass10');\r\n    engine.addEntity(bermudaGrass10);\r\n    bermudaGrass10.setParent(_scene);\r\n    bermudaGrass10.addComponentOrReplace(gltfShape4);\r\n    var transform19 = new Transform({\r\n        position: new Vector3(8, 0, 56),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass10.addComponentOrReplace(transform19);\r\n    var bermudaGrass11 = new Entity('bermudaGrass11');\r\n    engine.addEntity(bermudaGrass11);\r\n    bermudaGrass11.setParent(_scene);\r\n    bermudaGrass11.addComponentOrReplace(gltfShape4);\r\n    var transform20 = new Transform({\r\n        position: new Vector3(24, 0, 56),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass11.addComponentOrReplace(transform20);\r\n    var bermudaGrass12 = new Entity('bermudaGrass12');\r\n    engine.addEntity(bermudaGrass12);\r\n    bermudaGrass12.setParent(_scene);\r\n    bermudaGrass12.addComponentOrReplace(gltfShape4);\r\n    var transform21 = new Transform({\r\n        position: new Vector3(40, 0, 56),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass12.addComponentOrReplace(transform21);\r\n    var bermudaGrass13 = new Entity('bermudaGrass13');\r\n    engine.addEntity(bermudaGrass13);\r\n    bermudaGrass13.setParent(_scene);\r\n    bermudaGrass13.addComponentOrReplace(gltfShape4);\r\n    var transform22 = new Transform({\r\n        position: new Vector3(8, 0, 72),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass13.addComponentOrReplace(transform22);\r\n    var bermudaGrass14 = new Entity('bermudaGrass14');\r\n    engine.addEntity(bermudaGrass14);\r\n    bermudaGrass14.setParent(_scene);\r\n    bermudaGrass14.addComponentOrReplace(gltfShape4);\r\n    var transform23 = new Transform({\r\n        position: new Vector3(24, 0, 72),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass14.addComponentOrReplace(transform23);\r\n    var bermudaGrass15 = new Entity('bermudaGrass15');\r\n    engine.addEntity(bermudaGrass15);\r\n    bermudaGrass15.setParent(_scene);\r\n    bermudaGrass15.addComponentOrReplace(gltfShape4);\r\n    var transform24 = new Transform({\r\n        position: new Vector3(40, 0, 72),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bermudaGrass15.addComponentOrReplace(transform24);\r\n    var floorLightDisc2 = new Entity('floorLightDisc2');\r\n    engine.addEntity(floorLightDisc2);\r\n    floorLightDisc2.setParent(_scene);\r\n    floorLightDisc2.addComponentOrReplace(gltfShape);\r\n    var transform25 = new Transform({\r\n        position: new Vector3(16.5, 29.071725845336914, 47.651885986328125),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.9061408042907715, 2, 1.8257479667663574)\r\n    });\r\n    floorLightDisc2.addComponentOrReplace(transform25);\r\n    var clickArea3 = new Entity('clickArea3');\r\n    engine.addEntity(clickArea3);\r\n    clickArea3.setParent(_scene);\r\n    var transform26 = new Transform({\r\n        position: new Vector3(16.5, 29.32918930053711, 47.71237564086914),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2, 0.5099999904632568, 2)\r\n    });\r\n    clickArea3.addComponentOrReplace(transform26);\r\n    var obita2 = new Entity('obita2');\r\n    engine.addEntity(obita2);\r\n    obita2.setParent(_scene);\r\n    var transform27 = new Transform({\r\n        position: new Vector3(27.5, 0, 41.040374755859375),\r\n        rotation: new Quaternion(5.592420684798639e-16, 1, -1.1920926823449918e-7, 0),\r\n        scale: new Vector3(1, 0.9470276236534119, 1)\r\n    });\r\n    obita2.addComponentOrReplace(transform27);\r\n    var gltfShape5 = new GLTFShape(\"ba302e1a-e3ca-4056-a01d-d32b461dffef/obita_1.4.glb\");\r\n    gltfShape5.withCollisions = true;\r\n    gltfShape5.isPointerBlocker = true;\r\n    gltfShape5.visible = true;\r\n    obita2.addComponentOrReplace(gltfShape5);\r\n    var roofGlassEdges = new Entity('roofGlassEdges');\r\n    engine.addEntity(roofGlassEdges);\r\n    roofGlassEdges.setParent(_scene);\r\n    var transform28 = new Transform({\r\n        position: new Vector3(22.000446319580078, 33.79520797729492, 51.638572692871094),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(2.8167576789855957, 1, 2.7590525150299072)\r\n    });\r\n    roofGlassEdges.addComponentOrReplace(transform28);\r\n    var gltfShape6 = new GLTFShape(\"804c94f9-20d8-4fd3-aca0-d096cad08ff7/GlassRoof_2Edges.glb\");\r\n    gltfShape6.withCollisions = true;\r\n    gltfShape6.isPointerBlocker = true;\r\n    gltfShape6.visible = true;\r\n    roofGlassEdges.addComponentOrReplace(gltfShape6);\r\n    var roofGlassEdges2 = new Entity('roofGlassEdges2');\r\n    engine.addEntity(roofGlassEdges2);\r\n    roofGlassEdges2.setParent(_scene);\r\n    roofGlassEdges2.addComponentOrReplace(gltfShape6);\r\n    var transform29 = new Transform({\r\n        position: new Vector3(22.000446319580078, 43.277099609375, 51.638572692871094),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(2.816758155822754, 1, 2.7590529918670654)\r\n    });\r\n    roofGlassEdges2.addComponentOrReplace(transform29);\r\n    var roofGlassEdges3 = new Entity('roofGlassEdges3');\r\n    engine.addEntity(roofGlassEdges3);\r\n    roofGlassEdges3.setParent(_scene);\r\n    roofGlassEdges3.addComponentOrReplace(gltfShape6);\r\n    var transform30 = new Transform({\r\n        position: new Vector3(22.000446319580078, 52.61660385131836, 51.638572692871094),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(2.8167595863342285, 1, 2.75905442237854)\r\n    });\r\n    roofGlassEdges3.addComponentOrReplace(transform30);\r\n    var floorGlass2 = new Entity('floorGlass2');\r\n    engine.addEntity(floorGlass2);\r\n    floorGlass2.setParent(_scene);\r\n    floorGlass2.addComponentOrReplace(gltfShape3);\r\n    var transform31 = new Transform({\r\n        position: new Vector3(18.436330795288086, 71.49091339111328, 49.63858413696289),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    floorGlass2.addComponentOrReplace(transform31);\r\n    var videoStream = new Entity('videoStream');\r\n    engine.addEntity(videoStream);\r\n    videoStream.setParent(_scene);\r\n    var transform32 = new Transform({\r\n        position: new Vector3(35.4310188293457, 25.987442016601562, 41),\r\n        rotation: new Quaternion(0.13794967532157898, -0.6935198903083801, 0.13794976472854614, 0.6935199499130249),\r\n        scale: new Vector3(5.5000081062316895, 5.500000476837158, 1.000001311302185)\r\n    });\r\n    videoStream.addComponentOrReplace(transform32);\r\n    var couchCurved = new Entity('couchCurved');\r\n    engine.addEntity(couchCurved);\r\n    couchCurved.setParent(_scene);\r\n    var transform33 = new Transform({\r\n        position: new Vector3(19.664531707763672, 37.878963470458984, 25.957033157348633),\r\n        rotation: new Quaternion(-2.220446049250313e-16, -0.3826834559440613, 4.561941935321556e-8, 0.9238795638084412),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    couchCurved.addComponentOrReplace(transform33);\r\n    var gltfShape7 = new GLTFShape(\"2079fbe2-51e5-4fdf-82bd-37374422b2e3/CurvedCouch.glb\");\r\n    gltfShape7.withCollisions = true;\r\n    gltfShape7.isPointerBlocker = true;\r\n    gltfShape7.visible = true;\r\n    couchCurved.addComponentOrReplace(gltfShape7);\r\n    var couchCurved2 = new Entity('couchCurved2');\r\n    engine.addEntity(couchCurved2);\r\n    couchCurved2.setParent(_scene);\r\n    couchCurved2.addComponentOrReplace(gltfShape7);\r\n    var transform34 = new Transform({\r\n        position: new Vector3(14.990690231323242, 37.878963470458984, 23.69817352294922),\r\n        rotation: new Quaternion(9.300132710858967e-16, -0.4713967442512512, 5.6194863873315626e-8, -0.8819212913513184),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    couchCurved2.addComponentOrReplace(transform34);\r\n    var coffeeTable = new Entity('coffeeTable');\r\n    engine.addEntity(coffeeTable);\r\n    coffeeTable.setParent(_scene);\r\n    var transform35 = new Transform({\r\n        position: new Vector3(16.5, 37.98884963989258, 27),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    coffeeTable.addComponentOrReplace(transform35);\r\n    var gltfShape8 = new GLTFShape(\"b01154d9-db05-4713-ace7-692b67220bb0/Table_06/Table_06.glb\");\r\n    gltfShape8.withCollisions = true;\r\n    gltfShape8.isPointerBlocker = true;\r\n    gltfShape8.visible = true;\r\n    coffeeTable.addComponentOrReplace(gltfShape8);\r\n    var blockFloorLight = new Entity('blockFloorLight');\r\n    engine.addEntity(blockFloorLight);\r\n    blockFloorLight.setParent(_scene);\r\n    var transform36 = new Transform({\r\n        position: new Vector3(16.5, 37.958717346191406, 23.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.25, 2.5, 2)\r\n    });\r\n    blockFloorLight.addComponentOrReplace(transform36);\r\n    var fridgeCounter = new Entity('fridgeCounter');\r\n    engine.addEntity(fridgeCounter);\r\n    fridgeCounter.setParent(_scene);\r\n    var transform37 = new Transform({\r\n        position: new Vector3(12.5, 37.94488525390625, 30.5),\r\n        rotation: new Quaternion(-1.0848133067569484e-15, 0.7071068286895752, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000019073486328, 1, 1.0000019073486328)\r\n    });\r\n    fridgeCounter.addComponentOrReplace(transform37);\r\n    var gltfShape9 = new GLTFShape(\"cd54d23e-eef5-48f6-bfb2-ff7878b37d0b/Fridge_Counter.glb\");\r\n    gltfShape9.withCollisions = true;\r\n    gltfShape9.isPointerBlocker = true;\r\n    gltfShape9.visible = true;\r\n    fridgeCounter.addComponentOrReplace(gltfShape9);\r\n    var wallPlainGlass3 = new Entity('wallPlainGlass3');\r\n    engine.addEntity(wallPlainGlass3);\r\n    wallPlainGlass3.setParent(_scene);\r\n    var transform38 = new Transform({\r\n        position: new Vector3(36.5, 37.930137634277344, 34.789939880371094),\r\n        rotation: new Quaternion(-4.504429098665355e-16, 0.7071068286895752, -8.429368136830817e-8, -0.7071068286895752),\r\n        scale: new Vector3(5.8376994132995605, 2.366330862045288, 1.0000032186508179)\r\n    });\r\n    wallPlainGlass3.addComponentOrReplace(transform38);\r\n    wallPlainGlass3.addComponentOrReplace(gltfShape2);\r\n    var wallPlainGlass4 = new Entity('wallPlainGlass4');\r\n    engine.addEntity(wallPlainGlass4);\r\n    wallPlainGlass4.setParent(_scene);\r\n    wallPlainGlass4.addComponentOrReplace(gltfShape2);\r\n    var transform39 = new Transform({\r\n        position: new Vector3(36.495765686035156, 37.930137634277344, 37.789939880371094),\r\n        rotation: new Quaternion(7.262432537671112e-15, -1, 1.1920926823449918e-7, 0),\r\n        scale: new Vector3(3.5920002460479736, 2.3636560440063477, 1.000002145767212)\r\n    });\r\n    wallPlainGlass4.addComponentOrReplace(transform39);\r\n    var wallPlainGlass5 = new Entity('wallPlainGlass5');\r\n    engine.addEntity(wallPlainGlass5);\r\n    wallPlainGlass5.setParent(_scene);\r\n    wallPlainGlass5.addComponentOrReplace(gltfShape2);\r\n    var transform40 = new Transform({\r\n        position: new Vector3(36.495765686035156, 37.930137634277344, 29.789939880371094),\r\n        rotation: new Quaternion(7.262432537671112e-15, -1, 1.1920926823449918e-7, 0),\r\n        scale: new Vector3(3.5920002460479736, 2.3496503829956055, 1.000002145767212)\r\n    });\r\n    wallPlainGlass5.addComponentOrReplace(transform40);\r\n    var coffeeTable2 = new Entity('coffeeTable2');\r\n    engine.addEntity(coffeeTable2);\r\n    coffeeTable2.setParent(_scene);\r\n    var transform41 = new Transform({\r\n        position: new Vector3(40.5, 38, 34),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2, 3.5)\r\n    });\r\n    coffeeTable2.addComponentOrReplace(transform41);\r\n    var gltfShape10 = new GLTFShape(\"61265486-0bbb-462e-80c0-30754daf97ed/Coffee_Table.glb\");\r\n    gltfShape10.withCollisions = true;\r\n    gltfShape10.isPointerBlocker = true;\r\n    gltfShape10.visible = true;\r\n    coffeeTable2.addComponentOrReplace(gltfShape10);\r\n    var coffeeTable3 = new Entity('coffeeTable3');\r\n    engine.addEntity(coffeeTable3);\r\n    coffeeTable3.setParent(_scene);\r\n    coffeeTable3.addComponentOrReplace(gltfShape10);\r\n    var transform42 = new Transform({\r\n        position: new Vector3(40.5, 38, 26),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2, 3.5)\r\n    });\r\n    coffeeTable3.addComponentOrReplace(transform42);\r\n    var wallPlainGlass7 = new Entity('wallPlainGlass7');\r\n    engine.addEntity(wallPlainGlass7);\r\n    wallPlainGlass7.setParent(_scene);\r\n    wallPlainGlass7.addComponentOrReplace(gltfShape2);\r\n    var transform43 = new Transform({\r\n        position: new Vector3(33.06464385986328, 37.930137634277344, 52.789939880371094),\r\n        rotation: new Quaternion(7.262432537671112e-15, -1, 1.1920926823449918e-7, 0),\r\n        scale: new Vector3(4.356088638305664, 2.3496503829956055, 1.000002145767212)\r\n    });\r\n    wallPlainGlass7.addComponentOrReplace(transform43);\r\n    var coffeeTable4 = new Entity('coffeeTable4');\r\n    engine.addEntity(coffeeTable4);\r\n    coffeeTable4.setParent(_scene);\r\n    coffeeTable4.addComponentOrReplace(gltfShape10);\r\n    var transform44 = new Transform({\r\n        position: new Vector3(39, 38, 57),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.5, 2, 3.5)\r\n    });\r\n    coffeeTable4.addComponentOrReplace(transform44);\r\n    var spotlightLight = new Entity('spotlightLight');\r\n    engine.addEntity(spotlightLight);\r\n    spotlightLight.setParent(_scene);\r\n    var transform45 = new Transform({\r\n        position: new Vector3(38.5, 43.33962631225586, 57),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(9.374999046325684, 1, 13.124999046325684)\r\n    });\r\n    spotlightLight.addComponentOrReplace(transform45);\r\n    var spotlightLight2 = new Entity('spotlightLight2');\r\n    engine.addEntity(spotlightLight2);\r\n    spotlightLight2.setParent(_scene);\r\n    var transform46 = new Transform({\r\n        position: new Vector3(40.5, 43.33962631225586, 34),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(9.374999046325684, 1, 13.124999046325684)\r\n    });\r\n    spotlightLight2.addComponentOrReplace(transform46);\r\n    var spotlightLight3 = new Entity('spotlightLight3');\r\n    engine.addEntity(spotlightLight3);\r\n    spotlightLight3.setParent(_scene);\r\n    var transform47 = new Transform({\r\n        position: new Vector3(40.5, 43.33962631225586, 25.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(9.374999046325684, 1, 13.124999046325684)\r\n    });\r\n    spotlightLight3.addComponentOrReplace(transform47);\r\n    var tallPalmTree = new Entity('tallPalmTree');\r\n    engine.addEntity(tallPalmTree);\r\n    tallPalmTree.setParent(_scene);\r\n    var transform48 = new Transform({\r\n        position: new Vector3(15.5, 71.5, 30),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tallPalmTree.addComponentOrReplace(transform48);\r\n    var gltfShape11 = new GLTFShape(\"a29c8a0e-1f2c-4d85-a099-36301da3fe36/PalmTree_02/PalmTree_02.glb\");\r\n    gltfShape11.withCollisions = true;\r\n    gltfShape11.isPointerBlocker = true;\r\n    gltfShape11.visible = true;\r\n    tallPalmTree.addComponentOrReplace(gltfShape11);\r\n    var smallPalmTree = new Entity('smallPalmTree');\r\n    engine.addEntity(smallPalmTree);\r\n    smallPalmTree.setParent(_scene);\r\n    var transform49 = new Transform({\r\n        position: new Vector3(17, 71.5, 29),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    smallPalmTree.addComponentOrReplace(transform49);\r\n    var gltfShape12 = new GLTFShape(\"3f7e1dbd-8693-409d-9dd9-2a06feaadec9/JunglePlant_07/JunglePlant_07.glb\");\r\n    gltfShape12.withCollisions = true;\r\n    gltfShape12.isPointerBlocker = true;\r\n    gltfShape12.visible = true;\r\n    smallPalmTree.addComponentOrReplace(gltfShape12);\r\n    var tallPalmTree2 = new Entity('tallPalmTree2');\r\n    engine.addEntity(tallPalmTree2);\r\n    tallPalmTree2.setParent(_scene);\r\n    tallPalmTree2.addComponentOrReplace(gltfShape11);\r\n    var transform50 = new Transform({\r\n        position: new Vector3(15.5, 71.5, 38.5),\r\n        rotation: new Quaternion(-1.1059513315930347e-15, 0.5555702447891235, -6.622912707143769e-8, 0.8314695954322815),\r\n        scale: new Vector3(0.9999999403953552, 1, 0.9999999403953552)\r\n    });\r\n    tallPalmTree2.addComponentOrReplace(transform50);\r\n    var bentPalmTree = new Entity('bentPalmTree');\r\n    engine.addEntity(bentPalmTree);\r\n    bentPalmTree.setParent(_scene);\r\n    var transform51 = new Transform({\r\n        position: new Vector3(16.500001907348633, 71, 53),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bentPalmTree.addComponentOrReplace(transform51);\r\n    var gltfShape13 = new GLTFShape(\"e0db669f-e803-4528-bb16-e1e3001956d9/PalmTree_01/PalmTree_01.glb\");\r\n    gltfShape13.withCollisions = true;\r\n    gltfShape13.isPointerBlocker = true;\r\n    gltfShape13.visible = true;\r\n    bentPalmTree.addComponentOrReplace(gltfShape13);\r\n    var tallPalmTree3 = new Entity('tallPalmTree3');\r\n    engine.addEntity(tallPalmTree3);\r\n    tallPalmTree3.setParent(_scene);\r\n    tallPalmTree3.addComponentOrReplace(gltfShape11);\r\n    var transform52 = new Transform({\r\n        position: new Vector3(39.5, 71.5, 46.75),\r\n        rotation: new Quaternion(-1.1059513315930347e-15, 0.5555702447891235, -6.622912707143769e-8, 0.8314695954322815),\r\n        scale: new Vector3(0.9999997615814209, 1, 0.9999997615814209)\r\n    });\r\n    tallPalmTree3.addComponentOrReplace(transform52);\r\n    var tallPalmTree4 = new Entity('tallPalmTree4');\r\n    engine.addEntity(tallPalmTree4);\r\n    tallPalmTree4.setParent(_scene);\r\n    tallPalmTree4.addComponentOrReplace(gltfShape11);\r\n    var transform53 = new Transform({\r\n        position: new Vector3(39.5, 71.5, 38.25),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tallPalmTree4.addComponentOrReplace(transform53);\r\n    var bush = new Entity('bush');\r\n    engine.addEntity(bush);\r\n    bush.setParent(_scene);\r\n    var transform54 = new Transform({\r\n        position: new Vector3(15.500003814697266, 71.5, 34.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, 0.7071068286895752, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000016689300537, 1.5, 1.0000016689300537)\r\n    });\r\n    bush.addComponentOrReplace(transform54);\r\n    var gltfShape14 = new GLTFShape(\"b34ad4ca-db96-44fe-8fd6-86b4aa9f2218/HWN20_Bush.glb\");\r\n    gltfShape14.withCollisions = true;\r\n    gltfShape14.isPointerBlocker = true;\r\n    gltfShape14.visible = true;\r\n    bush.addComponentOrReplace(gltfShape14);\r\n    var bentPalmTree2 = new Entity('bentPalmTree2');\r\n    engine.addEntity(bentPalmTree2);\r\n    bentPalmTree2.setParent(_scene);\r\n    bentPalmTree2.addComponentOrReplace(gltfShape13);\r\n    var transform55 = new Transform({\r\n        position: new Vector3(38.5, 71, 35.5),\r\n        rotation: new Quaternion(-1.2518071228575546e-14, 0.9807853102684021, -1.169186987226567e-7, 0.19509033858776093),\r\n        scale: new Vector3(1.0000004768371582, 1, 1.0000004768371582)\r\n    });\r\n    bentPalmTree2.addComponentOrReplace(transform55);\r\n    var bush2 = new Entity('bush2');\r\n    engine.addEntity(bush2);\r\n    bush2.setParent(_scene);\r\n    bush2.addComponentOrReplace(gltfShape14);\r\n    var transform56 = new Transform({\r\n        position: new Vector3(38.5, 71.5, 30.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, 0.7071068286895752, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000019073486328, 1.5, 1.0000019073486328)\r\n    });\r\n    bush2.addComponentOrReplace(transform56);\r\n    var smallPalmTree2 = new Entity('smallPalmTree2');\r\n    engine.addEntity(smallPalmTree2);\r\n    smallPalmTree2.setParent(_scene);\r\n    smallPalmTree2.addComponentOrReplace(gltfShape12);\r\n    var transform57 = new Transform({\r\n        position: new Vector3(16.5, 71.5, 30.5),\r\n        rotation: new Quaternion(-2.220446049250313e-16, 0.3826834559440613, -4.561941935321556e-8, 0.9238795638084412),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    smallPalmTree2.addComponentOrReplace(transform57);\r\n    var bentPalmTree3 = new Entity('bentPalmTree3');\r\n    engine.addEntity(bentPalmTree3);\r\n    bentPalmTree3.setParent(_scene);\r\n    bentPalmTree3.addComponentOrReplace(gltfShape13);\r\n    var transform58 = new Transform({\r\n        position: new Vector3(16.500001907348633, 71, 42),\r\n        rotation: new Quaternion(-2.220446049250313e-16, 0.3826834559440613, -4.561941935321556e-8, 0.9238795638084412),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    bentPalmTree3.addComponentOrReplace(transform58);\r\n    var jungleShrub = new Entity('jungleShrub');\r\n    engine.addEntity(jungleShrub);\r\n    jungleShrub.setParent(_scene);\r\n    var transform59 = new Transform({\r\n        position: new Vector3(18.000003814697266, 71.5, 52),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    jungleShrub.addComponentOrReplace(transform59);\r\n    var gltfShape15 = new GLTFShape(\"d8b2cdd4-043a-4982-91c2-202d85677533/JunglePlant_02/JunglePlant_02.glb\");\r\n    gltfShape15.withCollisions = true;\r\n    gltfShape15.isPointerBlocker = true;\r\n    gltfShape15.visible = true;\r\n    jungleShrub.addComponentOrReplace(gltfShape15);\r\n    var jungleShrub2 = new Entity('jungleShrub2');\r\n    engine.addEntity(jungleShrub2);\r\n    jungleShrub2.setParent(_scene);\r\n    jungleShrub2.addComponentOrReplace(gltfShape15);\r\n    var transform60 = new Transform({\r\n        position: new Vector3(17, 71.5, 51),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2, 2, 2)\r\n    });\r\n    jungleShrub2.addComponentOrReplace(transform60);\r\n    var jungleShrub3 = new Entity('jungleShrub3');\r\n    engine.addEntity(jungleShrub3);\r\n    jungleShrub3.setParent(_scene);\r\n    jungleShrub3.addComponentOrReplace(gltfShape15);\r\n    var transform61 = new Transform({\r\n        position: new Vector3(37.5, 72, 34.5),\r\n        rotation: new Quaternion(-1.1059513315930347e-15, -0.5555702447891235, 6.622912707143769e-8, 0.8314695954322815),\r\n        scale: new Vector3(1.9999998807907104, 2, 1.9999998807907104)\r\n    });\r\n    jungleShrub3.addComponentOrReplace(transform61);\r\n    var mixtable = new Entity('mixtable');\r\n    engine.addEntity(mixtable);\r\n    mixtable.setParent(_scene);\r\n    var transform62 = new Transform({\r\n        position: new Vector3(27, 73.18089294433594, 31),\r\n        rotation: new Quaternion(-5.884156619524912e-15, -1, 1.1920926823449918e-7, 0),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    mixtable.addComponentOrReplace(transform62);\r\n    var speakers = new Entity('speakers');\r\n    engine.addEntity(speakers);\r\n    speakers.setParent(_scene);\r\n    var transform63 = new Transform({\r\n        position: new Vector3(20.5, 71.5, 31),\r\n        rotation: new Quaternion(-5.410954887277719e-15, -0.2902846932411194, 3.460463915416767e-8, -0.9569404125213623),\r\n        scale: new Vector3(2.000000476837158, 2, 1.000000238418579)\r\n    });\r\n    speakers.addComponentOrReplace(transform63);\r\n    var speakers2 = new Entity('speakers2');\r\n    engine.addEntity(speakers2);\r\n    speakers2.setParent(_scene);\r\n    var transform64 = new Transform({\r\n        position: new Vector3(36, 71.5, 30.5),\r\n        rotation: new Quaternion(-1.1387964105513595e-15, 0.19509033858776093, -2.325656645041363e-8, -0.9807853102684021),\r\n        scale: new Vector3(3.7071073055267334, 4, 1.1464468240737915)\r\n    });\r\n    speakers2.addComponentOrReplace(transform64);\r\n    var radioCyberpunk = new Entity('radioCyberpunk');\r\n    engine.addEntity(radioCyberpunk);\r\n    radioCyberpunk.setParent(_scene);\r\n    var transform65 = new Transform({\r\n        position: new Vector3(27.836605072021484, 73.23040008544922, 30.767698287963867),\r\n        rotation: new Quaternion(-7.5014728586828e-15, 0.9807853102684021, -1.1691871293351142e-7, -0.19509033858776093),\r\n        scale: new Vector3(1.0000005960464478, 2.567028522491455, 1.0000005960464478)\r\n    });\r\n    radioCyberpunk.addComponentOrReplace(transform65);\r\n    var wallLEDGrid = new Entity('wallLEDGrid');\r\n    engine.addEntity(wallLEDGrid);\r\n    wallLEDGrid.setParent(_scene);\r\n    var transform66 = new Transform({\r\n        position: new Vector3(33, 71.29338836669922, 33),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(5.784754753112793, 0.5, 22.658113479614258)\r\n    });\r\n    wallLEDGrid.addComponentOrReplace(transform66);\r\n    var gltfShape16 = new GLTFShape(\"bdd5671b-9c8f-43c7-8385-f0dd70257863/LEDGridWall.glb\");\r\n    gltfShape16.withCollisions = true;\r\n    gltfShape16.isPointerBlocker = true;\r\n    gltfShape16.visible = true;\r\n    wallLEDGrid.addComponentOrReplace(gltfShape16);\r\n    var speakers3 = new Entity('speakers3');\r\n    engine.addEntity(speakers3);\r\n    speakers3.setParent(_scene);\r\n    var transform67 = new Transform({\r\n        position: new Vector3(21.5, 71.5, 28.5),\r\n        rotation: new Quaternion(-3.605510936468756e-15, 0.19509029388427734, -2.3256580661268345e-8, 0.9807853698730469),\r\n        scale: new Vector3(3.7071075439453125, 4, 1.1464470624923706)\r\n    });\r\n    speakers3.addComponentOrReplace(transform67);\r\n    var stairsFloating = new Entity('stairsFloating');\r\n    engine.addEntity(stairsFloating);\r\n    stairsFloating.setParent(_scene);\r\n    var transform68 = new Transform({\r\n        position: new Vector3(34.85047149658203, 71.28866577148438, 30.5),\r\n        rotation: new Quaternion(4.440892627896218e-16, -0.7071068286895752, 8.429369557916289e-8, -0.7071068286895752),\r\n        scale: new Vector3(1.0000039339065552, 0.5, 0.5000019669532776)\r\n    });\r\n    stairsFloating.addComponentOrReplace(transform68);\r\n    var gltfShape17 = new GLTFShape(\"896b942f-3c65-4d53-b8ff-8d874270fe6e/floatingStairs.glb\");\r\n    gltfShape17.withCollisions = true;\r\n    gltfShape17.isPointerBlocker = true;\r\n    gltfShape17.visible = true;\r\n    stairsFloating.addComponentOrReplace(gltfShape17);\r\n    var roofBlack = new Entity('roofBlack');\r\n    engine.addEntity(roofBlack);\r\n    roofBlack.setParent(_scene);\r\n    var transform69 = new Transform({\r\n        position: new Vector3(42.000003814697266, 66.5, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(5.790256023406982, 1, 9.876068115234375)\r\n    });\r\n    roofBlack.addComponentOrReplace(transform69);\r\n    var gltfShape18 = new GLTFShape(\"0d67ab09-6591-44dc-bc70-2fd1dbc49d06/BlackRoof.glb\");\r\n    gltfShape18.withCollisions = true;\r\n    gltfShape18.isPointerBlocker = true;\r\n    gltfShape18.visible = true;\r\n    roofBlack.addComponentOrReplace(gltfShape18);\r\n    var mLongLoopedCable = new Entity('mLongLoopedCable');\r\n    engine.addEntity(mLongLoopedCable);\r\n    mLongLoopedCable.setParent(_scene);\r\n    var transform70 = new Transform({\r\n        position: new Vector3(28.818626403808594, 73.3042984008789, 26.472681045532227),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    mLongLoopedCable.addComponentOrReplace(transform70);\r\n    var gltfShape19 = new GLTFShape(\"382afbea-28ae-42ad-a046-9376b21541f8/Cable_4M_02/Cable_4M_02.glb\");\r\n    gltfShape19.withCollisions = true;\r\n    gltfShape19.isPointerBlocker = true;\r\n    gltfShape19.visible = true;\r\n    mLongLoopedCable.addComponentOrReplace(gltfShape19);\r\n    var pillarGlow = new Entity('pillarGlow');\r\n    engine.addEntity(pillarGlow);\r\n    pillarGlow.setParent(_scene);\r\n    var transform71 = new Transform({\r\n        position: new Vector3(32.84147262573242, 73, 32.85993576049805),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(0.4999999403953552, 1.5, 0.4999999701976776)\r\n    });\r\n    pillarGlow.addComponentOrReplace(transform71);\r\n    var gltfShape20 = new GLTFShape(\"52481f8f-e316-4c1f-8c96-9b059e5d0909/GlowPillar.glb\");\r\n    gltfShape20.withCollisions = true;\r\n    gltfShape20.isPointerBlocker = true;\r\n    gltfShape20.visible = true;\r\n    pillarGlow.addComponentOrReplace(gltfShape20);\r\n    var pillarGlow2 = new Entity('pillarGlow2');\r\n    engine.addEntity(pillarGlow2);\r\n    pillarGlow2.setParent(_scene);\r\n    pillarGlow2.addComponentOrReplace(gltfShape20);\r\n    var transform72 = new Transform({\r\n        position: new Vector3(21.841472625732422, 73, 32.85993576049805),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(0.4999999403953552, 1.5, 0.4999999701976776)\r\n    });\r\n    pillarGlow2.addComponentOrReplace(transform72);\r\n    var ceilingStriplight = new Entity('ceilingStriplight');\r\n    engine.addEntity(ceilingStriplight);\r\n    ceilingStriplight.setParent(_scene);\r\n    var transform73 = new Transform({\r\n        position: new Vector3(30.753782272338867, 75, 32.79954147338867),\r\n        rotation: new Quaternion(1.69727750463141e-14, -0.7071068286895752, 8.42937097900176e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000016689300537, 1, 1.0000016689300537)\r\n    });\r\n    ceilingStriplight.addComponentOrReplace(transform73);\r\n    var ceilingStriplight2 = new Entity('ceilingStriplight2');\r\n    engine.addEntity(ceilingStriplight2);\r\n    ceilingStriplight2.setParent(_scene);\r\n    var transform74 = new Transform({\r\n        position: new Vector3(24.01087760925293, 75, 32.79954147338867),\r\n        rotation: new Quaternion(1.69727750463141e-14, -0.7071068286895752, 8.42937097900176e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000019073486328, 1, 1.0000019073486328)\r\n    });\r\n    ceilingStriplight2.addComponentOrReplace(transform74);\r\n    var spotlightStripLight = new Entity('spotlightStripLight');\r\n    engine.addEntity(spotlightStripLight);\r\n    spotlightStripLight.setParent(_scene);\r\n    var transform75 = new Transform({\r\n        position: new Vector3(27, 75, 32.78843688964844),\r\n        rotation: new Quaternion(-6.692902301134779e-16, -0.7071068286895752, 8.429368136830817e-8, -0.7071068286895752),\r\n        scale: new Vector3(1.0000016689300537, 1, 1.0000016689300537)\r\n    });\r\n    spotlightStripLight.addComponentOrReplace(transform75);\r\n    var spark = new Entity('spark');\r\n    engine.addEntity(spark);\r\n    spark.setParent(_scene);\r\n    var transform76 = new Transform({\r\n        position: new Vector3(21.67552375793457, 78.02174377441406, 32.75471115112305),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    spark.addComponentOrReplace(transform76);\r\n    var spark2 = new Entity('spark2');\r\n    engine.addEntity(spark2);\r\n    spark2.setParent(_scene);\r\n    var transform77 = new Transform({\r\n        position: new Vector3(32.69689178466797, 78.02174377441406, 32.75471115112305),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    spark2.addComponentOrReplace(transform77);\r\n    var barM = new Entity('barM');\r\n    engine.addEntity(barM);\r\n    barM.setParent(_scene);\r\n    var transform78 = new Transform({\r\n        position: new Vector3(28.5, 73.76612091064453, 54.87474060058594),\r\n        rotation: new Quaternion(-5.837277581059123e-15, 1, -1.1920928244535389e-7, 0),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    barM.addComponentOrReplace(transform78);\r\n    var gltfShape21 = new GLTFShape(\"2312b12f-d481-4229-be52-82aa3819a391/Furnit Bar 4 2M.glb\");\r\n    gltfShape21.withCollisions = true;\r\n    gltfShape21.isPointerBlocker = true;\r\n    gltfShape21.visible = true;\r\n    barM.addComponentOrReplace(gltfShape21);\r\n    var barM2 = new Entity('barM2');\r\n    engine.addEntity(barM2);\r\n    barM2.setParent(_scene);\r\n    barM2.addComponentOrReplace(gltfShape21);\r\n    var transform79 = new Transform({\r\n        position: new Vector3(26.75421905517578, 73.76612091064453, 54.87474060058594),\r\n        rotation: new Quaternion(-5.837277581059123e-15, 1, -1.1920928244535389e-7, 0),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    barM2.addComponentOrReplace(transform79);\r\n    var barGreen = new Entity('barGreen');\r\n    engine.addEntity(barGreen);\r\n    barGreen.setParent(_scene);\r\n    var transform80 = new Transform({\r\n        position: new Vector3(22.500003814697266, 71.5, 52.5),\r\n        rotation: new Quaternion(-4.8369380230988985e-15, 1, -1.1920928244535389e-7, -3.725290298461914e-8),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    barGreen.addComponentOrReplace(transform80);\r\n    var gltfShape22 = new GLTFShape(\"d918354b-4382-4b9d-acbb-cc13fadad45a/Bar_Green.glb\");\r\n    gltfShape22.withCollisions = true;\r\n    gltfShape22.isPointerBlocker = true;\r\n    gltfShape22.visible = true;\r\n    barGreen.addComponentOrReplace(gltfShape22);\r\n    var barGreen2 = new Entity('barGreen2');\r\n    engine.addEntity(barGreen2);\r\n    barGreen2.setParent(_scene);\r\n    barGreen2.addComponentOrReplace(gltfShape22);\r\n    var transform81 = new Transform({\r\n        position: new Vector3(28.609935760498047, 71.5, 52.5),\r\n        rotation: new Quaternion(-4.8369380230988985e-15, 1, -1.1920928244535389e-7, -3.725290298461914e-8),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    barGreen2.addComponentOrReplace(transform81);\r\n    var concreteRoundedTable = new Entity('concreteRoundedTable');\r\n    engine.addEntity(concreteRoundedTable);\r\n    concreteRoundedTable.setParent(_scene);\r\n    var transform82 = new Transform({\r\n        position: new Vector3(34.500003814697266, 71.57027435302734, 47),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable.addComponentOrReplace(transform82);\r\n    var gltfShape23 = new GLTFShape(\"9d9c165d-3aaa-44ae-89f6-20d977122fce/Table_04/Table_04.glb\");\r\n    gltfShape23.withCollisions = true;\r\n    gltfShape23.isPointerBlocker = true;\r\n    gltfShape23.visible = true;\r\n    concreteRoundedTable.addComponentOrReplace(gltfShape23);\r\n    var concreteRoundedTable2 = new Entity('concreteRoundedTable2');\r\n    engine.addEntity(concreteRoundedTable2);\r\n    concreteRoundedTable2.setParent(_scene);\r\n    concreteRoundedTable2.addComponentOrReplace(gltfShape23);\r\n    var transform83 = new Transform({\r\n        position: new Vector3(33, 71.57027435302734, 43.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable2.addComponentOrReplace(transform83);\r\n    var concreteRoundedTable3 = new Entity('concreteRoundedTable3');\r\n    engine.addEntity(concreteRoundedTable3);\r\n    concreteRoundedTable3.setParent(_scene);\r\n    concreteRoundedTable3.addComponentOrReplace(gltfShape23);\r\n    var transform84 = new Transform({\r\n        position: new Vector3(37, 71.57027435302734, 44.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable3.addComponentOrReplace(transform84);\r\n    var concreteRoundedTable4 = new Entity('concreteRoundedTable4');\r\n    engine.addEntity(concreteRoundedTable4);\r\n    concreteRoundedTable4.setParent(_scene);\r\n    concreteRoundedTable4.addComponentOrReplace(gltfShape23);\r\n    var transform85 = new Transform({\r\n        position: new Vector3(35.5, 71.57027435302734, 41.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable4.addComponentOrReplace(transform85);\r\n    var concreteRoundedTable5 = new Entity('concreteRoundedTable5');\r\n    engine.addEntity(concreteRoundedTable5);\r\n    concreteRoundedTable5.setParent(_scene);\r\n    concreteRoundedTable5.addComponentOrReplace(gltfShape23);\r\n    var transform86 = new Transform({\r\n        position: new Vector3(32, 71.57027435302734, 40.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable5.addComponentOrReplace(transform86);\r\n    var concreteRoundedTable6 = new Entity('concreteRoundedTable6');\r\n    engine.addEntity(concreteRoundedTable6);\r\n    concreteRoundedTable6.setParent(_scene);\r\n    concreteRoundedTable6.addComponentOrReplace(gltfShape23);\r\n    var transform87 = new Transform({\r\n        position: new Vector3(38.5, 71.57027435302734, 41.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable6.addComponentOrReplace(transform87);\r\n    var concreteRoundedTable7 = new Entity('concreteRoundedTable7');\r\n    engine.addEntity(concreteRoundedTable7);\r\n    concreteRoundedTable7.setParent(_scene);\r\n    concreteRoundedTable7.addComponentOrReplace(gltfShape23);\r\n    var transform88 = new Transform({\r\n        position: new Vector3(36, 71.57027435302734, 38),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    concreteRoundedTable7.addComponentOrReplace(transform88);\r\n    var funkyFloorLight = new Entity('funkyFloorLight');\r\n    engine.addEntity(funkyFloorLight);\r\n    funkyFloorLight.setParent(_scene);\r\n    var transform89 = new Transform({\r\n        position: new Vector3(17.80194854736328, 71.34190368652344, 42.82564163208008),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight.addComponentOrReplace(transform89);\r\n    var funkyFloorLight2 = new Entity('funkyFloorLight2');\r\n    engine.addEntity(funkyFloorLight2);\r\n    funkyFloorLight2.setParent(_scene);\r\n    var transform90 = new Transform({\r\n        position: new Vector3(17, 71.34190368652344, 39),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight2.addComponentOrReplace(transform90);\r\n    var funkyFloorLight3 = new Entity('funkyFloorLight3');\r\n    engine.addEntity(funkyFloorLight3);\r\n    funkyFloorLight3.setParent(_scene);\r\n    var transform91 = new Transform({\r\n        position: new Vector3(38.5, 71.34190368652344, 50.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight3.addComponentOrReplace(transform91);\r\n    var funkyFloorLight4 = new Entity('funkyFloorLight4');\r\n    engine.addEntity(funkyFloorLight4);\r\n    funkyFloorLight4.setParent(_scene);\r\n    var transform92 = new Transform({\r\n        position: new Vector3(38, 71.34190368652344, 38),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight4.addComponentOrReplace(transform92);\r\n    var funkyFloorLight5 = new Entity('funkyFloorLight5');\r\n    engine.addEntity(funkyFloorLight5);\r\n    funkyFloorLight5.setParent(_scene);\r\n    var transform93 = new Transform({\r\n        position: new Vector3(18, 71.34190368652344, 53.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight5.addComponentOrReplace(transform93);\r\n    var funkyFloorLight6 = new Entity('funkyFloorLight6');\r\n    engine.addEntity(funkyFloorLight6);\r\n    funkyFloorLight6.setParent(_scene);\r\n    var transform94 = new Transform({\r\n        position: new Vector3(34, 71.34190368652344, 33),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    funkyFloorLight6.addComponentOrReplace(transform94);\r\n    var tableLampLight = new Entity('tableLampLight');\r\n    engine.addEntity(tableLampLight);\r\n    tableLampLight.setParent(_scene);\r\n    var transform95 = new Transform({\r\n        position: new Vector3(32.13079071044922, 72.67411804199219, 40.50913619995117),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight.addComponentOrReplace(transform95);\r\n    var tableLampLight2 = new Entity('tableLampLight2');\r\n    engine.addEntity(tableLampLight2);\r\n    tableLampLight2.setParent(_scene);\r\n    var transform96 = new Transform({\r\n        position: new Vector3(33.14960861206055, 72.67411804199219, 43.3328857421875),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight2.addComponentOrReplace(transform96);\r\n    var tableLampLight3 = new Entity('tableLampLight3');\r\n    engine.addEntity(tableLampLight3);\r\n    tableLampLight3.setParent(_scene);\r\n    var transform97 = new Transform({\r\n        position: new Vector3(34.60026168823242, 72.67411804199219, 46.872772216796875),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight3.addComponentOrReplace(transform97);\r\n    var tableLampLight4 = new Entity('tableLampLight4');\r\n    engine.addEntity(tableLampLight4);\r\n    tableLampLight4.setParent(_scene);\r\n    var transform98 = new Transform({\r\n        position: new Vector3(37.10054016113281, 72.67411804199219, 44.43312454223633),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight4.addComponentOrReplace(transform98);\r\n    var tableLampLight5 = new Entity('tableLampLight5');\r\n    engine.addEntity(tableLampLight5);\r\n    tableLampLight5.setParent(_scene);\r\n    var transform99 = new Transform({\r\n        position: new Vector3(35.604217529296875, 72.67411804199219, 41.37492370605469),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight5.addComponentOrReplace(transform99);\r\n    var tableLampLight6 = new Entity('tableLampLight6');\r\n    engine.addEntity(tableLampLight6);\r\n    tableLampLight6.setParent(_scene);\r\n    var transform100 = new Transform({\r\n        position: new Vector3(38.5920524597168, 72.67411804199219, 41.39891052246094),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight6.addComponentOrReplace(transform100);\r\n    var tableLampLight7 = new Entity('tableLampLight7');\r\n    engine.addEntity(tableLampLight7);\r\n    tableLampLight7.setParent(_scene);\r\n    var transform101 = new Transform({\r\n        position: new Vector3(36.142356872558594, 72.67411804199219, 37.90637969970703),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    tableLampLight7.addComponentOrReplace(transform101);\r\n    var radioCyberpunk2 = new Entity('radioCyberpunk2');\r\n    engine.addEntity(radioCyberpunk2);\r\n    radioCyberpunk2.setParent(_scene);\r\n    var transform102 = new Transform({\r\n        position: new Vector3(40.82681655883789, 71.84272766113281, 44.5),\r\n        rotation: new Quaternion(-7.5014728586828e-15, 0.9807853102684021, -1.1691871293351142e-7, -0.19509033858776093),\r\n        scale: new Vector3(0.14363409578800201, 1.3091845512390137, 0.4901173412799835)\r\n    });\r\n    radioCyberpunk2.addComponentOrReplace(transform102);\r\n    var rainLight = new Entity('rainLight');\r\n    engine.addEntity(rainLight);\r\n    rainLight.setParent(_scene);\r\n    var transform103 = new Transform({\r\n        position: new Vector3(22, 2.3747870922088623, 47),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.5, 1, 3)\r\n    });\r\n    rainLight.addComponentOrReplace(transform103);\r\n    var rainLight2 = new Entity('rainLight2');\r\n    engine.addEntity(rainLight2);\r\n    rainLight2.setParent(_scene);\r\n    var transform104 = new Transform({\r\n        position: new Vector3(33, 2.3747870922088623, 47),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.5, 1, 3)\r\n    });\r\n    rainLight2.addComponentOrReplace(transform104);\r\n    var ceilingStriplight3 = new Entity('ceilingStriplight3');\r\n    engine.addEntity(ceilingStriplight3);\r\n    ceilingStriplight3.setParent(_scene);\r\n    var transform105 = new Transform({\r\n        position: new Vector3(28.447551727294922, 27.895545959472656, 35.42642593383789),\r\n        rotation: new Quaternion(2.519601992594534e-14, 1.1920927533992653e-7, -9.641743851343705e-15, 1),\r\n        scale: new Vector3(1.5000053644180298, 1.5, 1.5000051259994507)\r\n    });\r\n    ceilingStriplight3.addComponentOrReplace(transform105);\r\n    var spotlightStripLight2 = new Entity('spotlightStripLight2');\r\n    engine.addEntity(spotlightStripLight2);\r\n    spotlightStripLight2.setParent(_scene);\r\n    var transform106 = new Transform({\r\n        position: new Vector3(28.430898666381836, 27.895545959472656, 41.057098388671875),\r\n        rotation: new Quaternion(-1.0115003181831311e-14, -1, 1.1920927533992653e-7, 1.1920927533992653e-7),\r\n        scale: new Vector3(1.5000053644180298, 1.5, 1.5000051259994507)\r\n    });\r\n    spotlightStripLight2.addComponentOrReplace(transform106);\r\n    var ceilingStriplight4 = new Entity('ceilingStriplight4');\r\n    engine.addEntity(ceilingStriplight4);\r\n    ceilingStriplight4.setParent(_scene);\r\n    var transform107 = new Transform({\r\n        position: new Vector3(28.447559356689453, 27.895545959472656, 45.54078674316406),\r\n        rotation: new Quaternion(2.519601992594534e-14, 1.1920927533992653e-7, -9.641743851343705e-15, 1),\r\n        scale: new Vector3(1.5000057220458984, 1.5, 1.5000054836273193)\r\n    });\r\n    ceilingStriplight4.addComponentOrReplace(transform107);\r\n    var wallPlainPistachio = new Entity('wallPlainPistachio');\r\n    engine.addEntity(wallPlainPistachio);\r\n    wallPlainPistachio.setParent(_scene);\r\n    var transform108 = new Transform({\r\n        position: new Vector3(29.77194595336914, 0, 31),\r\n        rotation: new Quaternion(0.7071068286895752, 1.5394153601527394e-15, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(2.3601064682006836, 5.011066436767578, 0.19875061511993408)\r\n    });\r\n    wallPlainPistachio.addComponentOrReplace(transform108);\r\n    var gltfShape24 = new GLTFShape(\"71bba827-1721-4afc-a521-e75344c63f0f/PlainPistachioWall.glb\");\r\n    gltfShape24.withCollisions = true;\r\n    gltfShape24.isPointerBlocker = true;\r\n    gltfShape24.visible = true;\r\n    wallPlainPistachio.addComponentOrReplace(gltfShape24);\r\n    var imageFromURL = new Entity('imageFromURL');\r\n    engine.addEntity(imageFromURL);\r\n    imageFromURL.setParent(_scene);\r\n    var transform109 = new Transform({\r\n        position: new Vector3(27.5, 0.5, 50.945980072021484),\r\n        rotation: new Quaternion(-5.837277581059123e-15, 1, -1.1920928244535389e-7, 0),\r\n        scale: new Vector3(4.5, 4.5, 1)\r\n    });\r\n    imageFromURL.addComponentOrReplace(transform109);\r\n    var coffeeMachine = new Entity('coffeeMachine');\r\n    engine.addEntity(coffeeMachine);\r\n    coffeeMachine.setParent(_scene);\r\n    var transform110 = new Transform({\r\n        position: new Vector3(11.702714920043945, 38.923316955566406, 33.10163879394531),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    coffeeMachine.addComponentOrReplace(transform110);\r\n    var gltfShape25 = new GLTFShape(\"bf7da256-1314-40dc-a5b4-19c8dc5196e4/Coffee_Machine.glb\");\r\n    gltfShape25.withCollisions = true;\r\n    gltfShape25.isPointerBlocker = true;\r\n    gltfShape25.visible = true;\r\n    coffeeMachine.addComponentOrReplace(gltfShape25);\r\n    var roundedStarlightRug = new Entity('roundedStarlightRug');\r\n    engine.addEntity(roundedStarlightRug);\r\n    roundedStarlightRug.setParent(_scene);\r\n    var transform111 = new Transform({\r\n        position: new Vector3(16.5, 38, 27),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.5, 1, 1.5)\r\n    });\r\n    roundedStarlightRug.addComponentOrReplace(transform111);\r\n    var gltfShape26 = new GLTFShape(\"0b906173-5b55-4c95-9a53-9d9c6ba21fe0/Carpet_02/Carpet_02.glb\");\r\n    gltfShape26.withCollisions = true;\r\n    gltfShape26.isPointerBlocker = true;\r\n    gltfShape26.visible = true;\r\n    roundedStarlightRug.addComponentOrReplace(gltfShape26);\r\n    var rainLight3 = new Entity('rainLight3');\r\n    engine.addEntity(rainLight3);\r\n    rainLight3.setParent(_scene);\r\n    var transform112 = new Transform({\r\n        position: new Vector3(17, 37.42906188964844, 54.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.5, 2.5, 2.5)\r\n    });\r\n    rainLight3.addComponentOrReplace(transform112);\r\n    var couchThreeSeater = new Entity('couchThreeSeater');\r\n    engine.addEntity(couchThreeSeater);\r\n    couchThreeSeater.setParent(_scene);\r\n    var transform113 = new Transform({\r\n        position: new Vector3(20.5, 37.89574432373047, 35.90058135986328),\r\n        rotation: new Quaternion(1.0008235314104617e-15, -0.70710688829422, 8.429370268459024e-8, 0.7071067094802856),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    couchThreeSeater.addComponentOrReplace(transform113);\r\n    var gltfShape27 = new GLTFShape(\"7ec82823-7d54-4456-9a88-faf48f6098e1/ThreeSeater_Couch.glb\");\r\n    gltfShape27.withCollisions = true;\r\n    gltfShape27.isPointerBlocker = true;\r\n    gltfShape27.visible = true;\r\n    couchThreeSeater.addComponentOrReplace(gltfShape27);\r\n    var couchThreeSeater2 = new Entity('couchThreeSeater2');\r\n    engine.addEntity(couchThreeSeater2);\r\n    couchThreeSeater2.setParent(_scene);\r\n    couchThreeSeater2.addComponentOrReplace(gltfShape27);\r\n    var transform114 = new Transform({\r\n        position: new Vector3(20.5, 37.89574432373047, 31.390714645385742),\r\n        rotation: new Quaternion(1.0008235314104617e-15, -0.70710688829422, 8.429370268459024e-8, 0.7071067094802856),\r\n        scale: new Vector3(1, 1, 1)\r\n    });\r\n    couchThreeSeater2.addComponentOrReplace(transform114);\r\n    var table = new Entity('table');\r\n    engine.addEntity(table);\r\n    table.setParent(_scene);\r\n    var transform115 = new Transform({\r\n        position: new Vector3(20.872072219848633, 37.94304275512695, 31.997154235839844),\r\n        rotation: new Quaternion(-1.5014858600494022e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071067690849304),\r\n        scale: new Vector3(1.200634479522705, 1, 1.8871008157730103)\r\n    });\r\n    table.addComponentOrReplace(transform115);\r\n    var gltfShape28 = new GLTFShape(\"55a98e69-9ec8-4f04-ba26-8764b255dd50/Furnit 1.glb\");\r\n    gltfShape28.withCollisions = true;\r\n    gltfShape28.isPointerBlocker = true;\r\n    gltfShape28.visible = true;\r\n    table.addComponentOrReplace(gltfShape28);\r\n    var pillarGlow3 = new Entity('pillarGlow3');\r\n    engine.addEntity(pillarGlow3);\r\n    pillarGlow3.setParent(_scene);\r\n    var transform116 = new Transform({\r\n        position: new Vector3(39, 47.5, 32),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.3164892196655273, 11.603154182434082)\r\n    });\r\n    pillarGlow3.addComponentOrReplace(transform116);\r\n    pillarGlow3.addComponentOrReplace(gltfShape20);\r\n    var obita = new Entity('obita');\r\n    engine.addEntity(obita);\r\n    obita.setParent(_scene);\r\n    obita.addComponentOrReplace(gltfShape5);\r\n    var transform117 = new Transform({\r\n        position: new Vector3(27.5, 0, 41),\r\n        rotation: new Quaternion(5.592420684798639e-16, 1, -1.1920926823449918e-7, 0),\r\n        scale: new Vector3(1, 0.9470276236534119, 1)\r\n    });\r\n    obita.addComponentOrReplace(transform117);\r\n    var pillarGlow4 = new Entity('pillarGlow4');\r\n    engine.addEntity(pillarGlow4);\r\n    pillarGlow4.setParent(_scene);\r\n    pillarGlow4.addComponentOrReplace(gltfShape20);\r\n    var transform118 = new Transform({\r\n        position: new Vector3(39, 47.5, 42.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.3164892196655273, 11.603154182434082)\r\n    });\r\n    pillarGlow4.addComponentOrReplace(transform118);\r\n    var pillarGlow5 = new Entity('pillarGlow5');\r\n    engine.addEntity(pillarGlow5);\r\n    pillarGlow5.setParent(_scene);\r\n    pillarGlow5.addComponentOrReplace(gltfShape20);\r\n    var transform119 = new Transform({\r\n        position: new Vector3(39, 47.5, 57),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.3164892196655273, 11.603154182434082)\r\n    });\r\n    pillarGlow5.addComponentOrReplace(transform119);\r\n    var nftPictureFrame = new Entity('nftPictureFrame');\r\n    engine.addEntity(nftPictureFrame);\r\n    nftPictureFrame.setParent(_scene);\r\n    var transform120 = new Transform({\r\n        position: new Vector3(38.5, 49, 41.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000078678131104, 3.5, 1.000002145767212)\r\n    });\r\n    nftPictureFrame.addComponentOrReplace(transform120);\r\n    var nftPictureFrame2 = new Entity('nftPictureFrame2');\r\n    engine.addEntity(nftPictureFrame2);\r\n    nftPictureFrame2.setParent(_scene);\r\n    var transform121 = new Transform({\r\n        position: new Vector3(38.5, 49, 38.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000088214874268, 3.5, 1.000002384185791)\r\n    });\r\n    nftPictureFrame2.addComponentOrReplace(transform121);\r\n    var nftPictureFrame3 = new Entity('nftPictureFrame3');\r\n    engine.addEntity(nftPictureFrame3);\r\n    nftPictureFrame3.setParent(_scene);\r\n    var transform122 = new Transform({\r\n        position: new Vector3(38.5, 51.5, 38.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000107288360596, 3.5, 1.0000028610229492)\r\n    });\r\n    nftPictureFrame3.addComponentOrReplace(transform122);\r\n    var nftPictureFrame4 = new Entity('nftPictureFrame4');\r\n    engine.addEntity(nftPictureFrame4);\r\n    nftPictureFrame4.setParent(_scene);\r\n    var transform123 = new Transform({\r\n        position: new Vector3(38.5, 51.5, 41.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500011682510376, 3.5, 1.0000030994415283)\r\n    });\r\n    nftPictureFrame4.addComponentOrReplace(transform123);\r\n    var nftPictureFrame5 = new Entity('nftPictureFrame5');\r\n    engine.addEntity(nftPictureFrame5);\r\n    nftPictureFrame5.setParent(_scene);\r\n    var transform124 = new Transform({\r\n        position: new Vector3(38.5, 54, 41.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000126361846924, 3.5, 1.0000033378601074)\r\n    });\r\n    nftPictureFrame5.addComponentOrReplace(transform124);\r\n    var nftPictureFrame6 = new Entity('nftPictureFrame6');\r\n    engine.addEntity(nftPictureFrame6);\r\n    nftPictureFrame6.setParent(_scene);\r\n    var transform125 = new Transform({\r\n        position: new Vector3(38.5, 54, 38.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500013589859009, 3.5, 1.0000035762786865)\r\n    });\r\n    nftPictureFrame6.addComponentOrReplace(transform125);\r\n    var nftPictureFrame9 = new Entity('nftPictureFrame9');\r\n    engine.addEntity(nftPictureFrame9);\r\n    nftPictureFrame9.setParent(_scene);\r\n    var transform126 = new Transform({\r\n        position: new Vector3(38.5, 49, 27.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500009775161743, 3.5, 1.0000026226043701)\r\n    });\r\n    nftPictureFrame9.addComponentOrReplace(transform126);\r\n    var nftPictureFrame10 = new Entity('nftPictureFrame10');\r\n    engine.addEntity(nftPictureFrame10);\r\n    nftPictureFrame10.setParent(_scene);\r\n    var transform127 = new Transform({\r\n        position: new Vector3(38.5, 49, 30.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000088214874268, 3.5, 1.000002384185791)\r\n    });\r\n    nftPictureFrame10.addComponentOrReplace(transform127);\r\n    var nftPictureFrame11 = new Entity('nftPictureFrame11');\r\n    engine.addEntity(nftPictureFrame11);\r\n    nftPictureFrame11.setParent(_scene);\r\n    var transform128 = new Transform({\r\n        position: new Vector3(38.5, 51.5, 29.104110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(8.750038146972656, 8.75, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame11.addComponentOrReplace(transform128);\r\n    var nftPictureFrame13 = new Entity('nftPictureFrame13');\r\n    engine.addEntity(nftPictureFrame13);\r\n    nftPictureFrame13.setParent(_scene);\r\n    var transform129 = new Transform({\r\n        position: new Vector3(39, 54, 30.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame13.addComponentOrReplace(transform129);\r\n    var nftPictureFrame14 = new Entity('nftPictureFrame14');\r\n    engine.addEntity(nftPictureFrame14);\r\n    nftPictureFrame14.setParent(_scene);\r\n    var transform130 = new Transform({\r\n        position: new Vector3(39, 51.5, 30.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500014543533325, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame14.addComponentOrReplace(transform130);\r\n    var nftPictureFrame15 = new Entity('nftPictureFrame15');\r\n    engine.addEntity(nftPictureFrame15);\r\n    nftPictureFrame15.setParent(_scene);\r\n    var transform131 = new Transform({\r\n        position: new Vector3(39, 49, 30.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000126361846924, 3.5, 1.0000033378601074)\r\n    });\r\n    nftPictureFrame15.addComponentOrReplace(transform131);\r\n    var nftPictureFrame16 = new Entity('nftPictureFrame16');\r\n    engine.addEntity(nftPictureFrame16);\r\n    nftPictureFrame16.setParent(_scene);\r\n    var transform132 = new Transform({\r\n        position: new Vector3(39, 49, 27.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500011682510376, 3.5, 1.0000030994415283)\r\n    });\r\n    nftPictureFrame16.addComponentOrReplace(transform132);\r\n    var nftPictureFrame17 = new Entity('nftPictureFrame17');\r\n    engine.addEntity(nftPictureFrame17);\r\n    nftPictureFrame17.setParent(_scene);\r\n    var transform133 = new Transform({\r\n        position: new Vector3(39, 51.5, 27.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000154972076416, 3.5, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame17.addComponentOrReplace(transform133);\r\n    var nftPictureFrame18 = new Entity('nftPictureFrame18');\r\n    engine.addEntity(nftPictureFrame18);\r\n    nftPictureFrame18.setParent(_scene);\r\n    var transform134 = new Transform({\r\n        position: new Vector3(39, 54, 27.604110717773438),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500016450881958, 3.5, 1.0000042915344238)\r\n    });\r\n    nftPictureFrame18.addComponentOrReplace(transform134);\r\n    var nftPictureFrame19 = new Entity('nftPictureFrame19');\r\n    engine.addEntity(nftPictureFrame19);\r\n    nftPictureFrame19.setParent(_scene);\r\n    var transform135 = new Transform({\r\n        position: new Vector3(39, 54, 41.10411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500018358230591, 3.5, 1.000004768371582)\r\n    });\r\n    nftPictureFrame19.addComponentOrReplace(transform135);\r\n    var nftPictureFrame22 = new Entity('nftPictureFrame22');\r\n    engine.addEntity(nftPictureFrame22);\r\n    nftPictureFrame22.setParent(_scene);\r\n    var transform136 = new Transform({\r\n        position: new Vector3(39, 49, 39.60411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(8.750038146972656, 8.75, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame22.addComponentOrReplace(transform136);\r\n    var nftPictureFrame24 = new Entity('nftPictureFrame24');\r\n    engine.addEntity(nftPictureFrame24);\r\n    nftPictureFrame24.setParent(_scene);\r\n    var transform137 = new Transform({\r\n        position: new Vector3(39, 54, 38.10411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame24.addComponentOrReplace(transform137);\r\n    var nftPictureFrame7 = new Entity('nftPictureFrame7');\r\n    engine.addEntity(nftPictureFrame7);\r\n    nftPictureFrame7.setParent(_scene);\r\n    var transform138 = new Transform({\r\n        position: new Vector3(39, 54, 55.60411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500023126602173, 3.5, 1.0000059604644775)\r\n    });\r\n    nftPictureFrame7.addComponentOrReplace(transform138);\r\n    var nftPictureFrame8 = new Entity('nftPictureFrame8');\r\n    engine.addEntity(nftPictureFrame8);\r\n    nftPictureFrame8.setParent(_scene);\r\n    var transform139 = new Transform({\r\n        position: new Vector3(39, 54, 52.60411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000221729278564, 3.5, 1.0000057220458984)\r\n    });\r\n    nftPictureFrame8.addComponentOrReplace(transform139);\r\n    var nftPictureFrame12 = new Entity('nftPictureFrame12');\r\n    engine.addEntity(nftPictureFrame12);\r\n    nftPictureFrame12.setParent(_scene);\r\n    var transform140 = new Transform({\r\n        position: new Vector3(39, 49, 54.10411071777344),\r\n        rotation: new Quaternion(8.189012043067958e-15, 0.7071068286895752, -8.429368847373553e-8, 0.7071068286895752),\r\n        scale: new Vector3(8.75004768371582, 8.75, 1.0000052452087402)\r\n    });\r\n    nftPictureFrame12.addComponentOrReplace(transform140);\r\n    var nftPictureFrame20 = new Entity('nftPictureFrame20');\r\n    engine.addEntity(nftPictureFrame20);\r\n    nftPictureFrame20.setParent(_scene);\r\n    var transform141 = new Transform({\r\n        position: new Vector3(38.5, 49, 52.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500013589859009, 3.5, 1.0000035762786865)\r\n    });\r\n    nftPictureFrame20.addComponentOrReplace(transform141);\r\n    var nftPictureFrame21 = new Entity('nftPictureFrame21');\r\n    engine.addEntity(nftPictureFrame21);\r\n    nftPictureFrame21.setParent(_scene);\r\n    var transform142 = new Transform({\r\n        position: new Vector3(38.5, 49, 55.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000126361846924, 3.5, 1.0000033378601074)\r\n    });\r\n    nftPictureFrame21.addComponentOrReplace(transform142);\r\n    var nftPictureFrame23 = new Entity('nftPictureFrame23');\r\n    engine.addEntity(nftPictureFrame23);\r\n    nftPictureFrame23.setParent(_scene);\r\n    var transform143 = new Transform({\r\n        position: new Vector3(38.5, 51.5, 54.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(8.750045776367188, 8.75, 1.0000050067901611)\r\n    });\r\n    nftPictureFrame23.addComponentOrReplace(transform143);\r\n    var wallPlainBlack = new Entity('wallPlainBlack');\r\n    engine.addEntity(wallPlainBlack);\r\n    wallPlainBlack.setParent(_scene);\r\n    var transform144 = new Transform({\r\n        position: new Vector3(43.97306442260742, 47.5, 21.357261657714844),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, 0.7071068286895752, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(19.623207092285156, 2.3131377696990967, 0.13999967277050018)\r\n    });\r\n    wallPlainBlack.addComponentOrReplace(transform144);\r\n    var gltfShape29 = new GLTFShape(\"d36f333b-c736-4db8-a5e2-6ab47d4364b9/PlainBlackWall.glb\");\r\n    gltfShape29.withCollisions = true;\r\n    gltfShape29.isPointerBlocker = true;\r\n    gltfShape29.visible = true;\r\n    wallPlainBlack.addComponentOrReplace(gltfShape29);\r\n    var wallPlainBlack2 = new Entity('wallPlainBlack2');\r\n    engine.addEntity(wallPlainBlack2);\r\n    wallPlainBlack2.setParent(_scene);\r\n    wallPlainBlack2.addComponentOrReplace(gltfShape29);\r\n    var transform145 = new Transform({\r\n        position: new Vector3(11.09113883972168, 47.5, 21.357261657714844),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, 0.7071068286895752, -8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(19.623218536376953, 2.3131377696990967, 0.13999976217746735)\r\n    });\r\n    wallPlainBlack2.addComponentOrReplace(transform145);\r\n    var wallPlainBlack3 = new Entity('wallPlainBlack3');\r\n    engine.addEntity(wallPlainBlack3);\r\n    wallPlainBlack3.setParent(_scene);\r\n    wallPlainBlack3.addComponentOrReplace(gltfShape29);\r\n    var transform146 = new Transform({\r\n        position: new Vector3(43.97306442260742, 47.5, 21.386117935180664),\r\n        rotation: new Quaternion(-1.7218110939706257e-15, -3.725290298461914e-8, 1.7763568394002505e-15, 1),\r\n        scale: new Vector3(5.264899730682373, 2.3131377696990967, 0.13999971747398376)\r\n    });\r\n    wallPlainBlack3.addComponentOrReplace(transform146);\r\n    var wallPlainBlack4 = new Entity('wallPlainBlack4');\r\n    engine.addEntity(wallPlainBlack4);\r\n    wallPlainBlack4.setParent(_scene);\r\n    wallPlainBlack4.addComponentOrReplace(gltfShape29);\r\n    var transform147 = new Transform({\r\n        position: new Vector3(43.97306442260742, 47.5, 60.536468505859375),\r\n        rotation: new Quaternion(-1.7218110939706257e-15, -3.725290298461914e-8, 1.7763568394002505e-15, 1),\r\n        scale: new Vector3(5.264899730682373, 2.3131377696990967, 0.13999971747398376)\r\n    });\r\n    wallPlainBlack4.addComponentOrReplace(transform147);\r\n    var wallPlainBlack5 = new Entity('wallPlainBlack5');\r\n    engine.addEntity(wallPlainBlack5);\r\n    wallPlainBlack5.setParent(_scene);\r\n    wallPlainBlack5.addComponentOrReplace(gltfShape29);\r\n    var transform148 = new Transform({\r\n        position: new Vector3(21.574344635009766, 47.5, 60.536468505859375),\r\n        rotation: new Quaternion(-1.7218110939706257e-15, -3.725290298461914e-8, 1.7763568394002505e-15, 1),\r\n        scale: new Vector3(5.264899730682373, 2.3131377696990967, 0.13999971747398376)\r\n    });\r\n    wallPlainBlack5.addComponentOrReplace(transform148);\r\n    var wallPlainBlack6 = new Entity('wallPlainBlack6');\r\n    engine.addEntity(wallPlainBlack6);\r\n    wallPlainBlack6.setParent(_scene);\r\n    wallPlainBlack6.addComponentOrReplace(gltfShape29);\r\n    var transform149 = new Transform({\r\n        position: new Vector3(21.574344635009766, 47.5, 21.386117935180664),\r\n        rotation: new Quaternion(-1.7218110939706257e-15, -3.725290298461914e-8, 1.7763568394002505e-15, 1),\r\n        scale: new Vector3(5.264899730682373, 2.3131377696990967, 0.13999971747398376)\r\n    });\r\n    wallPlainBlack6.addComponentOrReplace(transform149);\r\n    var nftPictureFrame25 = new Entity('nftPictureFrame25');\r\n    engine.addEntity(nftPictureFrame25);\r\n    nftPictureFrame25.setParent(_scene);\r\n    var transform150 = new Transform({\r\n        position: new Vector3(11.095813751220703, 49, 31.104110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.500013589859009, 3.5, 1.0000035762786865)\r\n    });\r\n    nftPictureFrame25.addComponentOrReplace(transform150);\r\n    var nftPictureFrame26 = new Entity('nftPictureFrame26');\r\n    engine.addEntity(nftPictureFrame26);\r\n    nftPictureFrame26.setParent(_scene);\r\n    var transform151 = new Transform({\r\n        position: new Vector3(11.095813751220703, 49, 34.10411071777344),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.500014543533325, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame26.addComponentOrReplace(transform151);\r\n    var nftPictureFrame27 = new Entity('nftPictureFrame27');\r\n    engine.addEntity(nftPictureFrame27);\r\n    nftPictureFrame27.setParent(_scene);\r\n    var transform152 = new Transform({\r\n        position: new Vector3(11.095813751220703, 51.5, 34.10411071777344),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.500016450881958, 3.5, 1.0000042915344238)\r\n    });\r\n    nftPictureFrame27.addComponentOrReplace(transform152);\r\n    var nftPictureFrame28 = new Entity('nftPictureFrame28');\r\n    engine.addEntity(nftPictureFrame28);\r\n    nftPictureFrame28.setParent(_scene);\r\n    var transform153 = new Transform({\r\n        position: new Vector3(11.095813751220703, 51.5, 31.104110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame28.addComponentOrReplace(transform153);\r\n    var nftPictureFrame29 = new Entity('nftPictureFrame29');\r\n    engine.addEntity(nftPictureFrame29);\r\n    nftPictureFrame29.setParent(_scene);\r\n    var transform154 = new Transform({\r\n        position: new Vector3(11.095813751220703, 54, 31.104110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.500018358230591, 3.5, 1.000004768371582)\r\n    });\r\n    nftPictureFrame29.addComponentOrReplace(transform154);\r\n    var nftPictureFrame30 = new Entity('nftPictureFrame30');\r\n    engine.addEntity(nftPictureFrame30);\r\n    nftPictureFrame30.setParent(_scene);\r\n    var transform155 = new Transform({\r\n        position: new Vector3(11.095813751220703, 54, 34.10411071777344),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.5000193119049072, 3.5, 1.0000050067901611)\r\n    });\r\n    nftPictureFrame30.addComponentOrReplace(transform155);\r\n    var nftPictureFrame31 = new Entity('nftPictureFrame31');\r\n    engine.addEntity(nftPictureFrame31);\r\n    nftPictureFrame31.setParent(_scene);\r\n    var transform156 = new Transform({\r\n        position: new Vector3(11.095813751220703, 49.5, 26.604110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(7.000036716461182, 7, 1.000004768371582)\r\n    });\r\n    nftPictureFrame31.addComponentOrReplace(transform156);\r\n    var nftPictureFrame35 = new Entity('nftPictureFrame35');\r\n    engine.addEntity(nftPictureFrame35);\r\n    nftPictureFrame35.setParent(_scene);\r\n    var transform157 = new Transform({\r\n        position: new Vector3(11.095813751220703, 54, 25.104110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.5000193119049072, 3.5, 1.0000050067901611)\r\n    });\r\n    nftPictureFrame35.addComponentOrReplace(transform157);\r\n    var nftPictureFrame36 = new Entity('nftPictureFrame36');\r\n    engine.addEntity(nftPictureFrame36);\r\n    nftPictureFrame36.setParent(_scene);\r\n    var transform158 = new Transform({\r\n        position: new Vector3(11.095813751220703, 54, 28.104110717773438),\r\n        rotation: new Quaternion(-8.492664037296205e-15, -0.70710688829422, 8.429368847373553e-8, -0.7071067690849304),\r\n        scale: new Vector3(3.5000202655792236, 3.5, 1.0000052452087402)\r\n    });\r\n    nftPictureFrame36.addComponentOrReplace(transform158);\r\n    var nftPictureFrame32 = new Entity('nftPictureFrame32');\r\n    engine.addEntity(nftPictureFrame32);\r\n    nftPictureFrame32.setParent(_scene);\r\n    var transform159 = new Transform({\r\n        position: new Vector3(17.845813751220703, 50.5, 21.397174835205078),\r\n        rotation: new Quaternion(3.6875261721360745e-17, 5.960464477539063e-8, -8.881784197001252e-16, 1),\r\n        scale: new Vector3(7.000040054321289, 7, 1.0000048875808716)\r\n    });\r\n    nftPictureFrame32.addComponentOrReplace(transform159);\r\n    var nftPictureFrame33 = new Entity('nftPictureFrame33');\r\n    engine.addEntity(nftPictureFrame33);\r\n    nftPictureFrame33.setParent(_scene);\r\n    var transform160 = new Transform({\r\n        position: new Vector3(13.345813751220703, 52.5, 21.397174835205078),\r\n        rotation: new Quaternion(3.6875261721360745e-17, 5.960464477539063e-8, -8.881784197001252e-16, 1),\r\n        scale: new Vector3(3.500018835067749, 3.5, 1.000004768371582)\r\n    });\r\n    nftPictureFrame33.addComponentOrReplace(transform160);\r\n    var nftPictureFrame34 = new Entity('nftPictureFrame34');\r\n    engine.addEntity(nftPictureFrame34);\r\n    nftPictureFrame34.setParent(_scene);\r\n    var transform161 = new Transform({\r\n        position: new Vector3(13.345813751220703, 50, 21.397174835205078),\r\n        rotation: new Quaternion(3.6875261721360745e-17, 5.960464477539063e-8, -8.881784197001252e-16, 1),\r\n        scale: new Vector3(3.500014305114746, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame34.addComponentOrReplace(transform161);\r\n    var doorframeBlack = new Entity('doorframeBlack');\r\n    engine.addEntity(doorframeBlack);\r\n    doorframeBlack.setParent(_scene);\r\n    var transform162 = new Transform({\r\n        position: new Vector3(21.87889862060547, 47.542572021484375, 39.500003814697266),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(5.432254314422607, 2.2960193157196045, 1)\r\n    });\r\n    doorframeBlack.addComponentOrReplace(transform162);\r\n    var gltfShape30 = new GLTFShape(\"fb7c3a1e-aaf1-4bb1-baa1-0e0f57ed9b3f/BlackDoorframe.glb\");\r\n    gltfShape30.withCollisions = true;\r\n    gltfShape30.isPointerBlocker = true;\r\n    gltfShape30.visible = true;\r\n    doorframeBlack.addComponentOrReplace(gltfShape30);\r\n    var galleryLight = new Entity('galleryLight');\r\n    engine.addEntity(galleryLight);\r\n    galleryLight.setParent(_scene);\r\n    var transform163 = new Transform({\r\n        position: new Vector3(18.5, 54, 21.34850311279297),\r\n        rotation: new Quaternion(0, 0, -8.940696716308594e-8, 1),\r\n        scale: new Vector3(4.5, 1.5, 1.5)\r\n    });\r\n    galleryLight.addComponentOrReplace(transform163);\r\n    var galleryLight2 = new Entity('galleryLight2');\r\n    engine.addEntity(galleryLight2);\r\n    galleryLight2.setParent(_scene);\r\n    var transform164 = new Transform({\r\n        position: new Vector3(11.05478572845459, 53, 25.985076904296875),\r\n        rotation: new Quaternion(-6.322027701344268e-8, 0.7071068286895752, -1.4751397259260557e-7, 0.7071068286895752),\r\n        scale: new Vector3(4.500007629394531, 1.5, 1.5000038146972656)\r\n    });\r\n    galleryLight2.addComponentOrReplace(transform164);\r\n    var ringWhiteLight = new Entity('ringWhiteLight');\r\n    engine.addEntity(ringWhiteLight);\r\n    ringWhiteLight.setParent(_scene);\r\n    var transform165 = new Transform({\r\n        position: new Vector3(16.500001907348633, 56.39739227294922, 26.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2, 2, 2)\r\n    });\r\n    ringWhiteLight.addComponentOrReplace(transform165);\r\n    var gltfShape31 = new GLTFShape(\"d4837726-ae7f-4ca9-9886-677094735f82/Ring_White_Light.glb\");\r\n    gltfShape31.withCollisions = true;\r\n    gltfShape31.isPointerBlocker = true;\r\n    gltfShape31.visible = true;\r\n    ringWhiteLight.addComponentOrReplace(gltfShape31);\r\n    var ringPurpleLight = new Entity('ringPurpleLight');\r\n    engine.addEntity(ringPurpleLight);\r\n    ringPurpleLight.setParent(_scene);\r\n    var transform166 = new Transform({\r\n        position: new Vector3(16.55759620666504, 38, 47.76373291015625),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.7026450634002686, 1, 1.734947681427002)\r\n    });\r\n    ringPurpleLight.addComponentOrReplace(transform166);\r\n    var gltfShape32 = new GLTFShape(\"d1335dc0-98a6-430b-87db-0591e03455a5/Ring_Purple_Light.glb\");\r\n    gltfShape32.withCollisions = true;\r\n    gltfShape32.isPointerBlocker = true;\r\n    gltfShape32.visible = true;\r\n    ringPurpleLight.addComponentOrReplace(gltfShape32);\r\n    var ringGreenLight = new Entity('ringGreenLight');\r\n    engine.addEntity(ringGreenLight);\r\n    ringGreenLight.setParent(_scene);\r\n    var transform167 = new Transform({\r\n        position: new Vector3(16.544048309326172, 47.55891799926758, 47.6561164855957),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.6489653587341309, 1, 1.7172220945358276)\r\n    });\r\n    ringGreenLight.addComponentOrReplace(transform167);\r\n    var gltfShape33 = new GLTFShape(\"8afb65e1-05e3-46a7-949a-e9ed299e623c/Ring_Green_Light.glb\");\r\n    gltfShape33.withCollisions = true;\r\n    gltfShape33.isPointerBlocker = true;\r\n    gltfShape33.visible = true;\r\n    ringGreenLight.addComponentOrReplace(gltfShape33);\r\n    var ringRedLight = new Entity('ringRedLight');\r\n    engine.addEntity(ringRedLight);\r\n    ringRedLight.setParent(_scene);\r\n    var transform168 = new Transform({\r\n        position: new Vector3(16.563888549804688, 56.855899810791016, 47.72080993652344),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.736613392829895, 1, 1.7327123880386353)\r\n    });\r\n    ringRedLight.addComponentOrReplace(transform168);\r\n    var gltfShape34 = new GLTFShape(\"4bd7a0cc-0016-49c2-8075-7ec361af961a/Ring_Red_Light.glb\");\r\n    gltfShape34.withCollisions = true;\r\n    gltfShape34.isPointerBlocker = true;\r\n    gltfShape34.visible = true;\r\n    ringRedLight.addComponentOrReplace(gltfShape34);\r\n    var ringBlueLight = new Entity('ringBlueLight');\r\n    engine.addEntity(ringBlueLight);\r\n    ringBlueLight.setParent(_scene);\r\n    var transform169 = new Transform({\r\n        position: new Vector3(16.5650634765625, 71.58967590332031, 47.67985153198242),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.765059471130371, 1, 1.7139307260513306)\r\n    });\r\n    ringBlueLight.addComponentOrReplace(transform169);\r\n    var gltfShape35 = new GLTFShape(\"c64dfc6d-582d-497a-a657-e204c1672a7b/Ring_Blue_Light.glb\");\r\n    gltfShape35.withCollisions = true;\r\n    gltfShape35.isPointerBlocker = true;\r\n    gltfShape35.visible = true;\r\n    ringBlueLight.addComponentOrReplace(gltfShape35);\r\n    var spotlight = new Entity('spotlight');\r\n    engine.addEntity(spotlight);\r\n    spotlight.setParent(_scene);\r\n    var transform170 = new Transform({\r\n        position: new Vector3(32.5, 79, 32.88615417480469),\r\n        rotation: new Quaternion(-0.9385530352592468, -0.2681880593299866, 0.11108724027872086, -0.1866898238658905),\r\n        scale: new Vector3(0.9999998807907104, 0.38615572452545166, 1.0000020265579224)\r\n    });\r\n    spotlight.addComponentOrReplace(transform170);\r\n    var gltfShape36 = new GLTFShape(\"3ddda096-a798-432e-ba66-61354bccbcc9/Spotlight.glb\");\r\n    gltfShape36.withCollisions = true;\r\n    gltfShape36.isPointerBlocker = true;\r\n    gltfShape36.visible = true;\r\n    spotlight.addComponentOrReplace(gltfShape36);\r\n    var spotlight2 = new Entity('spotlight2');\r\n    engine.addEntity(spotlight2);\r\n    spotlight2.setParent(_scene);\r\n    spotlight2.addComponentOrReplace(gltfShape36);\r\n    var transform171 = new Transform({\r\n        position: new Vector3(21.759010314941406, 79, 32.88615417480469),\r\n        rotation: new Quaternion(0.9569404125213623, 1.5426704018899192e-15, -1.1407617961367578e-7, 0.2902846932411194),\r\n        scale: new Vector3(1, 0.3861556649208069, 1.0000025033950806)\r\n    });\r\n    spotlight2.addComponentOrReplace(transform171);\r\n    var spotlight3 = new Entity('spotlight3');\r\n    engine.addEntity(spotlight3);\r\n    spotlight3.setParent(_scene);\r\n    spotlight3.addComponentOrReplace(gltfShape36);\r\n    var transform172 = new Transform({\r\n        position: new Vector3(23.759010314941406, 79, 32.88615417480469),\r\n        rotation: new Quaternion(0.9194307923316956, 0.03750952333211899, -0.09055615216493607, 0.3808406591415405),\r\n        scale: new Vector3(0.9999999403953552, 0.38615596294403076, 1.0000028610229492)\r\n    });\r\n    spotlight3.addComponentOrReplace(transform172);\r\n    var spotlight4 = new Entity('spotlight4');\r\n    engine.addEntity(spotlight4);\r\n    spotlight4.setParent(_scene);\r\n    spotlight4.addComponentOrReplace(gltfShape36);\r\n    var transform173 = new Transform({\r\n        position: new Vector3(30.5, 79, 32.88615417480469),\r\n        rotation: new Quaternion(0.9385530352592468, -0.05663171783089638, 0.18668970465660095, 0.2847069501876831),\r\n        scale: new Vector3(0.9999999403953552, 0.38615596294403076, 1.000003695487976)\r\n    });\r\n    spotlight4.addComponentOrReplace(transform173);\r\n    var nftPictureFrame37 = new Entity('nftPictureFrame37');\r\n    engine.addEntity(nftPictureFrame37);\r\n    nftPictureFrame37.setParent(_scene);\r\n    var transform174 = new Transform({\r\n        position: new Vector3(43.94169235229492, 49, 52.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500014543533325, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame37.addComponentOrReplace(transform174);\r\n    var nftPictureFrame38 = new Entity('nftPictureFrame38');\r\n    engine.addEntity(nftPictureFrame38);\r\n    nftPictureFrame38.setParent(_scene);\r\n    var transform175 = new Transform({\r\n        position: new Vector3(43.94169235229492, 49, 55.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500013589859009, 3.5, 1.0000035762786865)\r\n    });\r\n    nftPictureFrame38.addComponentOrReplace(transform175);\r\n    var nftPictureFrame39 = new Entity('nftPictureFrame39');\r\n    engine.addEntity(nftPictureFrame39);\r\n    nftPictureFrame39.setParent(_scene);\r\n    var transform176 = new Transform({\r\n        position: new Vector3(43.94169235229492, 51.5, 54.10411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(8.75004768371582, 8.75, 1.0000052452087402)\r\n    });\r\n    nftPictureFrame39.addComponentOrReplace(transform176);\r\n    var nftPictureFrame40 = new Entity('nftPictureFrame40');\r\n    engine.addEntity(nftPictureFrame40);\r\n    nftPictureFrame40.setParent(_scene);\r\n    var transform177 = new Transform({\r\n        position: new Vector3(43.89124298095703, 54, 46.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame40.addComponentOrReplace(transform177);\r\n    var nftPictureFrame41 = new Entity('nftPictureFrame41');\r\n    engine.addEntity(nftPictureFrame41);\r\n    nftPictureFrame41.setParent(_scene);\r\n    var transform178 = new Transform({\r\n        position: new Vector3(43.89124298095703, 54, 49.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500016450881958, 3.5, 1.0000042915344238)\r\n    });\r\n    nftPictureFrame41.addComponentOrReplace(transform178);\r\n    var nftPictureFrame42 = new Entity('nftPictureFrame42');\r\n    engine.addEntity(nftPictureFrame42);\r\n    nftPictureFrame42.setParent(_scene);\r\n    var transform179 = new Transform({\r\n        position: new Vector3(43.89124298095703, 51.5, 49.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000154972076416, 3.5, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame42.addComponentOrReplace(transform179);\r\n    var nftPictureFrame43 = new Entity('nftPictureFrame43');\r\n    engine.addEntity(nftPictureFrame43);\r\n    nftPictureFrame43.setParent(_scene);\r\n    var transform180 = new Transform({\r\n        position: new Vector3(43.89124298095703, 51.5, 46.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500014543533325, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame43.addComponentOrReplace(transform180);\r\n    var nftPictureFrame44 = new Entity('nftPictureFrame44');\r\n    engine.addEntity(nftPictureFrame44);\r\n    nftPictureFrame44.setParent(_scene);\r\n    var transform181 = new Transform({\r\n        position: new Vector3(43.89124298095703, 49, 49.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500011682510376, 3.5, 1.0000030994415283)\r\n    });\r\n    nftPictureFrame44.addComponentOrReplace(transform181);\r\n    var nftPictureFrame45 = new Entity('nftPictureFrame45');\r\n    engine.addEntity(nftPictureFrame45);\r\n    nftPictureFrame45.setParent(_scene);\r\n    var transform182 = new Transform({\r\n        position: new Vector3(43.89124298095703, 49, 46.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000126361846924, 3.5, 1.0000033378601074)\r\n    });\r\n    nftPictureFrame45.addComponentOrReplace(transform182);\r\n    var nftPictureFrame46 = new Entity('nftPictureFrame46');\r\n    engine.addEntity(nftPictureFrame46);\r\n    nftPictureFrame46.setParent(_scene);\r\n    var transform183 = new Transform({\r\n        position: new Vector3(43.94169235229492, 53.25267791748047, 42.10411071777344),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(8.750057220458984, 8.75001335144043, 1.0000064373016357)\r\n    });\r\n    nftPictureFrame46.addComponentOrReplace(transform183);\r\n    var nftPictureFrame47 = new Entity('nftPictureFrame47');\r\n    engine.addEntity(nftPictureFrame47);\r\n    nftPictureFrame47.setParent(_scene);\r\n    var transform184 = new Transform({\r\n        position: new Vector3(43.94169235229492, 55.75267791748047, 43.60411071777344),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(3.5000193119049072, 3.500006675720215, 1.0000050067901611)\r\n    });\r\n    nftPictureFrame47.addComponentOrReplace(transform184);\r\n    var nftPictureFrame48 = new Entity('nftPictureFrame48');\r\n    engine.addEntity(nftPictureFrame48);\r\n    nftPictureFrame48.setParent(_scene);\r\n    var transform185 = new Transform({\r\n        position: new Vector3(43.94169235229492, 55.75267791748047, 40.60411071777344),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(3.500018358230591, 3.500006675720215, 1.000004768371582)\r\n    });\r\n    nftPictureFrame48.addComponentOrReplace(transform185);\r\n    var nftPictureFrame49 = new Entity('nftPictureFrame49');\r\n    engine.addEntity(nftPictureFrame49);\r\n    nftPictureFrame49.setParent(_scene);\r\n    var transform186 = new Transform({\r\n        position: new Vector3(43.94169235229492, 53.25267791748047, 33.10411071777344),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(8.750062942504883, 8.750024795532227, 1.000007152557373)\r\n    });\r\n    nftPictureFrame49.addComponentOrReplace(transform186);\r\n    var nftPictureFrame50 = new Entity('nftPictureFrame50');\r\n    engine.addEntity(nftPictureFrame50);\r\n    nftPictureFrame50.setParent(_scene);\r\n    var transform187 = new Transform({\r\n        position: new Vector3(43.94169235229492, 55.75267791748047, 34.60411071777344),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(3.5000221729278564, 3.5000123977661133, 1.0000057220458984)\r\n    });\r\n    nftPictureFrame50.addComponentOrReplace(transform187);\r\n    var nftPictureFrame51 = new Entity('nftPictureFrame51');\r\n    engine.addEntity(nftPictureFrame51);\r\n    nftPictureFrame51.setParent(_scene);\r\n    var transform188 = new Transform({\r\n        position: new Vector3(43.94169235229492, 55.75267791748047, 31.604110717773438),\r\n        rotation: new Quaternion(0.7071067690849304, -5.795191881929895e-8, -0.70710688829422, -2.6341774983507094e-8),\r\n        scale: new Vector3(3.50002121925354, 3.5000123977661133, 1.0000054836273193)\r\n    });\r\n    nftPictureFrame51.addComponentOrReplace(transform188);\r\n    var nftPictureFrame52 = new Entity('nftPictureFrame52');\r\n    engine.addEntity(nftPictureFrame52);\r\n    nftPictureFrame52.setParent(_scene);\r\n    var transform189 = new Transform({\r\n        position: new Vector3(43.89124298095703, 54, 37.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000202655792236, 3.5, 1.0000052452087402)\r\n    });\r\n    nftPictureFrame52.addComponentOrReplace(transform189);\r\n    var nftPictureFrame53 = new Entity('nftPictureFrame53');\r\n    engine.addEntity(nftPictureFrame53);\r\n    nftPictureFrame53.setParent(_scene);\r\n    var transform190 = new Transform({\r\n        position: new Vector3(43.89124298095703, 51.5, 37.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame53.addComponentOrReplace(transform190);\r\n    var nftPictureFrame54 = new Entity('nftPictureFrame54');\r\n    engine.addEntity(nftPictureFrame54);\r\n    nftPictureFrame54.setParent(_scene);\r\n    var transform191 = new Transform({\r\n        position: new Vector3(43.89124298095703, 49, 37.60411071777344),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000154972076416, 3.5, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame54.addComponentOrReplace(transform191);\r\n    var nftPictureFrame55 = new Entity('nftPictureFrame55');\r\n    engine.addEntity(nftPictureFrame55);\r\n    nftPictureFrame55.setParent(_scene);\r\n    var transform192 = new Transform({\r\n        position: new Vector3(43.89124298095703, 54, 25.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000202655792236, 3.5, 1.0000052452087402)\r\n    });\r\n    nftPictureFrame55.addComponentOrReplace(transform192);\r\n    var nftPictureFrame56 = new Entity('nftPictureFrame56');\r\n    engine.addEntity(nftPictureFrame56);\r\n    nftPictureFrame56.setParent(_scene);\r\n    var transform193 = new Transform({\r\n        position: new Vector3(43.89124298095703, 51.5, 25.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000174045562744, 3.5, 1.000004529953003)\r\n    });\r\n    nftPictureFrame56.addComponentOrReplace(transform193);\r\n    var nftPictureFrame57 = new Entity('nftPictureFrame57');\r\n    engine.addEntity(nftPictureFrame57);\r\n    nftPictureFrame57.setParent(_scene);\r\n    var transform194 = new Transform({\r\n        position: new Vector3(43.89124298095703, 49, 25.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000154972076416, 3.5, 1.0000040531158447)\r\n    });\r\n    nftPictureFrame57.addComponentOrReplace(transform194);\r\n    var nftPictureFrame58 = new Entity('nftPictureFrame58');\r\n    engine.addEntity(nftPictureFrame58);\r\n    nftPictureFrame58.setParent(_scene);\r\n    var transform195 = new Transform({\r\n        position: new Vector3(43.89124298095703, 49, 28.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500014543533325, 3.5, 1.0000038146972656)\r\n    });\r\n    nftPictureFrame58.addComponentOrReplace(transform195);\r\n    var nftPictureFrame59 = new Entity('nftPictureFrame59');\r\n    engine.addEntity(nftPictureFrame59);\r\n    nftPictureFrame59.setParent(_scene);\r\n    var transform196 = new Transform({\r\n        position: new Vector3(43.89124298095703, 51.5, 28.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.500018358230591, 3.5, 1.000004768371582)\r\n    });\r\n    nftPictureFrame59.addComponentOrReplace(transform196);\r\n    var nftPictureFrame60 = new Entity('nftPictureFrame60');\r\n    engine.addEntity(nftPictureFrame60);\r\n    nftPictureFrame60.setParent(_scene);\r\n    var transform197 = new Transform({\r\n        position: new Vector3(43.89124298095703, 54, 28.604110717773438),\r\n        rotation: new Quaternion(-2.4085271740892887e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(3.5000193119049072, 3.5, 1.0000050067901611)\r\n    });\r\n    nftPictureFrame60.addComponentOrReplace(transform197);\r\n    var wallCorrugatedMetal = new Entity('wallCorrugatedMetal');\r\n    engine.addEntity(wallCorrugatedMetal);\r\n    wallCorrugatedMetal.setParent(_scene);\r\n    var transform198 = new Transform({\r\n        position: new Vector3(35.5, 56.84843444824219, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal.addComponentOrReplace(transform198);\r\n    var gltfShape37 = new GLTFShape(\"ed5d1431-0172-4730-b81c-856fc44043f7/CorrugatedMetalWall.glb\");\r\n    gltfShape37.withCollisions = true;\r\n    gltfShape37.isPointerBlocker = true;\r\n    gltfShape37.visible = true;\r\n    wallCorrugatedMetal.addComponentOrReplace(gltfShape37);\r\n    var wallCorrugatedMetal2 = new Entity('wallCorrugatedMetal2');\r\n    engine.addEntity(wallCorrugatedMetal2);\r\n    wallCorrugatedMetal2.setParent(_scene);\r\n    wallCorrugatedMetal2.addComponentOrReplace(gltfShape37);\r\n    var transform199 = new Transform({\r\n        position: new Vector3(37.5, 56.84843444824219, 60.08271789550781),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal2.addComponentOrReplace(transform199);\r\n    var wallCorrugatedMetal3 = new Entity('wallCorrugatedMetal3');\r\n    engine.addEntity(wallCorrugatedMetal3);\r\n    wallCorrugatedMetal3.setParent(_scene);\r\n    wallCorrugatedMetal3.addComponentOrReplace(gltfShape37);\r\n    var transform200 = new Transform({\r\n        position: new Vector3(39.5, 56.84843444824219, 60.37971496582031),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal3.addComponentOrReplace(transform200);\r\n    var wallCorrugatedMetal4 = new Entity('wallCorrugatedMetal4');\r\n    engine.addEntity(wallCorrugatedMetal4);\r\n    wallCorrugatedMetal4.setParent(_scene);\r\n    wallCorrugatedMetal4.addComponentOrReplace(gltfShape37);\r\n    var transform201 = new Transform({\r\n        position: new Vector3(41.5, 56.84843444824219, 60.58368682861328),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal4.addComponentOrReplace(transform201);\r\n    var wallCorrugatedMetal5 = new Entity('wallCorrugatedMetal5');\r\n    engine.addEntity(wallCorrugatedMetal5);\r\n    wallCorrugatedMetal5.setParent(_scene);\r\n    wallCorrugatedMetal5.addComponentOrReplace(gltfShape37);\r\n    var transform202 = new Transform({\r\n        position: new Vector3(43.5, 56.84843444824219, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.6522276401519775, 1)\r\n    });\r\n    wallCorrugatedMetal5.addComponentOrReplace(transform202);\r\n    var wallCorrugatedMetal6 = new Entity('wallCorrugatedMetal6');\r\n    engine.addEntity(wallCorrugatedMetal6);\r\n    wallCorrugatedMetal6.setParent(_scene);\r\n    wallCorrugatedMetal6.addComponentOrReplace(gltfShape37);\r\n    var transform203 = new Transform({\r\n        position: new Vector3(13.5, 56.84843444824219, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.86922287940979, 1)\r\n    });\r\n    wallCorrugatedMetal6.addComponentOrReplace(transform203);\r\n    var wallCorrugatedMetal7 = new Entity('wallCorrugatedMetal7');\r\n    engine.addEntity(wallCorrugatedMetal7);\r\n    wallCorrugatedMetal7.setParent(_scene);\r\n    wallCorrugatedMetal7.addComponentOrReplace(gltfShape37);\r\n    var transform204 = new Transform({\r\n        position: new Vector3(15.5, 56.84843444824219, 60.53369140625),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal7.addComponentOrReplace(transform204);\r\n    var wallCorrugatedMetal8 = new Entity('wallCorrugatedMetal8');\r\n    engine.addEntity(wallCorrugatedMetal8);\r\n    wallCorrugatedMetal8.setParent(_scene);\r\n    wallCorrugatedMetal8.addComponentOrReplace(gltfShape37);\r\n    var transform205 = new Transform({\r\n        position: new Vector3(17.5, 56.84843444824219, 60.637943267822266),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal8.addComponentOrReplace(transform205);\r\n    var wallCorrugatedMetal9 = new Entity('wallCorrugatedMetal9');\r\n    engine.addEntity(wallCorrugatedMetal9);\r\n    wallCorrugatedMetal9.setParent(_scene);\r\n    wallCorrugatedMetal9.addComponentOrReplace(gltfShape37);\r\n    var transform206 = new Transform({\r\n        position: new Vector3(19.5, 56.84843444824219, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal9.addComponentOrReplace(transform206);\r\n    var wallCorrugatedMetal10 = new Entity('wallCorrugatedMetal10');\r\n    engine.addEntity(wallCorrugatedMetal10);\r\n    wallCorrugatedMetal10.setParent(_scene);\r\n    wallCorrugatedMetal10.addComponentOrReplace(gltfShape37);\r\n    var transform207 = new Transform({\r\n        position: new Vector3(21.5, 56.84843444824219, 60.637943267822266),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal10.addComponentOrReplace(transform207);\r\n    var wallCorrugatedMetal11 = new Entity('wallCorrugatedMetal11');\r\n    engine.addEntity(wallCorrugatedMetal11);\r\n    wallCorrugatedMetal11.setParent(_scene);\r\n    wallCorrugatedMetal11.addComponentOrReplace(gltfShape37);\r\n    var transform208 = new Transform({\r\n        position: new Vector3(13.5, 56.84843444824219, 22.180461883544922),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 2.86922287940979, 1)\r\n    });\r\n    wallCorrugatedMetal11.addComponentOrReplace(transform208);\r\n    var wallCorrugatedMetal12 = new Entity('wallCorrugatedMetal12');\r\n    engine.addEntity(wallCorrugatedMetal12);\r\n    wallCorrugatedMetal12.setParent(_scene);\r\n    wallCorrugatedMetal12.addComponentOrReplace(gltfShape37);\r\n    var transform209 = new Transform({\r\n        position: new Vector3(15.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal12.addComponentOrReplace(transform209);\r\n    var wallCorrugatedMetal13 = new Entity('wallCorrugatedMetal13');\r\n    engine.addEntity(wallCorrugatedMetal13);\r\n    wallCorrugatedMetal13.setParent(_scene);\r\n    wallCorrugatedMetal13.addComponentOrReplace(gltfShape37);\r\n    var transform210 = new Transform({\r\n        position: new Vector3(17.5, 56.84843444824219, 21.828968048095703),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal13.addComponentOrReplace(transform210);\r\n    var wallCorrugatedMetal14 = new Entity('wallCorrugatedMetal14');\r\n    engine.addEntity(wallCorrugatedMetal14);\r\n    wallCorrugatedMetal14.setParent(_scene);\r\n    wallCorrugatedMetal14.addComponentOrReplace(gltfShape37);\r\n    var transform211 = new Transform({\r\n        position: new Vector3(19.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal14.addComponentOrReplace(transform211);\r\n    var wallCorrugatedMetal15 = new Entity('wallCorrugatedMetal15');\r\n    engine.addEntity(wallCorrugatedMetal15);\r\n    wallCorrugatedMetal15.setParent(_scene);\r\n    wallCorrugatedMetal15.addComponentOrReplace(gltfShape37);\r\n    var transform212 = new Transform({\r\n        position: new Vector3(21.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal15.addComponentOrReplace(transform212);\r\n    var wallCorrugatedMetal16 = new Entity('wallCorrugatedMetal16');\r\n    engine.addEntity(wallCorrugatedMetal16);\r\n    wallCorrugatedMetal16.setParent(_scene);\r\n    wallCorrugatedMetal16.addComponentOrReplace(gltfShape37);\r\n    var transform213 = new Transform({\r\n        position: new Vector3(41.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(-2.140074904533615e-15, 1, -1.1920928244535389e-7, -4.470348358154297e-8),\r\n        scale: new Vector3(1, 2.86922287940979, 1)\r\n    });\r\n    wallCorrugatedMetal16.addComponentOrReplace(transform213);\r\n    var wallCorrugatedMetal17 = new Entity('wallCorrugatedMetal17');\r\n    engine.addEntity(wallCorrugatedMetal17);\r\n    wallCorrugatedMetal17.setParent(_scene);\r\n    wallCorrugatedMetal17.addComponentOrReplace(gltfShape37);\r\n    var transform214 = new Transform({\r\n        position: new Vector3(39.5, 56.84843444824219, 21.76665496826172),\r\n        rotation: new Quaternion(-2.140074904533615e-15, 1, -1.1920928244535389e-7, -4.470348358154297e-8),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal17.addComponentOrReplace(transform214);\r\n    var wallCorrugatedMetal18 = new Entity('wallCorrugatedMetal18');\r\n    engine.addEntity(wallCorrugatedMetal18);\r\n    wallCorrugatedMetal18.setParent(_scene);\r\n    wallCorrugatedMetal18.addComponentOrReplace(gltfShape37);\r\n    var transform215 = new Transform({\r\n        position: new Vector3(37.5, 56.84843444824219, 22.105985641479492),\r\n        rotation: new Quaternion(-2.140074904533615e-15, 1, -1.1920928244535389e-7, -4.470348358154297e-8),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal18.addComponentOrReplace(transform215);\r\n    var wallCorrugatedMetal19 = new Entity('wallCorrugatedMetal19');\r\n    engine.addEntity(wallCorrugatedMetal19);\r\n    wallCorrugatedMetal19.setParent(_scene);\r\n    wallCorrugatedMetal19.addComponentOrReplace(gltfShape37);\r\n    var transform216 = new Transform({\r\n        position: new Vector3(35.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(-2.140074904533615e-15, 1, -1.1920928244535389e-7, -4.470348358154297e-8),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal19.addComponentOrReplace(transform216);\r\n    var wallCorrugatedMetal20 = new Entity('wallCorrugatedMetal20');\r\n    engine.addEntity(wallCorrugatedMetal20);\r\n    wallCorrugatedMetal20.setParent(_scene);\r\n    wallCorrugatedMetal20.addComponentOrReplace(gltfShape37);\r\n    var transform217 = new Transform({\r\n        position: new Vector3(33.5, 56.84843444824219, 22),\r\n        rotation: new Quaternion(-2.140074904533615e-15, 1, -1.1920928244535389e-7, -4.470348358154297e-8),\r\n        scale: new Vector3(1, 3.441601037979126, 1)\r\n    });\r\n    wallCorrugatedMetal20.addComponentOrReplace(transform217);\r\n    var wallCorrugatedMetal21 = new Entity('wallCorrugatedMetal21');\r\n    engine.addEntity(wallCorrugatedMetal21);\r\n    wallCorrugatedMetal21.setParent(_scene);\r\n    wallCorrugatedMetal21.addComponentOrReplace(gltfShape37);\r\n    var transform218 = new Transform({\r\n        position: new Vector3(11.268433570861816, 56.84843444824219, 60.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000014305114746, 2.5994718074798584, 1.0000014305114746)\r\n    });\r\n    wallCorrugatedMetal21.addComponentOrReplace(transform218);\r\n    var wallCorrugatedMetal22 = new Entity('wallCorrugatedMetal22');\r\n    engine.addEntity(wallCorrugatedMetal22);\r\n    wallCorrugatedMetal22.setParent(_scene);\r\n    wallCorrugatedMetal22.addComponentOrReplace(gltfShape37);\r\n    var transform219 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 58.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000011920928955, 2.5994718074798584, 1.0000011920928955)\r\n    });\r\n    wallCorrugatedMetal22.addComponentOrReplace(transform219);\r\n    var wallCorrugatedMetal23 = new Entity('wallCorrugatedMetal23');\r\n    engine.addEntity(wallCorrugatedMetal23);\r\n    wallCorrugatedMetal23.setParent(_scene);\r\n    wallCorrugatedMetal23.addComponentOrReplace(gltfShape37);\r\n    var transform220 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 56.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000014305114746, 2.5994718074798584, 1.0000014305114746)\r\n    });\r\n    wallCorrugatedMetal23.addComponentOrReplace(transform220);\r\n    var wallCorrugatedMetal24 = new Entity('wallCorrugatedMetal24');\r\n    engine.addEntity(wallCorrugatedMetal24);\r\n    wallCorrugatedMetal24.setParent(_scene);\r\n    wallCorrugatedMetal24.addComponentOrReplace(gltfShape37);\r\n    var transform221 = new Transform({\r\n        position: new Vector3(11.232842445373535, 56.84843444824219, 54.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000019073486328, 2.5994718074798584, 1.0000019073486328)\r\n    });\r\n    wallCorrugatedMetal24.addComponentOrReplace(transform221);\r\n    var wallCorrugatedMetal25 = new Entity('wallCorrugatedMetal25');\r\n    engine.addEntity(wallCorrugatedMetal25);\r\n    wallCorrugatedMetal25.setParent(_scene);\r\n    wallCorrugatedMetal25.addComponentOrReplace(gltfShape37);\r\n    var transform222 = new Transform({\r\n        position: new Vector3(11.083913803100586, 56.84843444824219, 52.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000002384185791, 2.4903154373168945, 1.000002384185791)\r\n    });\r\n    wallCorrugatedMetal25.addComponentOrReplace(transform222);\r\n    var wallCorrugatedMetal26 = new Entity('wallCorrugatedMetal26');\r\n    engine.addEntity(wallCorrugatedMetal26);\r\n    wallCorrugatedMetal26.setParent(_scene);\r\n    wallCorrugatedMetal26.addComponentOrReplace(gltfShape37);\r\n    var transform223 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 50.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000002145767212, 2.5994718074798584, 1.000002145767212)\r\n    });\r\n    wallCorrugatedMetal26.addComponentOrReplace(transform223);\r\n    var wallCorrugatedMetal27 = new Entity('wallCorrugatedMetal27');\r\n    engine.addEntity(wallCorrugatedMetal27);\r\n    wallCorrugatedMetal27.setParent(_scene);\r\n    wallCorrugatedMetal27.addComponentOrReplace(gltfShape37);\r\n    var transform224 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 48.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000002384185791, 2.5994718074798584, 1.000002384185791)\r\n    });\r\n    wallCorrugatedMetal27.addComponentOrReplace(transform224);\r\n    var wallCorrugatedMetal28 = new Entity('wallCorrugatedMetal28');\r\n    engine.addEntity(wallCorrugatedMetal28);\r\n    wallCorrugatedMetal28.setParent(_scene);\r\n    wallCorrugatedMetal28.addComponentOrReplace(gltfShape37);\r\n    var transform225 = new Transform({\r\n        position: new Vector3(11.003806114196777, 56.84843444824219, 46.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000030994415283, 2.346181631088257, 1.0000030994415283)\r\n    });\r\n    wallCorrugatedMetal28.addComponentOrReplace(transform225);\r\n    var wallCorrugatedMetal29 = new Entity('wallCorrugatedMetal29');\r\n    engine.addEntity(wallCorrugatedMetal29);\r\n    wallCorrugatedMetal29.setParent(_scene);\r\n    wallCorrugatedMetal29.addComponentOrReplace(gltfShape37);\r\n    var transform226 = new Transform({\r\n        position: new Vector3(11.003806114196777, 56.84843444824219, 44.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000033378601074, 2.346181631088257, 1.0000033378601074)\r\n    });\r\n    wallCorrugatedMetal29.addComponentOrReplace(transform226);\r\n    var wallCorrugatedMetal30 = new Entity('wallCorrugatedMetal30');\r\n    engine.addEntity(wallCorrugatedMetal30);\r\n    wallCorrugatedMetal30.setParent(_scene);\r\n    wallCorrugatedMetal30.addComponentOrReplace(gltfShape37);\r\n    var transform227 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 42.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000030994415283, 2.5994718074798584, 1.0000030994415283)\r\n    });\r\n    wallCorrugatedMetal30.addComponentOrReplace(transform227);\r\n    var wallCorrugatedMetal31 = new Entity('wallCorrugatedMetal31');\r\n    engine.addEntity(wallCorrugatedMetal31);\r\n    wallCorrugatedMetal31.setParent(_scene);\r\n    wallCorrugatedMetal31.addComponentOrReplace(gltfShape37);\r\n    var transform228 = new Transform({\r\n        position: new Vector3(11.326261520385742, 56.84843444824219, 40.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000035762786865, 2.5994718074798584, 1.0000035762786865)\r\n    });\r\n    wallCorrugatedMetal31.addComponentOrReplace(transform228);\r\n    var wallCorrugatedMetal32 = new Entity('wallCorrugatedMetal32');\r\n    engine.addEntity(wallCorrugatedMetal32);\r\n    wallCorrugatedMetal32.setParent(_scene);\r\n    wallCorrugatedMetal32.addComponentOrReplace(gltfShape37);\r\n    var transform229 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 38.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000035762786865, 2.5994718074798584, 1.0000035762786865)\r\n    });\r\n    wallCorrugatedMetal32.addComponentOrReplace(transform229);\r\n    var wallCorrugatedMetal33 = new Entity('wallCorrugatedMetal33');\r\n    engine.addEntity(wallCorrugatedMetal33);\r\n    wallCorrugatedMetal33.setParent(_scene);\r\n    wallCorrugatedMetal33.addComponentOrReplace(gltfShape37);\r\n    var transform230 = new Transform({\r\n        position: new Vector3(11.326261520385742, 56.84843444824219, 36.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000042915344238, 2.5994718074798584, 1.0000042915344238)\r\n    });\r\n    wallCorrugatedMetal33.addComponentOrReplace(transform230);\r\n    var wallCorrugatedMetal34 = new Entity('wallCorrugatedMetal34');\r\n    engine.addEntity(wallCorrugatedMetal34);\r\n    wallCorrugatedMetal34.setParent(_scene);\r\n    wallCorrugatedMetal34.addComponentOrReplace(gltfShape37);\r\n    var transform231 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 34.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000042915344238, 2.5994718074798584, 1.0000042915344238)\r\n    });\r\n    wallCorrugatedMetal34.addComponentOrReplace(transform231);\r\n    var wallCorrugatedMetal35 = new Entity('wallCorrugatedMetal35');\r\n    engine.addEntity(wallCorrugatedMetal35);\r\n    wallCorrugatedMetal35.setParent(_scene);\r\n    wallCorrugatedMetal35.addComponentOrReplace(gltfShape37);\r\n    var transform232 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 32.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000004529953003, 2.5994718074798584, 1.000004529953003)\r\n    });\r\n    wallCorrugatedMetal35.addComponentOrReplace(transform232);\r\n    var wallCorrugatedMetal36 = new Entity('wallCorrugatedMetal36');\r\n    engine.addEntity(wallCorrugatedMetal36);\r\n    wallCorrugatedMetal36.setParent(_scene);\r\n    wallCorrugatedMetal36.addComponentOrReplace(gltfShape37);\r\n    var transform233 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 30.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000004768371582, 2.5994718074798584, 1.000004768371582)\r\n    });\r\n    wallCorrugatedMetal36.addComponentOrReplace(transform233);\r\n    var wallCorrugatedMetal37 = new Entity('wallCorrugatedMetal37');\r\n    engine.addEntity(wallCorrugatedMetal37);\r\n    wallCorrugatedMetal37.setParent(_scene);\r\n    wallCorrugatedMetal37.addComponentOrReplace(gltfShape37);\r\n    var transform234 = new Transform({\r\n        position: new Vector3(11.335603713989258, 56.84843444824219, 28.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000052452087402, 2.5994718074798584, 1.0000052452087402)\r\n    });\r\n    wallCorrugatedMetal37.addComponentOrReplace(transform234);\r\n    var wallCorrugatedMetal38 = new Entity('wallCorrugatedMetal38');\r\n    engine.addEntity(wallCorrugatedMetal38);\r\n    wallCorrugatedMetal38.setParent(_scene);\r\n    wallCorrugatedMetal38.addComponentOrReplace(gltfShape37);\r\n    var transform235 = new Transform({\r\n        position: new Vector3(11.335603713989258, 56.84843444824219, 26.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000054836273193, 2.5994718074798584, 1.0000054836273193)\r\n    });\r\n    wallCorrugatedMetal38.addComponentOrReplace(transform235);\r\n    var wallCorrugatedMetal39 = new Entity('wallCorrugatedMetal39');\r\n    engine.addEntity(wallCorrugatedMetal39);\r\n    wallCorrugatedMetal39.setParent(_scene);\r\n    wallCorrugatedMetal39.addComponentOrReplace(gltfShape37);\r\n    var transform236 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 24.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000054836273193, 2.5994718074798584, 1.0000054836273193)\r\n    });\r\n    wallCorrugatedMetal39.addComponentOrReplace(transform236);\r\n    var wallCorrugatedMetal40 = new Entity('wallCorrugatedMetal40');\r\n    engine.addEntity(wallCorrugatedMetal40);\r\n    wallCorrugatedMetal40.setParent(_scene);\r\n    wallCorrugatedMetal40.addComponentOrReplace(gltfShape37);\r\n    var transform237 = new Transform({\r\n        position: new Vector3(11.1954345703125, 56.84843444824219, 22.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(0.5000030994415283, 2.5994718074798584, 1.0000061988830566)\r\n    });\r\n    wallCorrugatedMetal40.addComponentOrReplace(transform237);\r\n    var wallCorrugatedMetal41 = new Entity('wallCorrugatedMetal41');\r\n    engine.addEntity(wallCorrugatedMetal41);\r\n    wallCorrugatedMetal41.setParent(_scene);\r\n    wallCorrugatedMetal41.addComponentOrReplace(gltfShape37);\r\n    var transform238 = new Transform({\r\n        position: new Vector3(43.50428009033203, 56.84843444824219, 60.54208755493164),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000026226043701, 2.5994718074798584, 1.0000026226043701)\r\n    });\r\n    wallCorrugatedMetal41.addComponentOrReplace(transform238);\r\n    var wallCorrugatedMetal42 = new Entity('wallCorrugatedMetal42');\r\n    engine.addEntity(wallCorrugatedMetal42);\r\n    wallCorrugatedMetal42.setParent(_scene);\r\n    wallCorrugatedMetal42.addComponentOrReplace(gltfShape37);\r\n    var transform239 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 56.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000028610229492, 2.5994718074798584, 1.0000028610229492)\r\n    });\r\n    wallCorrugatedMetal42.addComponentOrReplace(transform239);\r\n    var wallCorrugatedMetal43 = new Entity('wallCorrugatedMetal43');\r\n    engine.addEntity(wallCorrugatedMetal43);\r\n    wallCorrugatedMetal43.setParent(_scene);\r\n    wallCorrugatedMetal43.addComponentOrReplace(gltfShape37);\r\n    var transform240 = new Transform({\r\n        position: new Vector3(43.72320556640625, 56.84843444824219, 54.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000035762786865, 2.333955764770508, 1.0000035762786865)\r\n    });\r\n    wallCorrugatedMetal43.addComponentOrReplace(transform240);\r\n    var wallCorrugatedMetal44 = new Entity('wallCorrugatedMetal44');\r\n    engine.addEntity(wallCorrugatedMetal44);\r\n    wallCorrugatedMetal44.setParent(_scene);\r\n    wallCorrugatedMetal44.addComponentOrReplace(gltfShape37);\r\n    var transform241 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 58.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000026226043701, 2.5994718074798584, 1.0000026226043701)\r\n    });\r\n    wallCorrugatedMetal44.addComponentOrReplace(transform241);\r\n    var wallCorrugatedMetal45 = new Entity('wallCorrugatedMetal45');\r\n    engine.addEntity(wallCorrugatedMetal45);\r\n    wallCorrugatedMetal45.setParent(_scene);\r\n    wallCorrugatedMetal45.addComponentOrReplace(gltfShape37);\r\n    var transform242 = new Transform({\r\n        position: new Vector3(43.69071578979492, 56.84843444824219, 48.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000042915344238, 2.333955764770508, 1.0000042915344238)\r\n    });\r\n    wallCorrugatedMetal45.addComponentOrReplace(transform242);\r\n    var wallCorrugatedMetal46 = new Entity('wallCorrugatedMetal46');\r\n    engine.addEntity(wallCorrugatedMetal46);\r\n    wallCorrugatedMetal46.setParent(_scene);\r\n    wallCorrugatedMetal46.addComponentOrReplace(gltfShape37);\r\n    var transform243 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 50.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000035762786865, 2.5994718074798584, 1.0000035762786865)\r\n    });\r\n    wallCorrugatedMetal46.addComponentOrReplace(transform243);\r\n    var wallCorrugatedMetal47 = new Entity('wallCorrugatedMetal47');\r\n    engine.addEntity(wallCorrugatedMetal47);\r\n    wallCorrugatedMetal47.setParent(_scene);\r\n    wallCorrugatedMetal47.addComponentOrReplace(gltfShape37);\r\n    var transform244 = new Transform({\r\n        position: new Vector3(43.55057907104492, 56.84843444824219, 52.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000035762786865, 2.5994718074798584, 1.0000035762786865)\r\n    });\r\n    wallCorrugatedMetal47.addComponentOrReplace(transform244);\r\n    var wallCorrugatedMetal48 = new Entity('wallCorrugatedMetal48');\r\n    engine.addEntity(wallCorrugatedMetal48);\r\n    wallCorrugatedMetal48.setParent(_scene);\r\n    wallCorrugatedMetal48.addComponentOrReplace(gltfShape37);\r\n    var transform245 = new Transform({\r\n        position: new Vector3(43.52910232543945, 56.84843444824219, 44.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000004529953003, 2.5994718074798584, 1.000004529953003)\r\n    });\r\n    wallCorrugatedMetal48.addComponentOrReplace(transform245);\r\n    var wallCorrugatedMetal49 = new Entity('wallCorrugatedMetal49');\r\n    engine.addEntity(wallCorrugatedMetal49);\r\n    wallCorrugatedMetal49.setParent(_scene);\r\n    wallCorrugatedMetal49.addComponentOrReplace(gltfShape37);\r\n    var transform246 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 46.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000040531158447, 2.5994718074798584, 1.0000040531158447)\r\n    });\r\n    wallCorrugatedMetal49.addComponentOrReplace(transform246);\r\n    var wallCorrugatedMetal50 = new Entity('wallCorrugatedMetal50');\r\n    engine.addEntity(wallCorrugatedMetal50);\r\n    wallCorrugatedMetal50.setParent(_scene);\r\n    wallCorrugatedMetal50.addComponentOrReplace(gltfShape37);\r\n    var transform247 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 42.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000004529953003, 2.5994718074798584, 1.000004529953003)\r\n    });\r\n    wallCorrugatedMetal50.addComponentOrReplace(transform247);\r\n    var wallCorrugatedMetal51 = new Entity('wallCorrugatedMetal51');\r\n    engine.addEntity(wallCorrugatedMetal51);\r\n    wallCorrugatedMetal51.setParent(_scene);\r\n    wallCorrugatedMetal51.addComponentOrReplace(gltfShape37);\r\n    var transform248 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 40.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000004768371582, 2.5994718074798584, 1.000004768371582)\r\n    });\r\n    wallCorrugatedMetal51.addComponentOrReplace(transform248);\r\n    var wallCorrugatedMetal52 = new Entity('wallCorrugatedMetal52');\r\n    engine.addEntity(wallCorrugatedMetal52);\r\n    wallCorrugatedMetal52.setParent(_scene);\r\n    wallCorrugatedMetal52.addComponentOrReplace(gltfShape37);\r\n    var transform249 = new Transform({\r\n        position: new Vector3(43.411216735839844, 56.84843444824219, 38.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000052452087402, 2.5994718074798584, 1.0000052452087402)\r\n    });\r\n    wallCorrugatedMetal52.addComponentOrReplace(transform249);\r\n    var wallCorrugatedMetal53 = new Entity('wallCorrugatedMetal53');\r\n    engine.addEntity(wallCorrugatedMetal53);\r\n    wallCorrugatedMetal53.setParent(_scene);\r\n    wallCorrugatedMetal53.addComponentOrReplace(gltfShape37);\r\n    var transform250 = new Transform({\r\n        position: new Vector3(43.411216735839844, 56.84843444824219, 36.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000057220458984, 2.5994718074798584, 1.0000057220458984)\r\n    });\r\n    wallCorrugatedMetal53.addComponentOrReplace(transform250);\r\n    var wallCorrugatedMetal54 = new Entity('wallCorrugatedMetal54');\r\n    engine.addEntity(wallCorrugatedMetal54);\r\n    wallCorrugatedMetal54.setParent(_scene);\r\n    wallCorrugatedMetal54.addComponentOrReplace(gltfShape37);\r\n    var transform251 = new Transform({\r\n        position: new Vector3(43.63229751586914, 56.84843444824219, 34.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000061988830566, 2.5175273418426514, 1.0000061988830566)\r\n    });\r\n    wallCorrugatedMetal54.addComponentOrReplace(transform251);\r\n    var wallCorrugatedMetal55 = new Entity('wallCorrugatedMetal55');\r\n    engine.addEntity(wallCorrugatedMetal55);\r\n    wallCorrugatedMetal55.setParent(_scene);\r\n    wallCorrugatedMetal55.addComponentOrReplace(gltfShape37);\r\n    var transform252 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 32.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000059604644775, 2.5994718074798584, 1.0000059604644775)\r\n    });\r\n    wallCorrugatedMetal55.addComponentOrReplace(transform252);\r\n    var wallCorrugatedMetal56 = new Entity('wallCorrugatedMetal56');\r\n    engine.addEntity(wallCorrugatedMetal56);\r\n    wallCorrugatedMetal56.setParent(_scene);\r\n    wallCorrugatedMetal56.addComponentOrReplace(gltfShape37);\r\n    var transform253 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 30.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000061988830566, 2.5994718074798584, 1.0000061988830566)\r\n    });\r\n    wallCorrugatedMetal56.addComponentOrReplace(transform253);\r\n    var wallCorrugatedMetal57 = new Entity('wallCorrugatedMetal57');\r\n    engine.addEntity(wallCorrugatedMetal57);\r\n    wallCorrugatedMetal57.setParent(_scene);\r\n    wallCorrugatedMetal57.addComponentOrReplace(gltfShape37);\r\n    var transform254 = new Transform({\r\n        position: new Vector3(43.70798110961914, 56.84843444824219, 28.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000006914138794, 2.341512441635132, 1.000006914138794)\r\n    });\r\n    wallCorrugatedMetal57.addComponentOrReplace(transform254);\r\n    var wallCorrugatedMetal58 = new Entity('wallCorrugatedMetal58');\r\n    engine.addEntity(wallCorrugatedMetal58);\r\n    wallCorrugatedMetal58.setParent(_scene);\r\n    wallCorrugatedMetal58.addComponentOrReplace(gltfShape37);\r\n    var transform255 = new Transform({\r\n        position: new Vector3(43.65621566772461, 56.84843444824219, 26.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.0000076293945312, 2.3376147747039795, 1.0000076293945312)\r\n    });\r\n    wallCorrugatedMetal58.addComponentOrReplace(transform255);\r\n    var wallCorrugatedMetal59 = new Entity('wallCorrugatedMetal59');\r\n    engine.addEntity(wallCorrugatedMetal59);\r\n    wallCorrugatedMetal59.setParent(_scene);\r\n    wallCorrugatedMetal59.addComponentOrReplace(gltfShape37);\r\n    var transform256 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 24.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(1.000006914138794, 2.5994718074798584, 1.000006914138794)\r\n    });\r\n    wallCorrugatedMetal59.addComponentOrReplace(transform256);\r\n    var wallCorrugatedMetal60 = new Entity('wallCorrugatedMetal60');\r\n    engine.addEntity(wallCorrugatedMetal60);\r\n    wallCorrugatedMetal60.setParent(_scene);\r\n    wallCorrugatedMetal60.addComponentOrReplace(gltfShape37);\r\n    var transform257 = new Transform({\r\n        position: new Vector3(43.598915100097656, 56.84843444824219, 22.5),\r\n        rotation: new Quaternion(-1.5394153601527394e-15, -0.7071068286895752, 8.429369557916289e-8, 0.7071068286895752),\r\n        scale: new Vector3(0.5000038146972656, 2.5994718074798584, 1.0000076293945312)\r\n    });\r\n    wallCorrugatedMetal60.addComponentOrReplace(transform257);\r\n    var garlandCurveYellow = new Entity('garlandCurveYellow');\r\n    engine.addEntity(garlandCurveYellow);\r\n    garlandCurveYellow.setParent(_scene);\r\n    var transform258 = new Transform({\r\n        position: new Vector3(36.166648864746094, 77, 39.591190338134766),\r\n        rotation: new Quaternion(-0.02348312921822071, 0.5309857130050659, 0.04093848541378975, -0.8460655212402344),\r\n        scale: new Vector3(1.0541843175888062, 1.0004665851593018, 1.012755274772644)\r\n    });\r\n    garlandCurveYellow.addComponentOrReplace(transform258);\r\n    var gltfShape38 = new GLTFShape(\"680af140-41c7-40d9-8ce8-7648196c3caf/Garland_Curve_Yellow.glb\");\r\n    gltfShape38.withCollisions = true;\r\n    gltfShape38.isPointerBlocker = true;\r\n    gltfShape38.visible = true;\r\n    garlandCurveYellow.addComponentOrReplace(gltfShape38);\r\n    var garlandCurveBluePurple = new Entity('garlandCurveBluePurple');\r\n    engine.addEntity(garlandCurveBluePurple);\r\n    garlandCurveBluePurple.setParent(_scene);\r\n    var transform259 = new Transform({\r\n        position: new Vector3(35.70832443237305, 77.23571014404297, 35.60341262817383),\r\n        rotation: new Quaternion(-0.059109482914209366, -0.3417418599128723, -0.05910943076014519, 0.9360687732696533),\r\n        scale: new Vector3(0.5565253496170044, 1.0044724941253662, 0.9999992847442627)\r\n    });\r\n    garlandCurveBluePurple.addComponentOrReplace(transform259);\r\n    var gltfShape39 = new GLTFShape(\"73186899-cf6e-4a4c-a30b-a4c21fc3e86c/Garland_Curve_Blue_Purple.glb\");\r\n    gltfShape39.withCollisions = true;\r\n    gltfShape39.isPointerBlocker = true;\r\n    gltfShape39.visible = true;\r\n    garlandCurveBluePurple.addComponentOrReplace(gltfShape39);\r\n    var garlandCurveYellow2 = new Entity('garlandCurveYellow2');\r\n    engine.addEntity(garlandCurveYellow2);\r\n    garlandCurveYellow2.setParent(_scene);\r\n    garlandCurveYellow2.addComponentOrReplace(gltfShape38);\r\n    var transform260 = new Transform({\r\n        position: new Vector3(18.437925338745117, 75.9853515625, 37.89862060546875),\r\n        rotation: new Quaternion(0.12909461557865143, -0.8705525398254395, -0.06542643159627914, 0.4703109562397003),\r\n        scale: new Vector3(0.8879626989364624, 0.9868287444114685, 0.9526340961456299)\r\n    });\r\n    garlandCurveYellow2.addComponentOrReplace(transform260);\r\n    var floorBlack = new Entity('floorBlack');\r\n    engine.addEntity(floorBlack);\r\n    floorBlack.setParent(_scene);\r\n    var transform261 = new Transform({\r\n        position: new Vector3(43.70232391357422, 66, 59.763206481933594),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.6503443717956543, 1, 9.454117774963379)\r\n    });\r\n    floorBlack.addComponentOrReplace(transform261);\r\n    var gltfShape40 = new GLTFShape(\"94bbf88f-cd93-4531-8bda-d93e8dfffb8f/BlackFloor.glb\");\r\n    gltfShape40.withCollisions = true;\r\n    gltfShape40.isPointerBlocker = true;\r\n    gltfShape40.visible = true;\r\n    floorBlack.addComponentOrReplace(gltfShape40);\r\n    var floorBlack2 = new Entity('floorBlack2');\r\n    engine.addEntity(floorBlack2);\r\n    floorBlack2.setParent(_scene);\r\n    floorBlack2.addComponentOrReplace(gltfShape40);\r\n    var transform262 = new Transform({\r\n        position: new Vector3(22, 66, 60.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.6503443717956543, 1, 2.6750564575195312)\r\n    });\r\n    floorBlack2.addComponentOrReplace(transform262);\r\n    var wallcornerBlack = new Entity('wallcornerBlack');\r\n    engine.addEntity(wallcornerBlack);\r\n    wallcornerBlack.setParent(_scene);\r\n    var transform263 = new Transform({\r\n        position: new Vector3(18.885377883911133, 65.5, 50.116092681884766),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(1.9775807857513428, 1.4910802841186523, 2.218144416809082)\r\n    });\r\n    wallcornerBlack.addComponentOrReplace(transform263);\r\n    var gltfShape41 = new GLTFShape(\"b147f30c-9dee-4138-8ac3-3f9d1fadee5f/BlackCorner.glb\");\r\n    gltfShape41.withCollisions = true;\r\n    gltfShape41.isPointerBlocker = true;\r\n    gltfShape41.visible = true;\r\n    wallcornerBlack.addComponentOrReplace(gltfShape41);\r\n    var wallcornerBlack2 = new Entity('wallcornerBlack2');\r\n    engine.addEntity(wallcornerBlack2);\r\n    wallcornerBlack2.setParent(_scene);\r\n    wallcornerBlack2.addComponentOrReplace(gltfShape41);\r\n    var transform264 = new Transform({\r\n        position: new Vector3(14.385377883911133, 65.5, 45.116092681884766),\r\n        rotation: new Quaternion(-5.837277581059123e-15, 1, -1.1920928244535389e-7, 0),\r\n        scale: new Vector3(1.9775807857513428, 1.4910802841186523, 2.218144416809082)\r\n    });\r\n    wallcornerBlack2.addComponentOrReplace(transform264);\r\n    var floorBlack3 = new Entity('floorBlack3');\r\n    engine.addEntity(floorBlack3);\r\n    floorBlack3.setParent(_scene);\r\n    floorBlack3.addComponentOrReplace(gltfShape40);\r\n    var transform265 = new Transform({\r\n        position: new Vector3(22, 66, 45.274383544921875),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(2.6503443717956543, 1, 5.95129919052124)\r\n    });\r\n    floorBlack3.addComponentOrReplace(transform265);\r\n    var floorBlack4 = new Entity('floorBlack4');\r\n    engine.addEntity(floorBlack4);\r\n    floorBlack4.setParent(_scene);\r\n    floorBlack4.addComponentOrReplace(gltfShape40);\r\n    var transform266 = new Transform({\r\n        position: new Vector3(22, 66, 50.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(0.8223557472229004, 1, 2.675056219100952)\r\n    });\r\n    floorBlack4.addComponentOrReplace(transform266);\r\n    var floorBlack5 = new Entity('floorBlack5');\r\n    engine.addEntity(floorBlack5);\r\n    floorBlack5.setParent(_scene);\r\n    floorBlack5.addComponentOrReplace(gltfShape40);\r\n    var transform267 = new Transform({\r\n        position: new Vector3(14.481378555297852, 66, 53.5),\r\n        rotation: new Quaternion(0, 0, 0, 1),\r\n        scale: new Vector3(0.7695773839950562, 1, 2.675056219100952)\r\n    });\r\n    floorBlack5.addComponentOrReplace(transform267);\r\n    var channelId = Math.random().toString(16).slice(2);\r\n    var channelBus = new MessageBus();\r\n    var inventory = (0, inventory_1.createInventory)(UICanvas, UIContainerStack, UIImage);\r\n    var options = { inventory: inventory };\r\n    var script1 = new item_1.default();\r\n    var script2 = new item_2.default();\r\n    var script3 = new item_3.default();\r\n    var script4 = new item_4.default();\r\n    var script5 = new item_5.default();\r\n    var script6 = new item_6.default();\r\n    var script7 = new item_7.default();\r\n    var script8 = new item_8.default();\r\n    var script9 = new item_9.default();\r\n    var script10 = new item_10.default();\r\n    var script11 = new item_11.default();\r\n    var script12 = new item_12.default();\r\n    var script13 = new item_13.default();\r\n    var script14 = new item_14.default();\r\n    var script15 = new item_15.default();\r\n    var script16 = new item_16.default();\r\n    var script17 = new item_17.default();\r\n    var script18 = new item_18.default();\r\n    script1.init(options);\r\n    script2.init(options);\r\n    script3.init(options);\r\n    script4.init(options);\r\n    script5.init(options);\r\n    script6.init(options);\r\n    script7.init(options);\r\n    script8.init(options);\r\n    script9.init(options);\r\n    script10.init(options);\r\n    script11.init(options);\r\n    script12.init(options);\r\n    script13.init(options);\r\n    script14.init(options);\r\n    script15.init(options);\r\n    script16.init(options);\r\n    script17.init(options);\r\n    script18.init(options);\r\n    script1.spawn(toolbox, {}, (0, channel_1.createChannel)(channelId, toolbox, channelBus));\r\n    script2.spawn(clickArea, { \"enabled\": true, \"onClickText\": \"Interact\", \"button\": \"POINTER\", \"onClick\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc\", \"x\": 0, \"y\": 23, \"z\": 0, \"curve\": \"linear\", \"speed\": 3, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 4, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc\", \"x\": 0, \"y\": -23, \"z\": 0, \"curve\": \"linear\", \"speed\": 3, \"relative\": true, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 1, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"floorGlass\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 15, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 10, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea2\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] } }] } }] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"floorGlass\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea2\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] }, (0, channel_1.createChannel)(channelId, clickArea, channelBus));\r\n    script3.spawn(triggerArea, { \"enabled\": true, \"onEnter\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"wallPlainGlass\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"wallPlainGlass2\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }], \"onLeave\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"wallPlainGlass\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"wallPlainGlass2\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] }, (0, channel_1.createChannel)(channelId, triggerArea, channelBus));\r\n    script2.spawn(clickArea2, { \"enabled\": true, \"onClickText\": \"Interact\", \"button\": \"POINTER\", \"onClick\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"floorGlass\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 10, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"floorGlass\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] } }] } }, { \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc\", \"x\": 0, \"y\": 23, \"z\": 0, \"curve\": \"easeinoutsine\", \"speed\": 3, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 4, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc\", \"x\": 0, \"y\": -23, \"z\": 0, \"curve\": \"linear\", \"speed\": 3, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea2\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] } }] } }] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea2\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] }, (0, channel_1.createChannel)(channelId, clickArea2, channelBus));\r\n    script2.spawn(clickArea3, { \"enabled\": true, \"onClickText\": \"Interact\", \"button\": \"POINTER\", \"onClick\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc2\", \"x\": 0, \"y\": 8.75, \"z\": 0, \"curve\": \"linear\", \"speed\": 5, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 2, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc2\", \"x\": 0, \"y\": 9.75, \"z\": 0, \"curve\": \"linear\", \"speed\": 5, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 2, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc2\", \"x\": 0, \"y\": 9.25, \"z\": 0, \"curve\": \"linear\", \"speed\": 5, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 2, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc2\", \"x\": 0, \"y\": 14.75, \"z\": 0, \"curve\": \"linear\", \"speed\": 5, \"relative\": true, \"onComplete\": [] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"floorGlass2\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 10, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"delay\", \"values\": { \"timeout\": 5, \"onTimeout\": [{ \"entityName\": \"toolbox\", \"actionId\": \"move\", \"values\": { \"target\": \"floorLightDisc2\", \"x\": 0, \"y\": -42.5, \"z\": 0, \"curve\": \"linear\", \"speed\": 4, \"relative\": true, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea3\", \"x\": 1, \"y\": 1, \"z\": 1, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [{ \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 10, \"onComplete\": [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, { \"entityName\": \"toolbox\", \"actionId\": \"scale\", \"values\": { \"target\": \"clickArea3\", \"x\": 0, \"y\": 0, \"z\": 0, \"curve\": \"linear\", \"speed\": 20, \"onComplete\": [] } }] }, (0, channel_1.createChannel)(channelId, clickArea3, channelBus));\r\n    script4.spawn(videoStream, { \"startOn\": false, \"onClickText\": \"Play video\", \"volume\": 1, \"onClick\": [{ \"entityName\": \"videoStream\", \"actionId\": \"toggle\", \"values\": {} }], \"customStation\": \"https://decentralive.tv/video/11687ca777b5acce9c522d591137c087.mp4\", \"image\": \"https://i.postimg.cc/6pMZYFNk/OUBITA-LOGO.png\", \"station\": \"https://theuniverse.club/live/genesisplaza/index.m3u8\" }, (0, channel_1.createChannel)(channelId, videoStream, channelBus));\r\n    script5.spawn(blockFloorLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, blockFloorLight, channelBus));\r\n    script6.spawn(spotlightLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, spotlightLight, channelBus));\r\n    script6.spawn(spotlightLight2, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, spotlightLight2, channelBus));\r\n    script6.spawn(spotlightLight3, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, spotlightLight3, channelBus));\r\n    script7.spawn(mixtable, { \"onActivate\": [{ \"entityName\": \"radioCyberpunk\", \"actionId\": \"activate\", \"values\": {} }], \"onDeactivate\": [{ \"entityName\": \"radioCyberpunk\", \"actionId\": \"deactivate\", \"values\": {} }] }, (0, channel_1.createChannel)(channelId, mixtable, channelBus));\r\n    script8.spawn(speakers, { \"clickable\": false, \"onActivate\": [] }, (0, channel_1.createChannel)(channelId, speakers, channelBus));\r\n    script8.spawn(speakers2, { \"clickable\": false, \"onActivate\": [] }, (0, channel_1.createChannel)(channelId, speakers2, channelBus));\r\n    script9.spawn(radioCyberpunk, { \"startOn\": false, \"volume\": 1, \"onClickText\": \" \", \"onClick\": [], \"station\": \"https://icecast.ravepartyradio.org/ravepartyradio-192.mp3\", \"onActivate\": [{ \"entityName\": \"radioCyberpunk2\", \"actionId\": \"activate\", \"values\": {} }], \"onDeactivate\": [{ \"entityName\": \"radioCyberpunk2\", \"actionId\": \"deactivate\", \"values\": {} }], \"customStation\": \"https://decentralive.tv/video/f0d556385ef785b43df50fa4ebc3e3d3.mp3\" }, (0, channel_1.createChannel)(channelId, radioCyberpunk, channelBus));\r\n    script8.spawn(speakers3, { \"clickable\": false, \"onActivate\": [] }, (0, channel_1.createChannel)(channelId, speakers3, channelBus));\r\n    script10.spawn(ceilingStriplight, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, ceilingStriplight, channelBus));\r\n    script10.spawn(ceilingStriplight2, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, ceilingStriplight2, channelBus));\r\n    script11.spawn(spotlightStripLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, spotlightStripLight, channelBus));\r\n    script12.spawn(spark, { \"active\": true }, (0, channel_1.createChannel)(channelId, spark, channelBus));\r\n    script12.spawn(spark2, { \"active\": true }, (0, channel_1.createChannel)(channelId, spark2, channelBus));\r\n    script13.spawn(funkyFloorLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight, channelBus));\r\n    script13.spawn(funkyFloorLight2, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight2, channelBus));\r\n    script13.spawn(funkyFloorLight3, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight3, channelBus));\r\n    script13.spawn(funkyFloorLight4, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight4, channelBus));\r\n    script13.spawn(funkyFloorLight5, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight5, channelBus));\r\n    script13.spawn(funkyFloorLight6, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, funkyFloorLight6, channelBus));\r\n    script14.spawn(tableLampLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight, channelBus));\r\n    script14.spawn(tableLampLight2, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight2, channelBus));\r\n    script14.spawn(tableLampLight3, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight3, channelBus));\r\n    script14.spawn(tableLampLight4, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight4, channelBus));\r\n    script14.spawn(tableLampLight5, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight5, channelBus));\r\n    script14.spawn(tableLampLight6, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight6, channelBus));\r\n    script14.spawn(tableLampLight7, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, tableLampLight7, channelBus));\r\n    script9.spawn(radioCyberpunk2, { \"startOn\": false, \"volume\": 1, \"onClickText\": \" \", \"onClick\": [], \"station\": \"https://icecast.ravepartyradio.org/ravepartyradio-192.mp3\" }, (0, channel_1.createChannel)(channelId, radioCyberpunk2, channelBus));\r\n    script15.spawn(rainLight, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, rainLight, channelBus));\r\n    script15.spawn(rainLight2, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, rainLight2, channelBus));\r\n    script10.spawn(ceilingStriplight3, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, ceilingStriplight3, channelBus));\r\n    script11.spawn(spotlightStripLight2, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, spotlightStripLight2, channelBus));\r\n    script10.spawn(ceilingStriplight4, { \"startOn\": true, \"clickable\": false }, (0, channel_1.createChannel)(channelId, ceilingStriplight4, channelBus));\r\n    script16.spawn(imageFromURL, { \"image\": \"https://i.postimg.cc/6pMZYFNk/OUBITA-LOGO.png\" }, (0, channel_1.createChannel)(channelId, imageFromURL, channelBus));\r\n    script15.spawn(rainLight3, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, rainLight3, channelBus));\r\n    script17.spawn(nftPictureFrame, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame, channelBus));\r\n    script17.spawn(nftPictureFrame2, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame2, channelBus));\r\n    script17.spawn(nftPictureFrame3, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame3, channelBus));\r\n    script17.spawn(nftPictureFrame4, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame4, channelBus));\r\n    script17.spawn(nftPictureFrame5, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame5, channelBus));\r\n    script17.spawn(nftPictureFrame6, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame6, channelBus));\r\n    script17.spawn(nftPictureFrame9, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame9, channelBus));\r\n    script17.spawn(nftPictureFrame10, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame10, channelBus));\r\n    script17.spawn(nftPictureFrame11, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame11, channelBus));\r\n    script17.spawn(nftPictureFrame13, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame13, channelBus));\r\n    script17.spawn(nftPictureFrame14, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame14, channelBus));\r\n    script17.spawn(nftPictureFrame15, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame15, channelBus));\r\n    script17.spawn(nftPictureFrame16, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame16, channelBus));\r\n    script17.spawn(nftPictureFrame17, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame17, channelBus));\r\n    script17.spawn(nftPictureFrame18, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame18, channelBus));\r\n    script17.spawn(nftPictureFrame19, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame19, channelBus));\r\n    script17.spawn(nftPictureFrame22, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame22, channelBus));\r\n    script17.spawn(nftPictureFrame24, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame24, channelBus));\r\n    script17.spawn(nftPictureFrame7, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame7, channelBus));\r\n    script17.spawn(nftPictureFrame8, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame8, channelBus));\r\n    script17.spawn(nftPictureFrame12, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame12, channelBus));\r\n    script17.spawn(nftPictureFrame20, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame20, channelBus));\r\n    script17.spawn(nftPictureFrame21, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame21, channelBus));\r\n    script17.spawn(nftPictureFrame23, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame23, channelBus));\r\n    script17.spawn(nftPictureFrame25, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame25, channelBus));\r\n    script17.spawn(nftPictureFrame26, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame26, channelBus));\r\n    script17.spawn(nftPictureFrame27, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame27, channelBus));\r\n    script17.spawn(nftPictureFrame28, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame28, channelBus));\r\n    script17.spawn(nftPictureFrame29, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame29, channelBus));\r\n    script17.spawn(nftPictureFrame30, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame30, channelBus));\r\n    script17.spawn(nftPictureFrame31, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame31, channelBus));\r\n    script17.spawn(nftPictureFrame35, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame35, channelBus));\r\n    script17.spawn(nftPictureFrame36, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame36, channelBus));\r\n    script17.spawn(nftPictureFrame32, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame32, channelBus));\r\n    script17.spawn(nftPictureFrame33, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame33, channelBus));\r\n    script17.spawn(nftPictureFrame34, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame34, channelBus));\r\n    script18.spawn(galleryLight, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, galleryLight, channelBus));\r\n    script18.spawn(galleryLight2, { \"startOn\": true, \"clickable\": true }, (0, channel_1.createChannel)(channelId, galleryLight2, channelBus));\r\n    script17.spawn(nftPictureFrame37, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame37, channelBus));\r\n    script17.spawn(nftPictureFrame38, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame38, channelBus));\r\n    script17.spawn(nftPictureFrame39, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame39, channelBus));\r\n    script17.spawn(nftPictureFrame40, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame40, channelBus));\r\n    script17.spawn(nftPictureFrame41, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame41, channelBus));\r\n    script17.spawn(nftPictureFrame42, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame42, channelBus));\r\n    script17.spawn(nftPictureFrame43, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame43, channelBus));\r\n    script17.spawn(nftPictureFrame44, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame44, channelBus));\r\n    script17.spawn(nftPictureFrame45, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame45, channelBus));\r\n    script17.spawn(nftPictureFrame46, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame46, channelBus));\r\n    script17.spawn(nftPictureFrame47, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame47, channelBus));\r\n    script17.spawn(nftPictureFrame48, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame48, channelBus));\r\n    script17.spawn(nftPictureFrame49, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame49, channelBus));\r\n    script17.spawn(nftPictureFrame50, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame50, channelBus));\r\n    script17.spawn(nftPictureFrame51, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame51, channelBus));\r\n    script17.spawn(nftPictureFrame52, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame52, channelBus));\r\n    script17.spawn(nftPictureFrame53, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame53, channelBus));\r\n    script17.spawn(nftPictureFrame54, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame54, channelBus));\r\n    script17.spawn(nftPictureFrame55, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame55, channelBus));\r\n    script17.spawn(nftPictureFrame56, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame56, channelBus));\r\n    script17.spawn(nftPictureFrame57, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame57, channelBus));\r\n    script17.spawn(nftPictureFrame58, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame58, channelBus));\r\n    script17.spawn(nftPictureFrame59, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame59, channelBus));\r\n    script17.spawn(nftPictureFrame60, { \"id\": \"558536\", \"contract\": \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"style\": \"Classic\", \"color\": \"#FFFFFF\", \"ui\": true }, (0, channel_1.createChannel)(channelId, nftPictureFrame60, channelBus));\r\n});\r\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "7bffde9dc1f1f1aaf8dc52c178da040effe850fcf0452bfc87e960c5077de972"
  }
]